
blink23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003df0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08003e58  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003e58  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6b5  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e23  00000000  00000000  0001274d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00014570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0d  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229b8  00000000  00000000  00015c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e645  00000000  00000000  00038615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2978  00000000  00000000  00046c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001195d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  00119618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d64 	.word	0x08003d64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003d64 	.word	0x08003d64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Redirect printf output to UART1
int _write(int fd, char *ptr, int len) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {   // stdout or stderr
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d002      	beq.n	80005f4 <_write+0x18>
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d111      	bne.n	8000618 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fc:	68b9      	ldr	r1, [r7, #8]
 80005fe:	4809      	ldr	r0, [pc, #36]	@ (8000624 <_write+0x48>)
 8000600:	f002 f8c6 	bl	8002790 <HAL_UART_Transmit>
 8000604:	4603      	mov	r3, r0
 8000606:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK) {
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <_write+0x36>
            return len;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	e004      	b.n	800061c <_write+0x40>
        } else {
            return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000616:	e001      	b.n	800061c <_write+0x40>
        }
    }
    return -1;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000cc 	.word	0x200000cc

08000628 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a05      	ldr	r2, [pc, #20]	@ (800064c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d103      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063a:	2120      	movs	r1, #32
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800063e:	f000 fe52 	bl	80012e6 <HAL_GPIO_TogglePin>
	}
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40000800 	.word	0x40000800
 8000650:	40020000 	.word	0x40020000

08000654 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN_Pin){
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000664:	d102      	bne.n	800066c <HAL_GPIO_EXTI_Callback+0x18>
		btn_press = 1;
 8000666:	4b04      	ldr	r3, [pc, #16]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x24>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	}
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000114 	.word	0x20000114

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 faff 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f819 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 f8ef 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068e:	f000 f8c3 	bl	8000818 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000692:	f000 f873 	bl	800077c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000696:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <main+0x38>)
 8000698:	f001 fc0a 	bl	8001eb0 <HAL_TIM_Base_Start_IT>

  printf("blink going to happen");
 800069c:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <main+0x3c>)
 800069e:	f002 fcf5 	bl	800308c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  int tickCounter = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]

  while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x32>
 80006b2:	bf00      	nop
 80006b4:	20000084 	.word	0x20000084
 80006b8:	08003d7c 	.word	0x08003d7c

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd33 	bl	8003136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemClock_Config+0xb8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a22      	ldr	r2, [pc, #136]	@ (8000774 <SystemClock_Config+0xb8>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemClock_Config+0xb8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <SystemClock_Config+0xbc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <SystemClock_Config+0xbc>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <SystemClock_Config+0xbc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4618      	mov	r0, r3
 8000732:	f001 f8cf 	bl	80018d4 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800073c:	f000 f8fe 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fdf6 	bl	800134c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000766:	f000 f8e9 	bl	800093c <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	@ 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_TIM4_Init+0x94>)
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_TIM4_Init+0x98>)
 800079c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80007ac:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007ae:	f241 3287 	movw	r2, #4999	@ 0x1387
 80007b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007c0:	4813      	ldr	r0, [pc, #76]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007c2:	f001 fb25 	bl	8001e10 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80007cc:	f000 f8b6 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4619      	mov	r1, r3
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007de:	f001 fcc7 	bl	8002170 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 f8a8 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_TIM4_Init+0x94>)
 80007fa:	f001 fee9 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f89a 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000084 	.word	0x20000084
 8000814:	40000800 	.word	0x40000800

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f001 ff4e 	bl	80026f0 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f86f 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000cc 	.word	0x200000cc
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <MX_GPIO_Init+0xc4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <MX_GPIO_Init+0xc4>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <MX_GPIO_Init+0xc4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a22      	ldr	r2, [pc, #136]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_GPIO_Init+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2120      	movs	r1, #32
 80008da:	4816      	ldr	r0, [pc, #88]	@ (8000934 <MX_GPIO_Init+0xc8>)
 80008dc:	f000 fcea 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4810      	ldr	r0, [pc, #64]	@ (8000938 <MX_GPIO_Init+0xcc>)
 80008f8:	f000 fb48 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008fc:	2320      	movs	r3, #32
 80008fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4808      	ldr	r0, [pc, #32]	@ (8000934 <MX_GPIO_Init+0xc8>)
 8000914:	f000 fb3a 	bl	8000f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2028      	movs	r0, #40	@ 0x28
 800091e:	f000 fafe 	bl	8000f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000922:	2028      	movs	r0, #40	@ 0x28
 8000924:	f000 fb17 	bl	8000f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	@ (80009e0 <HAL_TIM_Base_MspInit+0x48>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d115      	bne.n	80009d6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a0c      	ldr	r2, [pc, #48]	@ (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_TIM_Base_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	201e      	movs	r0, #30
 80009cc:	f000 faa7 	bl	8000f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009d0:	201e      	movs	r0, #30
 80009d2:	f000 fac0 	bl	8000f56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40000800 	.word	0x40000800
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa95 	bl	8000f8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f92b 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <TIM4_IRQHandler+0x10>)
 8000ade:	f001 fa57 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000084 	.word	0x20000084

08000aec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000af0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000af4:	f000 fc12 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 fb00 	bl	80031d4 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000118 	.word	0x20000118
 8000c08:	20000270 	.word	0x20000270

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	@ (8000c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	@ (8000c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fabf 	bl	80031e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fd0b 	bl	800067c <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c74:	08003df0 	.word	0x08003df0
  ldr r2, =_sbss
 8000c78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c7c:	2000026c 	.word	0x2000026c

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f92b 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe46 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f943 	bl	8000f72 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d04:	f000 f90b 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	2000011c 	.word	0x2000011c

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <__NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	db0b      	blt.n	8000df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f003 021f 	and.w	r2, r3, #31
 8000de4:	4907      	ldr	r1, [pc, #28]	@ (8000e04 <__NVIC_EnableIRQ+0x38>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	2001      	movs	r0, #1
 8000dee:	fa00 f202 	lsl.w	r2, r0, r2
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000e100 	.word	0xe000e100

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff29 	bl	8000d68 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f30:	f7ff ff3e 	bl	8000db0 <__NVIC_GetPriorityGrouping>
 8000f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff ff8e 	bl	8000e5c <NVIC_EncodePriority>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff5d 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4e:	bf00      	nop
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff31 	bl	8000dcc <__NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffa2 	bl	8000ec4 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e165      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8154 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80ae 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b5d      	ldr	r3, [pc, #372]	@ (800128c <HAL_GPIO_Init+0x300>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a5c      	ldr	r2, [pc, #368]	@ (800128c <HAL_GPIO_Init+0x300>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <HAL_GPIO_Init+0x300>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a58      	ldr	r2, [pc, #352]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	@ (8001294 <HAL_GPIO_Init+0x308>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x21a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4e      	ldr	r2, [pc, #312]	@ (8001298 <HAL_GPIO_Init+0x30c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x216>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4d      	ldr	r2, [pc, #308]	@ (800129c <HAL_GPIO_Init+0x310>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x212>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4c      	ldr	r2, [pc, #304]	@ (80012a0 <HAL_GPIO_Init+0x314>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x20e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4b      	ldr	r2, [pc, #300]	@ (80012a4 <HAL_GPIO_Init+0x318>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x20a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4a      	ldr	r2, [pc, #296]	@ (80012a8 <HAL_GPIO_Init+0x31c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x206>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a49      	ldr	r2, [pc, #292]	@ (80012ac <HAL_GPIO_Init+0x320>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x202>
 800118a:	2306      	movs	r3, #6
 800118c:	e00c      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 800118e:	2307      	movs	r3, #7
 8001190:	e00a      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 8001192:	2305      	movs	r3, #5
 8001194:	e008      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 8001196:	2304      	movs	r3, #4
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 800119a:	2303      	movs	r3, #3
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x21c>
 80011a6:	2300      	movs	r3, #0
 80011a8:	69fa      	ldr	r2, [r7, #28]
 80011aa:	f002 0203 	and.w	r2, r2, #3
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4093      	lsls	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b8:	4935      	ldr	r1, [pc, #212]	@ (8001290 <HAL_GPIO_Init+0x304>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a31      	ldr	r2, [pc, #196]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a26      	ldr	r2, [pc, #152]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800121a:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001268:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3301      	adds	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2b0f      	cmp	r3, #15
 8001278:	f67f ae96 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40021000 	.word	0x40021000
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43d9      	mvns	r1, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f98a 	bl	8000654 <HAL_GPIO_EXTI_Callback>
  }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0cc      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001360:	4b68      	ldr	r3, [pc, #416]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d90c      	bls.n	8001388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b65      	ldr	r3, [pc, #404]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001376:	4b63      	ldr	r3, [pc, #396]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0b8      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a0:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a58      	ldr	r2, [pc, #352]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b8:	4b53      	ldr	r3, [pc, #332]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a52      	ldr	r2, [pc, #328]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c4:	4b50      	ldr	r3, [pc, #320]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	494d      	ldr	r1, [pc, #308]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d044      	beq.n	800146c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d119      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e07f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d003      	beq.n	800140a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001406:	2b03      	cmp	r3, #3
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e06f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e067      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 0203 	bic.w	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4934      	ldr	r1, [pc, #208]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff fc88 	bl	8000d50 <HAL_GetTick>
 8001440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	e00a      	b.n	800145a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001444:	f7ff fc84 	bl	8000d50 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e04f      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 020c 	and.w	r2, r3, #12
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	429a      	cmp	r2, r3
 800146a:	d1eb      	bne.n	8001444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d20c      	bcs.n	8001494 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e032      	b.n	80014fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4916      	ldr	r1, [pc, #88]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	490e      	ldr	r1, [pc, #56]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014d2:	f000 f855 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	490a      	ldr	r1, [pc, #40]	@ (800150c <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_RCC_ClockConfig+0x1c8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbe8 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00
 8001508:	40023800 	.word	0x40023800
 800150c:	08003d94 	.word	0x08003d94
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_RCC_GetHCLKFreq+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001534:	f7ff fff0 	bl	8001518 <HAL_RCC_GetHCLKFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	0a9b      	lsrs	r3, r3, #10
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	4903      	ldr	r1, [pc, #12]	@ (8001554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800
 8001554:	08003da4 	.word	0x08003da4

08001558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800155c:	f7ff ffdc 	bl	8001518 <HAL_RCC_GetHCLKFreq>
 8001560:	4602      	mov	r2, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	0b5b      	lsrs	r3, r3, #13
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4903      	ldr	r1, [pc, #12]	@ (800157c <HAL_RCC_GetPCLK2Freq+0x24>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	08003da4 	.word	0x08003da4

08001580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001584:	b0a6      	sub	sp, #152	@ 0x98
 8001586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a6:	4bc8      	ldr	r3, [pc, #800]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	f200 817e 	bhi.w	80018b0 <HAL_RCC_GetSysClockFreq+0x330>
 80015b4:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015f1 	.word	0x080015f1
 80015c0:	080018b1 	.word	0x080018b1
 80015c4:	080018b1 	.word	0x080018b1
 80015c8:	080018b1 	.word	0x080018b1
 80015cc:	080015f9 	.word	0x080015f9
 80015d0:	080018b1 	.word	0x080018b1
 80015d4:	080018b1 	.word	0x080018b1
 80015d8:	080018b1 	.word	0x080018b1
 80015dc:	08001601 	.word	0x08001601
 80015e0:	080018b1 	.word	0x080018b1
 80015e4:	080018b1 	.word	0x080018b1
 80015e8:	080018b1 	.word	0x080018b1
 80015ec:	0800176b 	.word	0x0800176b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4bb6      	ldr	r3, [pc, #728]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80015f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015f6:	e15f      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015f8:	4bb5      	ldr	r3, [pc, #724]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80015fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015fe:	e15b      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001600:	4bb1      	ldr	r3, [pc, #708]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160c:	4bae      	ldr	r3, [pc, #696]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d031      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001618:	4bab      	ldr	r3, [pc, #684]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162a:	663b      	str	r3, [r7, #96]	@ 0x60
 800162c:	2300      	movs	r3, #0
 800162e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001630:	4ba7      	ldr	r3, [pc, #668]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001632:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001636:	462a      	mov	r2, r5
 8001638:	fb03 f202 	mul.w	r2, r3, r2
 800163c:	2300      	movs	r3, #0
 800163e:	4621      	mov	r1, r4
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	4413      	add	r3, r2
 8001646:	4aa2      	ldr	r2, [pc, #648]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001648:	4621      	mov	r1, r4
 800164a:	fba1 1202 	umull	r1, r2, r1, r2
 800164e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001650:	460a      	mov	r2, r1
 8001652:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001654:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001656:	4413      	add	r3, r2
 8001658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800165a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800165e:	2200      	movs	r2, #0
 8001660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001662:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001664:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001668:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800166c:	f7fe fe20 	bl	80002b0 <__aeabi_uldivmod>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4613      	mov	r3, r2
 8001676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800167a:	e064      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b92      	ldr	r3, [pc, #584]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	653b      	str	r3, [r7, #80]	@ 0x50
 8001686:	657a      	str	r2, [r7, #84]	@ 0x54
 8001688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800168a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001690:	2300      	movs	r3, #0
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001694:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001698:	4622      	mov	r2, r4
 800169a:	462b      	mov	r3, r5
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	f04f 0100 	mov.w	r1, #0
 80016a4:	0159      	lsls	r1, r3, #5
 80016a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016aa:	0150      	lsls	r0, r2, #5
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4621      	mov	r1, r4
 80016b2:	1a51      	subs	r1, r2, r1
 80016b4:	6139      	str	r1, [r7, #16]
 80016b6:	4629      	mov	r1, r5
 80016b8:	eb63 0301 	sbc.w	r3, r3, r1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016ca:	4659      	mov	r1, fp
 80016cc:	018b      	lsls	r3, r1, #6
 80016ce:	4651      	mov	r1, sl
 80016d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d4:	4651      	mov	r1, sl
 80016d6:	018a      	lsls	r2, r1, #6
 80016d8:	4651      	mov	r1, sl
 80016da:	ebb2 0801 	subs.w	r8, r2, r1
 80016de:	4659      	mov	r1, fp
 80016e0:	eb63 0901 	sbc.w	r9, r3, r1
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f8:	4690      	mov	r8, r2
 80016fa:	4699      	mov	r9, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	eb18 0303 	adds.w	r3, r8, r3
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	462b      	mov	r3, r5
 8001706:	eb49 0303 	adc.w	r3, r9, r3
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001718:	4629      	mov	r1, r5
 800171a:	028b      	lsls	r3, r1, #10
 800171c:	4621      	mov	r1, r4
 800171e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001722:	4621      	mov	r1, r4
 8001724:	028a      	lsls	r2, r1, #10
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800172e:	2200      	movs	r2, #0
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
 8001732:	647a      	str	r2, [r7, #68]	@ 0x44
 8001734:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001738:	f7fe fdba 	bl	80002b0 <__aeabi_uldivmod>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4613      	mov	r3, r2
 8001742:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001746:	4b60      	ldr	r3, [pc, #384]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	3301      	adds	r3, #1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001758:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800175c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001768:	e0a6      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176a:	4b57      	ldr	r3, [pc, #348]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b54      	ldr	r3, [pc, #336]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d02a      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800178c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001794:	2100      	movs	r1, #0
 8001796:	4b4e      	ldr	r3, [pc, #312]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001798:	fb03 f201 	mul.w	r2, r3, r1
 800179c:	2300      	movs	r3, #0
 800179e:	fb00 f303 	mul.w	r3, r0, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80017a6:	fba0 1202 	umull	r1, r2, r0, r2
 80017aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80017ac:	460a      	mov	r2, r1
 80017ae:	673a      	str	r2, [r7, #112]	@ 0x70
 80017b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017b2:	4413      	add	r3, r2
 80017b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80017b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017ba:	2200      	movs	r2, #0
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80017be:	637a      	str	r2, [r7, #52]	@ 0x34
 80017c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80017c8:	f7fe fd72 	bl	80002b0 <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4613      	mov	r3, r2
 80017d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017d6:	e05b      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d8:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	2200      	movs	r2, #0
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017f4:	4642      	mov	r2, r8
 80017f6:	464b      	mov	r3, r9
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	0159      	lsls	r1, r3, #5
 8001802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001806:	0150      	lsls	r0, r2, #5
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4641      	mov	r1, r8
 800180e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001812:	4649      	mov	r1, r9
 8001814:	eb63 0b01 	sbc.w	fp, r3, r1
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800182c:	ebb2 040a 	subs.w	r4, r2, sl
 8001830:	eb63 050b 	sbc.w	r5, r3, fp
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	00eb      	lsls	r3, r5, #3
 800183e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001842:	00e2      	lsls	r2, r4, #3
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4643      	mov	r3, r8
 800184a:	18e3      	adds	r3, r4, r3
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	464b      	mov	r3, r9
 8001850:	eb45 0303 	adc.w	r3, r5, r3
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4629      	mov	r1, r5
 8001864:	028b      	lsls	r3, r1, #10
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800186c:	4621      	mov	r1, r4
 800186e:	028a      	lsls	r2, r1, #10
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001878:	2200      	movs	r2, #0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	61fa      	str	r2, [r7, #28]
 800187e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001882:	f7fe fd15 	bl	80002b0 <__aeabi_uldivmod>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4613      	mov	r3, r2
 800188c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001890:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0f1b      	lsrs	r3, r3, #28
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800189e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018ae:	e003      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80018b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3798      	adds	r7, #152	@ 0x98
 80018c0:	46bd      	mov	sp, r7
 80018c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	00f42400 	.word	0x00f42400
 80018d0:	017d7840 	.word	0x017d7840

080018d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e28d      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8083 	beq.w	80019fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018f4:	4b94      	ldr	r3, [pc, #592]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d019      	beq.n	8001934 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001900:	4b91      	ldr	r3, [pc, #580]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
        || \
 8001908:	2b08      	cmp	r3, #8
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800190c:	4b8e      	ldr	r3, [pc, #568]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001918:	d00c      	beq.n	8001934 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d112      	bne.n	800194c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001926:	4b88      	ldr	r3, [pc, #544]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001932:	d10b      	bne.n	800194c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	4b84      	ldr	r3, [pc, #528]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d05b      	beq.n	80019f8 <HAL_RCC_OscConfig+0x124>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d157      	bne.n	80019f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e25a      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x90>
 8001956:	4b7c      	ldr	r3, [pc, #496]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xcc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xb4>
 800196e:	4b76      	ldr	r3, [pc, #472]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a72      	ldr	r2, [pc, #456]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xcc>
 8001988:	4b6f      	ldr	r3, [pc, #444]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b6c      	ldr	r3, [pc, #432]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6b      	ldr	r2, [pc, #428]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f9d2 	bl	8000d50 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f9ce 	bl	8000d50 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	@ 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e21f      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b61      	ldr	r3, [pc, #388]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xdc>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f9be 	bl	8000d50 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff f9ba 	bl	8000d50 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	@ 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e20b      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	4b57      	ldr	r3, [pc, #348]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x104>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d06f      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a06:	4b50      	ldr	r3, [pc, #320]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d017      	beq.n	8001a42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a12:	4b4d      	ldr	r3, [pc, #308]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b47      	ldr	r3, [pc, #284]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b44      	ldr	r3, [pc, #272]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x186>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1d3      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4937      	ldr	r1, [pc, #220]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <HAL_RCC_OscConfig+0x278>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f967 	bl	8000d50 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f963 	bl	8000d50 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1b4      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4925      	ldr	r1, [pc, #148]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_RCC_OscConfig+0x278>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f946 	bl	8000d50 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f942 	bl	8000d50 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e193      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d036      	beq.n	8001b60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f926 	bl	8000d50 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f922 	bl	8000d50 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e173      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x234>
 8001b26:	e01b      	b.n	8001b60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f90f 	bl	8000d50 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff f90b 	bl	8000d50 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d907      	bls.n	8001b54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e15c      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470000 	.word	0x42470000
 8001b50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b8a      	ldr	r3, [pc, #552]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ea      	bne.n	8001b36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8097 	beq.w	8001c9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b83      	ldr	r3, [pc, #524]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b7f      	ldr	r3, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a7e      	ldr	r2, [pc, #504]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b79      	ldr	r3, [pc, #484]	@ (8001d84 <HAL_RCC_OscConfig+0x4b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d118      	bne.n	8001bdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	4b76      	ldr	r3, [pc, #472]	@ (8001d84 <HAL_RCC_OscConfig+0x4b0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	@ (8001d84 <HAL_RCC_OscConfig+0x4b0>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f8cb 	bl	8000d50 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff f8c7 	bl	8000d50 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e118      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d84 <HAL_RCC_OscConfig+0x4b0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x31e>
 8001be4:	4b66      	ldr	r3, [pc, #408]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x358>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x340>
 8001bfa:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfe:	4a60      	ldr	r2, [pc, #384]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c06:	4b5e      	ldr	r3, [pc, #376]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0x358>
 8001c14:	4b5a      	ldr	r3, [pc, #360]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c18:	4a59      	ldr	r2, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c20:	4b57      	ldr	r3, [pc, #348]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c24:	4a56      	ldr	r2, [pc, #344]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f023 0304 	bic.w	r3, r3, #4
 8001c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d015      	beq.n	8001c60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f88c 	bl	8000d50 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f888 	bl	8000d50 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0d7      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c52:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ee      	beq.n	8001c3c <HAL_RCC_OscConfig+0x368>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f876 	bl	8000d50 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f872 	bl	8000d50 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0c1      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7e:	4b40      	ldr	r3, [pc, #256]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ee      	bne.n	8001c68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b3b      	ldr	r3, [pc, #236]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	4a3a      	ldr	r2, [pc, #232]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80ad 	beq.w	8001e00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d060      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d145      	bne.n	8001d46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <HAL_RCC_OscConfig+0x4b4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f846 	bl	8000d50 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f842 	bl	8000d50 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e093      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	061b      	lsls	r3, r3, #24
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	071b      	lsls	r3, r3, #28
 8001d12:	491b      	ldr	r1, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <HAL_RCC_OscConfig+0x4b4>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f817 	bl	8000d50 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff f813 	bl	8000d50 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e064      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x452>
 8001d44:	e05c      	b.n	8001e00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_RCC_OscConfig+0x4b4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f800 	bl	8000d50 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe fffc 	bl	8000d50 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04d      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x480>
 8001d72:	e045      	b.n	8001e00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e040      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_RCC_OscConfig+0x538>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d030      	beq.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d129      	bne.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d122      	bne.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d119      	bne.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d10f      	bne.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e041      	b.n	8001ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fdae 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 fa7e 	bl	8002350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04e      	b.n	8001f66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef2:	d01d      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1e      	ldr	r2, [pc, #120]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	@ (8001f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d111      	bne.n	8001f54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d010      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	e007      	b.n	8001f64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40001800 	.word	0x40001800

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0202 	mvn.w	r2, #2
 8001fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f999 	bl	8002312 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f98b 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f99c 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d020      	beq.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f973 	bl	8002312 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f965 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f976 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d020      	beq.n	800208c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0208 	mvn.w	r2, #8
 800205c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2204      	movs	r2, #4
 8002062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f94d 	bl	8002312 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f93f 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f950 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d020      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0210 	mvn.w	r2, #16
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2208      	movs	r2, #8
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f927 	bl	8002312 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f919 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f92a 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0201 	mvn.w	r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fa96 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fade 	bl	80026dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8fb 	bl	800233a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fab0 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_TIM_ConfigClockSource+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e0b4      	b.n	80022f6 <HAL_TIM_ConfigClockSource+0x186>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c4:	d03e      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0xd4>
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ca:	f200 8087 	bhi.w	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021d2:	f000 8086 	beq.w	80022e2 <HAL_TIM_ConfigClockSource+0x172>
 80021d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021da:	d87f      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b70      	cmp	r3, #112	@ 0x70
 80021de:	d01a      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0xa6>
 80021e0:	2b70      	cmp	r3, #112	@ 0x70
 80021e2:	d87b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021e4:	2b60      	cmp	r3, #96	@ 0x60
 80021e6:	d050      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x11a>
 80021e8:	2b60      	cmp	r3, #96	@ 0x60
 80021ea:	d877      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b50      	cmp	r3, #80	@ 0x50
 80021ee:	d03c      	beq.n	800226a <HAL_TIM_ConfigClockSource+0xfa>
 80021f0:	2b50      	cmp	r3, #80	@ 0x50
 80021f2:	d873      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d058      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x13a>
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d86f      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b30      	cmp	r3, #48	@ 0x30
 80021fe:	d064      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002200:	2b30      	cmp	r3, #48	@ 0x30
 8002202:	d86b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b20      	cmp	r3, #32
 8002206:	d060      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d867      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05c      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002210:	2b10      	cmp	r3, #16
 8002212:	d05a      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	e062      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002226:	f000 f9b3 	bl	8002590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	609a      	str	r2, [r3, #8]
      break;
 8002242:	e04f      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002254:	f000 f99c 	bl	8002590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002266:	609a      	str	r2, [r3, #8]
      break;
 8002268:	e03c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	461a      	mov	r2, r3
 8002278:	f000 f910 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2150      	movs	r1, #80	@ 0x50
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f969 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 8002288:	e02c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f92f 	bl	80024fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2160      	movs	r1, #96	@ 0x60
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f959 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022a8:	e01c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 f8f0 	bl	800249c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2140      	movs	r1, #64	@ 0x40
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f949 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022c8:	e00c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 f940 	bl	800255a <TIM_ITRx_SetConfig>
      break;
 80022da:	e003      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e000      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a43      	ldr	r2, [pc, #268]	@ (8002470 <TIM_Base_SetConfig+0x120>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d013      	beq.n	8002390 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236e:	d00f      	beq.n	8002390 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a40      	ldr	r2, [pc, #256]	@ (8002474 <TIM_Base_SetConfig+0x124>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00b      	beq.n	8002390 <TIM_Base_SetConfig+0x40>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3f      	ldr	r2, [pc, #252]	@ (8002478 <TIM_Base_SetConfig+0x128>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <TIM_Base_SetConfig+0x12c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3d      	ldr	r2, [pc, #244]	@ (8002480 <TIM_Base_SetConfig+0x130>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a32      	ldr	r2, [pc, #200]	@ (8002470 <TIM_Base_SetConfig+0x120>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d02b      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b0:	d027      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002474 <TIM_Base_SetConfig+0x124>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d023      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <TIM_Base_SetConfig+0x128>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <TIM_Base_SetConfig+0x12c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01b      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <TIM_Base_SetConfig+0x130>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d017      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002484 <TIM_Base_SetConfig+0x134>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002488 <TIM_Base_SetConfig+0x138>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00f      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a29      	ldr	r2, [pc, #164]	@ (800248c <TIM_Base_SetConfig+0x13c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00b      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a28      	ldr	r2, [pc, #160]	@ (8002490 <TIM_Base_SetConfig+0x140>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a27      	ldr	r2, [pc, #156]	@ (8002494 <TIM_Base_SetConfig+0x144>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d003      	beq.n	8002402 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <TIM_Base_SetConfig+0x148>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d108      	bne.n	8002414 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a0e      	ldr	r2, [pc, #56]	@ (8002470 <TIM_Base_SetConfig+0x120>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <TIM_Base_SetConfig+0xf2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a10      	ldr	r2, [pc, #64]	@ (8002480 <TIM_Base_SetConfig+0x130>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d103      	bne.n	800244a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40010000 	.word	0x40010000
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40010400 	.word	0x40010400
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800
 8002490:	40001800 	.word	0x40001800
 8002494:	40001c00 	.word	0x40001c00
 8002498:	40002000 	.word	0x40002000

0800249c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f023 030a 	bic.w	r3, r3, #10
 80024d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 0210 	bic.w	r2, r3, #16
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	031b      	lsls	r3, r3, #12
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	621a      	str	r2, [r3, #32]
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	f043 0307 	orr.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	021a      	lsls	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e05a      	b.n	800269e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a21      	ldr	r2, [pc, #132]	@ (80026ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d01d      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1a      	ldr	r2, [pc, #104]	@ (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a15      	ldr	r2, [pc, #84]	@ (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10c      	bne.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4313      	orrs	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800
 80026b8:	40000c00 	.word	0x40000c00
 80026bc:	40010400 	.word	0x40010400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40001800 	.word	0x40001800

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e042      	b.n	8002788 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe f966 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	@ 0x24
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f973 	bl	8002a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d175      	bne.n	800289c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_UART_Transmit+0x2c>
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e06e      	b.n	800289e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2221      	movs	r2, #33	@ 0x21
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fabf 	bl	8000d50 <HAL_GetTick>
 80027d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e8:	d108      	bne.n	80027fc <HAL_UART_Transmit+0x6c>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d104      	bne.n	80027fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	e003      	b.n	8002804 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002804:	e02e      	b.n	8002864 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f848 	bl	80028a6 <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e03a      	b.n	800289e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800283c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e007      	b.n	8002856 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3301      	adds	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cb      	bne.n	8002806 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	@ 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f814 	bl	80028a6 <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e006      	b.n	800289e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4613      	mov	r3, r2
 80028b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028b6:	e03b      	b.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028be:	d037      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe fa46 	bl	8000d50 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e03a      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b80      	cmp	r3, #128	@ 0x80
 80028ec:	d020      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d01d      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d116      	bne.n	8002930 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f81d 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2208      	movs	r2, #8
 8002922:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e00f      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0b4      	beq.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b480      	push	{r7}
 800295a:	b095      	sub	sp, #84	@ 0x54
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002980:	643a      	str	r2, [r7, #64]	@ 0x40
 8002982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002988:	e841 2300 	strex	r3, r2, [r1]
 800298c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800298e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e5      	bne.n	8002960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3314      	adds	r3, #20
 800299a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d119      	bne.n	8002a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	60bb      	str	r3, [r7, #8]
   return(result);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f023 0310 	bic.w	r3, r3, #16
 80029e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f0:	61ba      	str	r2, [r7, #24]
 80029f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6979      	ldr	r1, [r7, #20]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	e841 2300 	strex	r3, r2, [r1]
 80029fc:	613b      	str	r3, [r7, #16]
   return(result);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e5      	bne.n	80029d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a12:	bf00      	nop
 8002a14:	3754      	adds	r7, #84	@ 0x54
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b0c0      	sub	sp, #256	@ 0x100
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	ea40 0301 	orr.w	r3, r0, r1
 8002a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a78:	f021 010c 	bic.w	r1, r1, #12
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a86:	430b      	orrs	r3, r1
 8002a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9a:	6999      	ldr	r1, [r3, #24]
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	ea40 0301 	orr.w	r3, r0, r1
 8002aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b8f      	ldr	r3, [pc, #572]	@ (8002cec <UART_SetConfig+0x2cc>)
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0xa0>
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf0 <UART_SetConfig+0x2d0>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d104      	bne.n	8002aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac0:	f7fe fd4a 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 8002ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ac8:	e003      	b.n	8002ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aca:	f7fe fd31 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
 8002ace:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002adc:	f040 810c 	bne.w	8002cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002aea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002af2:	4622      	mov	r2, r4
 8002af4:	462b      	mov	r3, r5
 8002af6:	1891      	adds	r1, r2, r2
 8002af8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002afa:	415b      	adcs	r3, r3
 8002afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b02:	4621      	mov	r1, r4
 8002b04:	eb12 0801 	adds.w	r8, r2, r1
 8002b08:	4629      	mov	r1, r5
 8002b0a:	eb43 0901 	adc.w	r9, r3, r1
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b22:	4690      	mov	r8, r2
 8002b24:	4699      	mov	r9, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	eb18 0303 	adds.w	r3, r8, r3
 8002b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b30:	462b      	mov	r3, r5
 8002b32:	eb49 0303 	adc.w	r3, r9, r3
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b4e:	460b      	mov	r3, r1
 8002b50:	18db      	adds	r3, r3, r3
 8002b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b54:	4613      	mov	r3, r2
 8002b56:	eb42 0303 	adc.w	r3, r2, r3
 8002b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b64:	f7fd fba4 	bl	80002b0 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4b61      	ldr	r3, [pc, #388]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	011c      	lsls	r4, r3, #4
 8002b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b88:	4642      	mov	r2, r8
 8002b8a:	464b      	mov	r3, r9
 8002b8c:	1891      	adds	r1, r2, r2
 8002b8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b90:	415b      	adcs	r3, r3
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b98:	4641      	mov	r1, r8
 8002b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb8:	4692      	mov	sl, r2
 8002bba:	469b      	mov	fp, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002be4:	460b      	mov	r3, r1
 8002be6:	18db      	adds	r3, r3, r3
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bea:	4613      	mov	r3, r2
 8002bec:	eb42 0303 	adc.w	r3, r2, r3
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002bfa:	f7fd fb59 	bl	80002b0 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002c06:	fba3 2301 	umull	r2, r3, r3, r1
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2264      	movs	r2, #100	@ 0x64
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	1acb      	subs	r3, r1, r3
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c1a:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c28:	441c      	add	r4, r3
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c44:	415b      	adcs	r3, r3
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c52:	4649      	mov	r1, r9
 8002c54:	414b      	adcs	r3, r1
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c64:	4659      	mov	r1, fp
 8002c66:	00cb      	lsls	r3, r1, #3
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6e:	4651      	mov	r1, sl
 8002c70:	00ca      	lsls	r2, r1, #3
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	4642      	mov	r2, r8
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c80:	464b      	mov	r3, r9
 8002c82:	460a      	mov	r2, r1
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	18db      	adds	r3, r3, r3
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cb6:	f7fd fafb 	bl	80002b0 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	2164      	movs	r1, #100	@ 0x64
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3332      	adds	r3, #50	@ 0x32
 8002cd2:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <UART_SetConfig+0x2d4>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	f003 0207 	and.w	r2, r3, #7
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4422      	add	r2, r4
 8002ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ce8:	e106      	b.n	8002ef8 <UART_SetConfig+0x4d8>
 8002cea:	bf00      	nop
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	1891      	adds	r1, r2, r2
 8002d10:	6239      	str	r1, [r7, #32]
 8002d12:	415b      	adcs	r3, r3
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	1854      	adds	r4, r2, r1
 8002d1e:	4649      	mov	r1, r9
 8002d20:	eb43 0501 	adc.w	r5, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	00eb      	lsls	r3, r5, #3
 8002d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d32:	00e2      	lsls	r2, r4, #3
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	4643      	mov	r3, r8
 8002d3a:	18e3      	adds	r3, r4, r3
 8002d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d40:	464b      	mov	r3, r9
 8002d42:	eb45 0303 	adc.w	r3, r5, r3
 8002d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d66:	4629      	mov	r1, r5
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d70:	4621      	mov	r1, r4
 8002d72:	008a      	lsls	r2, r1, #2
 8002d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d78:	f7fd fa9a 	bl	80002b0 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b60      	ldr	r3, [pc, #384]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	61b9      	str	r1, [r7, #24]
 8002da4:	415b      	adcs	r3, r3
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	4641      	mov	r1, r8
 8002dae:	1851      	adds	r1, r2, r1
 8002db0:	6139      	str	r1, [r7, #16]
 8002db2:	4649      	mov	r1, r9
 8002db4:	414b      	adcs	r3, r1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	00cb      	lsls	r3, r1, #3
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dce:	4651      	mov	r1, sl
 8002dd0:	00ca      	lsls	r2, r1, #3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4642      	mov	r2, r8
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de0:	464b      	mov	r3, r9
 8002de2:	460a      	mov	r2, r1
 8002de4:	eb42 0303 	adc.w	r3, r2, r3
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002df6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e04:	4649      	mov	r1, r9
 8002e06:	008b      	lsls	r3, r1, #2
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0e:	4641      	mov	r1, r8
 8002e10:	008a      	lsls	r2, r1, #2
 8002e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e16:	f7fd fa4b 	bl	80002b0 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4b38      	ldr	r3, [pc, #224]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002e22:	fba3 2301 	umull	r2, r3, r3, r1
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2264      	movs	r2, #100	@ 0x64
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	1acb      	subs	r3, r1, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	@ 0x32
 8002e34:	4a33      	ldr	r2, [pc, #204]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e40:	441c      	add	r4, r3
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e92:	464b      	mov	r3, r9
 8002e94:	460a      	mov	r2, r1
 8002e96:	eb42 0303 	adc.w	r3, r2, r3
 8002e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ea6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ec6:	f7fd f9f3 	bl	80002b0 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	@ 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	@ 0x32
 8002ee2:	4a08      	ldr	r2, [pc, #32]	@ (8002f04 <UART_SetConfig+0x4e4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4422      	add	r2, r4
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f04:	51eb851f 	.word	0x51eb851f

08002f08 <std>:
 8002f08:	2300      	movs	r3, #0
 8002f0a:	b510      	push	{r4, lr}
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f16:	6083      	str	r3, [r0, #8]
 8002f18:	8181      	strh	r1, [r0, #12]
 8002f1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f1c:	81c2      	strh	r2, [r0, #14]
 8002f1e:	6183      	str	r3, [r0, #24]
 8002f20:	4619      	mov	r1, r3
 8002f22:	2208      	movs	r2, #8
 8002f24:	305c      	adds	r0, #92	@ 0x5c
 8002f26:	f000 f906 	bl	8003136 <memset>
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <std+0x58>)
 8002f2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <std+0x5c>)
 8002f30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f32:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <std+0x60>)
 8002f34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <std+0x64>)
 8002f38:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <std+0x68>)
 8002f3c:	6224      	str	r4, [r4, #32]
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d006      	beq.n	8002f50 <std+0x48>
 8002f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f46:	4294      	cmp	r4, r2
 8002f48:	d002      	beq.n	8002f50 <std+0x48>
 8002f4a:	33d0      	adds	r3, #208	@ 0xd0
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d105      	bne.n	8002f5c <std+0x54>
 8002f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f58:	f000 b966 	b.w	8003228 <__retarget_lock_init_recursive>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	bf00      	nop
 8002f60:	080030b1 	.word	0x080030b1
 8002f64:	080030d3 	.word	0x080030d3
 8002f68:	0800310b 	.word	0x0800310b
 8002f6c:	0800312f 	.word	0x0800312f
 8002f70:	20000120 	.word	0x20000120

08002f74 <stdio_exit_handler>:
 8002f74:	4a02      	ldr	r2, [pc, #8]	@ (8002f80 <stdio_exit_handler+0xc>)
 8002f76:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <stdio_exit_handler+0x10>)
 8002f78:	4803      	ldr	r0, [pc, #12]	@ (8002f88 <stdio_exit_handler+0x14>)
 8002f7a:	f000 b869 	b.w	8003050 <_fwalk_sglue>
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	08003ac5 	.word	0x08003ac5
 8002f88:	2000001c 	.word	0x2000001c

08002f8c <cleanup_stdio>:
 8002f8c:	6841      	ldr	r1, [r0, #4]
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <cleanup_stdio+0x34>)
 8002f90:	4299      	cmp	r1, r3
 8002f92:	b510      	push	{r4, lr}
 8002f94:	4604      	mov	r4, r0
 8002f96:	d001      	beq.n	8002f9c <cleanup_stdio+0x10>
 8002f98:	f000 fd94 	bl	8003ac4 <_fflush_r>
 8002f9c:	68a1      	ldr	r1, [r4, #8]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <cleanup_stdio+0x38>)
 8002fa0:	4299      	cmp	r1, r3
 8002fa2:	d002      	beq.n	8002faa <cleanup_stdio+0x1e>
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f000 fd8d 	bl	8003ac4 <_fflush_r>
 8002faa:	68e1      	ldr	r1, [r4, #12]
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <cleanup_stdio+0x3c>)
 8002fae:	4299      	cmp	r1, r3
 8002fb0:	d004      	beq.n	8002fbc <cleanup_stdio+0x30>
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb8:	f000 bd84 	b.w	8003ac4 <_fflush_r>
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000120 	.word	0x20000120
 8002fc4:	20000188 	.word	0x20000188
 8002fc8:	200001f0 	.word	0x200001f0

08002fcc <global_stdio_init.part.0>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <global_stdio_init.part.0+0x30>)
 8002fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8003000 <global_stdio_init.part.0+0x34>)
 8002fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <global_stdio_init.part.0+0x38>)
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2104      	movs	r1, #4
 8002fdc:	f7ff ff94 	bl	8002f08 <std>
 8002fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	2109      	movs	r1, #9
 8002fe8:	f7ff ff8e 	bl	8002f08 <std>
 8002fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff6:	2112      	movs	r1, #18
 8002ff8:	f7ff bf86 	b.w	8002f08 <std>
 8002ffc:	20000258 	.word	0x20000258
 8003000:	20000120 	.word	0x20000120
 8003004:	08002f75 	.word	0x08002f75

08003008 <__sfp_lock_acquire>:
 8003008:	4801      	ldr	r0, [pc, #4]	@ (8003010 <__sfp_lock_acquire+0x8>)
 800300a:	f000 b90e 	b.w	800322a <__retarget_lock_acquire_recursive>
 800300e:	bf00      	nop
 8003010:	20000261 	.word	0x20000261

08003014 <__sfp_lock_release>:
 8003014:	4801      	ldr	r0, [pc, #4]	@ (800301c <__sfp_lock_release+0x8>)
 8003016:	f000 b909 	b.w	800322c <__retarget_lock_release_recursive>
 800301a:	bf00      	nop
 800301c:	20000261 	.word	0x20000261

08003020 <__sinit>:
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
 8003024:	f7ff fff0 	bl	8003008 <__sfp_lock_acquire>
 8003028:	6a23      	ldr	r3, [r4, #32]
 800302a:	b11b      	cbz	r3, 8003034 <__sinit+0x14>
 800302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003030:	f7ff bff0 	b.w	8003014 <__sfp_lock_release>
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__sinit+0x28>)
 8003036:	6223      	str	r3, [r4, #32]
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <__sinit+0x2c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f5      	bne.n	800302c <__sinit+0xc>
 8003040:	f7ff ffc4 	bl	8002fcc <global_stdio_init.part.0>
 8003044:	e7f2      	b.n	800302c <__sinit+0xc>
 8003046:	bf00      	nop
 8003048:	08002f8d 	.word	0x08002f8d
 800304c:	20000258 	.word	0x20000258

08003050 <_fwalk_sglue>:
 8003050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003054:	4607      	mov	r7, r0
 8003056:	4688      	mov	r8, r1
 8003058:	4614      	mov	r4, r2
 800305a:	2600      	movs	r6, #0
 800305c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003060:	f1b9 0901 	subs.w	r9, r9, #1
 8003064:	d505      	bpl.n	8003072 <_fwalk_sglue+0x22>
 8003066:	6824      	ldr	r4, [r4, #0]
 8003068:	2c00      	cmp	r4, #0
 800306a:	d1f7      	bne.n	800305c <_fwalk_sglue+0xc>
 800306c:	4630      	mov	r0, r6
 800306e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003072:	89ab      	ldrh	r3, [r5, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d907      	bls.n	8003088 <_fwalk_sglue+0x38>
 8003078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800307c:	3301      	adds	r3, #1
 800307e:	d003      	beq.n	8003088 <_fwalk_sglue+0x38>
 8003080:	4629      	mov	r1, r5
 8003082:	4638      	mov	r0, r7
 8003084:	47c0      	blx	r8
 8003086:	4306      	orrs	r6, r0
 8003088:	3568      	adds	r5, #104	@ 0x68
 800308a:	e7e9      	b.n	8003060 <_fwalk_sglue+0x10>

0800308c <iprintf>:
 800308c:	b40f      	push	{r0, r1, r2, r3}
 800308e:	b507      	push	{r0, r1, r2, lr}
 8003090:	4906      	ldr	r1, [pc, #24]	@ (80030ac <iprintf+0x20>)
 8003092:	ab04      	add	r3, sp, #16
 8003094:	6808      	ldr	r0, [r1, #0]
 8003096:	f853 2b04 	ldr.w	r2, [r3], #4
 800309a:	6881      	ldr	r1, [r0, #8]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	f000 f9e9 	bl	8003474 <_vfiprintf_r>
 80030a2:	b003      	add	sp, #12
 80030a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a8:	b004      	add	sp, #16
 80030aa:	4770      	bx	lr
 80030ac:	20000018 	.word	0x20000018

080030b0 <__sread>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	460c      	mov	r4, r1
 80030b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b8:	f000 f868 	bl	800318c <_read_r>
 80030bc:	2800      	cmp	r0, #0
 80030be:	bfab      	itete	ge
 80030c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030c2:	89a3      	ldrhlt	r3, [r4, #12]
 80030c4:	181b      	addge	r3, r3, r0
 80030c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030ca:	bfac      	ite	ge
 80030cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030ce:	81a3      	strhlt	r3, [r4, #12]
 80030d0:	bd10      	pop	{r4, pc}

080030d2 <__swrite>:
 80030d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030d6:	461f      	mov	r7, r3
 80030d8:	898b      	ldrh	r3, [r1, #12]
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	4605      	mov	r5, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	4616      	mov	r6, r2
 80030e2:	d505      	bpl.n	80030f0 <__swrite+0x1e>
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	2302      	movs	r3, #2
 80030ea:	2200      	movs	r2, #0
 80030ec:	f000 f83c 	bl	8003168 <_lseek_r>
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030fa:	81a3      	strh	r3, [r4, #12]
 80030fc:	4632      	mov	r2, r6
 80030fe:	463b      	mov	r3, r7
 8003100:	4628      	mov	r0, r5
 8003102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003106:	f000 b853 	b.w	80031b0 <_write_r>

0800310a <__sseek>:
 800310a:	b510      	push	{r4, lr}
 800310c:	460c      	mov	r4, r1
 800310e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003112:	f000 f829 	bl	8003168 <_lseek_r>
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	bf15      	itete	ne
 800311c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800311e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003126:	81a3      	strheq	r3, [r4, #12]
 8003128:	bf18      	it	ne
 800312a:	81a3      	strhne	r3, [r4, #12]
 800312c:	bd10      	pop	{r4, pc}

0800312e <__sclose>:
 800312e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003132:	f000 b809 	b.w	8003148 <_close_r>

08003136 <memset>:
 8003136:	4402      	add	r2, r0
 8003138:	4603      	mov	r3, r0
 800313a:	4293      	cmp	r3, r2
 800313c:	d100      	bne.n	8003140 <memset+0xa>
 800313e:	4770      	bx	lr
 8003140:	f803 1b01 	strb.w	r1, [r3], #1
 8003144:	e7f9      	b.n	800313a <memset+0x4>
	...

08003148 <_close_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4d06      	ldr	r5, [pc, #24]	@ (8003164 <_close_r+0x1c>)
 800314c:	2300      	movs	r3, #0
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	f7fd fcef 	bl	8000b36 <_close>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <_close_r+0x1a>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	b103      	cbz	r3, 8003162 <_close_r+0x1a>
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	2000025c 	.word	0x2000025c

08003168 <_lseek_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4d07      	ldr	r5, [pc, #28]	@ (8003188 <_lseek_r+0x20>)
 800316c:	4604      	mov	r4, r0
 800316e:	4608      	mov	r0, r1
 8003170:	4611      	mov	r1, r2
 8003172:	2200      	movs	r2, #0
 8003174:	602a      	str	r2, [r5, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	f7fd fd04 	bl	8000b84 <_lseek>
 800317c:	1c43      	adds	r3, r0, #1
 800317e:	d102      	bne.n	8003186 <_lseek_r+0x1e>
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	b103      	cbz	r3, 8003186 <_lseek_r+0x1e>
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	bd38      	pop	{r3, r4, r5, pc}
 8003188:	2000025c 	.word	0x2000025c

0800318c <_read_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4d07      	ldr	r5, [pc, #28]	@ (80031ac <_read_r+0x20>)
 8003190:	4604      	mov	r4, r0
 8003192:	4608      	mov	r0, r1
 8003194:	4611      	mov	r1, r2
 8003196:	2200      	movs	r2, #0
 8003198:	602a      	str	r2, [r5, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	f7fd fcae 	bl	8000afc <_read>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d102      	bne.n	80031aa <_read_r+0x1e>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	b103      	cbz	r3, 80031aa <_read_r+0x1e>
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	2000025c 	.word	0x2000025c

080031b0 <_write_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4d07      	ldr	r5, [pc, #28]	@ (80031d0 <_write_r+0x20>)
 80031b4:	4604      	mov	r4, r0
 80031b6:	4608      	mov	r0, r1
 80031b8:	4611      	mov	r1, r2
 80031ba:	2200      	movs	r2, #0
 80031bc:	602a      	str	r2, [r5, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	f7fd fa0c 	bl	80005dc <_write>
 80031c4:	1c43      	adds	r3, r0, #1
 80031c6:	d102      	bne.n	80031ce <_write_r+0x1e>
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	b103      	cbz	r3, 80031ce <_write_r+0x1e>
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
 80031d0:	2000025c 	.word	0x2000025c

080031d4 <__errno>:
 80031d4:	4b01      	ldr	r3, [pc, #4]	@ (80031dc <__errno+0x8>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000018 	.word	0x20000018

080031e0 <__libc_init_array>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003218 <__libc_init_array+0x38>)
 80031e4:	4c0d      	ldr	r4, [pc, #52]	@ (800321c <__libc_init_array+0x3c>)
 80031e6:	1b64      	subs	r4, r4, r5
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	2600      	movs	r6, #0
 80031ec:	42a6      	cmp	r6, r4
 80031ee:	d109      	bne.n	8003204 <__libc_init_array+0x24>
 80031f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003220 <__libc_init_array+0x40>)
 80031f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003224 <__libc_init_array+0x44>)
 80031f4:	f000 fdb6 	bl	8003d64 <_init>
 80031f8:	1b64      	subs	r4, r4, r5
 80031fa:	10a4      	asrs	r4, r4, #2
 80031fc:	2600      	movs	r6, #0
 80031fe:	42a6      	cmp	r6, r4
 8003200:	d105      	bne.n	800320e <__libc_init_array+0x2e>
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	f855 3b04 	ldr.w	r3, [r5], #4
 8003208:	4798      	blx	r3
 800320a:	3601      	adds	r6, #1
 800320c:	e7ee      	b.n	80031ec <__libc_init_array+0xc>
 800320e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003212:	4798      	blx	r3
 8003214:	3601      	adds	r6, #1
 8003216:	e7f2      	b.n	80031fe <__libc_init_array+0x1e>
 8003218:	08003de8 	.word	0x08003de8
 800321c:	08003de8 	.word	0x08003de8
 8003220:	08003de8 	.word	0x08003de8
 8003224:	08003dec 	.word	0x08003dec

08003228 <__retarget_lock_init_recursive>:
 8003228:	4770      	bx	lr

0800322a <__retarget_lock_acquire_recursive>:
 800322a:	4770      	bx	lr

0800322c <__retarget_lock_release_recursive>:
 800322c:	4770      	bx	lr
	...

08003230 <_free_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	4605      	mov	r5, r0
 8003234:	2900      	cmp	r1, #0
 8003236:	d041      	beq.n	80032bc <_free_r+0x8c>
 8003238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800323c:	1f0c      	subs	r4, r1, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	bfb8      	it	lt
 8003242:	18e4      	addlt	r4, r4, r3
 8003244:	f000 f8e0 	bl	8003408 <__malloc_lock>
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <_free_r+0x90>)
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	b933      	cbnz	r3, 800325c <_free_r+0x2c>
 800324e:	6063      	str	r3, [r4, #4]
 8003250:	6014      	str	r4, [r2, #0]
 8003252:	4628      	mov	r0, r5
 8003254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003258:	f000 b8dc 	b.w	8003414 <__malloc_unlock>
 800325c:	42a3      	cmp	r3, r4
 800325e:	d908      	bls.n	8003272 <_free_r+0x42>
 8003260:	6820      	ldr	r0, [r4, #0]
 8003262:	1821      	adds	r1, r4, r0
 8003264:	428b      	cmp	r3, r1
 8003266:	bf01      	itttt	eq
 8003268:	6819      	ldreq	r1, [r3, #0]
 800326a:	685b      	ldreq	r3, [r3, #4]
 800326c:	1809      	addeq	r1, r1, r0
 800326e:	6021      	streq	r1, [r4, #0]
 8003270:	e7ed      	b.n	800324e <_free_r+0x1e>
 8003272:	461a      	mov	r2, r3
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	b10b      	cbz	r3, 800327c <_free_r+0x4c>
 8003278:	42a3      	cmp	r3, r4
 800327a:	d9fa      	bls.n	8003272 <_free_r+0x42>
 800327c:	6811      	ldr	r1, [r2, #0]
 800327e:	1850      	adds	r0, r2, r1
 8003280:	42a0      	cmp	r0, r4
 8003282:	d10b      	bne.n	800329c <_free_r+0x6c>
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	4401      	add	r1, r0
 8003288:	1850      	adds	r0, r2, r1
 800328a:	4283      	cmp	r3, r0
 800328c:	6011      	str	r1, [r2, #0]
 800328e:	d1e0      	bne.n	8003252 <_free_r+0x22>
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	6053      	str	r3, [r2, #4]
 8003296:	4408      	add	r0, r1
 8003298:	6010      	str	r0, [r2, #0]
 800329a:	e7da      	b.n	8003252 <_free_r+0x22>
 800329c:	d902      	bls.n	80032a4 <_free_r+0x74>
 800329e:	230c      	movs	r3, #12
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	e7d6      	b.n	8003252 <_free_r+0x22>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	1821      	adds	r1, r4, r0
 80032a8:	428b      	cmp	r3, r1
 80032aa:	bf04      	itt	eq
 80032ac:	6819      	ldreq	r1, [r3, #0]
 80032ae:	685b      	ldreq	r3, [r3, #4]
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	bf04      	itt	eq
 80032b4:	1809      	addeq	r1, r1, r0
 80032b6:	6021      	streq	r1, [r4, #0]
 80032b8:	6054      	str	r4, [r2, #4]
 80032ba:	e7ca      	b.n	8003252 <_free_r+0x22>
 80032bc:	bd38      	pop	{r3, r4, r5, pc}
 80032be:	bf00      	nop
 80032c0:	20000268 	.word	0x20000268

080032c4 <sbrk_aligned>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003304 <sbrk_aligned+0x40>)
 80032c8:	460c      	mov	r4, r1
 80032ca:	6831      	ldr	r1, [r6, #0]
 80032cc:	4605      	mov	r5, r0
 80032ce:	b911      	cbnz	r1, 80032d6 <sbrk_aligned+0x12>
 80032d0:	f000 fcb4 	bl	8003c3c <_sbrk_r>
 80032d4:	6030      	str	r0, [r6, #0]
 80032d6:	4621      	mov	r1, r4
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 fcaf 	bl	8003c3c <_sbrk_r>
 80032de:	1c43      	adds	r3, r0, #1
 80032e0:	d103      	bne.n	80032ea <sbrk_aligned+0x26>
 80032e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80032e6:	4620      	mov	r0, r4
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	1cc4      	adds	r4, r0, #3
 80032ec:	f024 0403 	bic.w	r4, r4, #3
 80032f0:	42a0      	cmp	r0, r4
 80032f2:	d0f8      	beq.n	80032e6 <sbrk_aligned+0x22>
 80032f4:	1a21      	subs	r1, r4, r0
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 fca0 	bl	8003c3c <_sbrk_r>
 80032fc:	3001      	adds	r0, #1
 80032fe:	d1f2      	bne.n	80032e6 <sbrk_aligned+0x22>
 8003300:	e7ef      	b.n	80032e2 <sbrk_aligned+0x1e>
 8003302:	bf00      	nop
 8003304:	20000264 	.word	0x20000264

08003308 <_malloc_r>:
 8003308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800330c:	1ccd      	adds	r5, r1, #3
 800330e:	f025 0503 	bic.w	r5, r5, #3
 8003312:	3508      	adds	r5, #8
 8003314:	2d0c      	cmp	r5, #12
 8003316:	bf38      	it	cc
 8003318:	250c      	movcc	r5, #12
 800331a:	2d00      	cmp	r5, #0
 800331c:	4606      	mov	r6, r0
 800331e:	db01      	blt.n	8003324 <_malloc_r+0x1c>
 8003320:	42a9      	cmp	r1, r5
 8003322:	d904      	bls.n	800332e <_malloc_r+0x26>
 8003324:	230c      	movs	r3, #12
 8003326:	6033      	str	r3, [r6, #0]
 8003328:	2000      	movs	r0, #0
 800332a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800332e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003404 <_malloc_r+0xfc>
 8003332:	f000 f869 	bl	8003408 <__malloc_lock>
 8003336:	f8d8 3000 	ldr.w	r3, [r8]
 800333a:	461c      	mov	r4, r3
 800333c:	bb44      	cbnz	r4, 8003390 <_malloc_r+0x88>
 800333e:	4629      	mov	r1, r5
 8003340:	4630      	mov	r0, r6
 8003342:	f7ff ffbf 	bl	80032c4 <sbrk_aligned>
 8003346:	1c43      	adds	r3, r0, #1
 8003348:	4604      	mov	r4, r0
 800334a:	d158      	bne.n	80033fe <_malloc_r+0xf6>
 800334c:	f8d8 4000 	ldr.w	r4, [r8]
 8003350:	4627      	mov	r7, r4
 8003352:	2f00      	cmp	r7, #0
 8003354:	d143      	bne.n	80033de <_malloc_r+0xd6>
 8003356:	2c00      	cmp	r4, #0
 8003358:	d04b      	beq.n	80033f2 <_malloc_r+0xea>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	4639      	mov	r1, r7
 800335e:	4630      	mov	r0, r6
 8003360:	eb04 0903 	add.w	r9, r4, r3
 8003364:	f000 fc6a 	bl	8003c3c <_sbrk_r>
 8003368:	4581      	cmp	r9, r0
 800336a:	d142      	bne.n	80033f2 <_malloc_r+0xea>
 800336c:	6821      	ldr	r1, [r4, #0]
 800336e:	1a6d      	subs	r5, r5, r1
 8003370:	4629      	mov	r1, r5
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff ffa6 	bl	80032c4 <sbrk_aligned>
 8003378:	3001      	adds	r0, #1
 800337a:	d03a      	beq.n	80033f2 <_malloc_r+0xea>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	442b      	add	r3, r5
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	f8d8 3000 	ldr.w	r3, [r8]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	bb62      	cbnz	r2, 80033e4 <_malloc_r+0xdc>
 800338a:	f8c8 7000 	str.w	r7, [r8]
 800338e:	e00f      	b.n	80033b0 <_malloc_r+0xa8>
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	1b52      	subs	r2, r2, r5
 8003394:	d420      	bmi.n	80033d8 <_malloc_r+0xd0>
 8003396:	2a0b      	cmp	r2, #11
 8003398:	d917      	bls.n	80033ca <_malloc_r+0xc2>
 800339a:	1961      	adds	r1, r4, r5
 800339c:	42a3      	cmp	r3, r4
 800339e:	6025      	str	r5, [r4, #0]
 80033a0:	bf18      	it	ne
 80033a2:	6059      	strne	r1, [r3, #4]
 80033a4:	6863      	ldr	r3, [r4, #4]
 80033a6:	bf08      	it	eq
 80033a8:	f8c8 1000 	streq.w	r1, [r8]
 80033ac:	5162      	str	r2, [r4, r5]
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 f82f 	bl	8003414 <__malloc_unlock>
 80033b6:	f104 000b 	add.w	r0, r4, #11
 80033ba:	1d23      	adds	r3, r4, #4
 80033bc:	f020 0007 	bic.w	r0, r0, #7
 80033c0:	1ac2      	subs	r2, r0, r3
 80033c2:	bf1c      	itt	ne
 80033c4:	1a1b      	subne	r3, r3, r0
 80033c6:	50a3      	strne	r3, [r4, r2]
 80033c8:	e7af      	b.n	800332a <_malloc_r+0x22>
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	42a3      	cmp	r3, r4
 80033ce:	bf0c      	ite	eq
 80033d0:	f8c8 2000 	streq.w	r2, [r8]
 80033d4:	605a      	strne	r2, [r3, #4]
 80033d6:	e7eb      	b.n	80033b0 <_malloc_r+0xa8>
 80033d8:	4623      	mov	r3, r4
 80033da:	6864      	ldr	r4, [r4, #4]
 80033dc:	e7ae      	b.n	800333c <_malloc_r+0x34>
 80033de:	463c      	mov	r4, r7
 80033e0:	687f      	ldr	r7, [r7, #4]
 80033e2:	e7b6      	b.n	8003352 <_malloc_r+0x4a>
 80033e4:	461a      	mov	r2, r3
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d1fb      	bne.n	80033e4 <_malloc_r+0xdc>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6053      	str	r3, [r2, #4]
 80033f0:	e7de      	b.n	80033b0 <_malloc_r+0xa8>
 80033f2:	230c      	movs	r3, #12
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	4630      	mov	r0, r6
 80033f8:	f000 f80c 	bl	8003414 <__malloc_unlock>
 80033fc:	e794      	b.n	8003328 <_malloc_r+0x20>
 80033fe:	6005      	str	r5, [r0, #0]
 8003400:	e7d6      	b.n	80033b0 <_malloc_r+0xa8>
 8003402:	bf00      	nop
 8003404:	20000268 	.word	0x20000268

08003408 <__malloc_lock>:
 8003408:	4801      	ldr	r0, [pc, #4]	@ (8003410 <__malloc_lock+0x8>)
 800340a:	f7ff bf0e 	b.w	800322a <__retarget_lock_acquire_recursive>
 800340e:	bf00      	nop
 8003410:	20000260 	.word	0x20000260

08003414 <__malloc_unlock>:
 8003414:	4801      	ldr	r0, [pc, #4]	@ (800341c <__malloc_unlock+0x8>)
 8003416:	f7ff bf09 	b.w	800322c <__retarget_lock_release_recursive>
 800341a:	bf00      	nop
 800341c:	20000260 	.word	0x20000260

08003420 <__sfputc_r>:
 8003420:	6893      	ldr	r3, [r2, #8]
 8003422:	3b01      	subs	r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	b410      	push	{r4}
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	da08      	bge.n	800343e <__sfputc_r+0x1e>
 800342c:	6994      	ldr	r4, [r2, #24]
 800342e:	42a3      	cmp	r3, r4
 8003430:	db01      	blt.n	8003436 <__sfputc_r+0x16>
 8003432:	290a      	cmp	r1, #10
 8003434:	d103      	bne.n	800343e <__sfputc_r+0x1e>
 8003436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800343a:	f000 bb6b 	b.w	8003b14 <__swbuf_r>
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	1c58      	adds	r0, r3, #1
 8003442:	6010      	str	r0, [r2, #0]
 8003444:	7019      	strb	r1, [r3, #0]
 8003446:	4608      	mov	r0, r1
 8003448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800344c:	4770      	bx	lr

0800344e <__sfputs_r>:
 800344e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003450:	4606      	mov	r6, r0
 8003452:	460f      	mov	r7, r1
 8003454:	4614      	mov	r4, r2
 8003456:	18d5      	adds	r5, r2, r3
 8003458:	42ac      	cmp	r4, r5
 800345a:	d101      	bne.n	8003460 <__sfputs_r+0x12>
 800345c:	2000      	movs	r0, #0
 800345e:	e007      	b.n	8003470 <__sfputs_r+0x22>
 8003460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003464:	463a      	mov	r2, r7
 8003466:	4630      	mov	r0, r6
 8003468:	f7ff ffda 	bl	8003420 <__sfputc_r>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d1f3      	bne.n	8003458 <__sfputs_r+0xa>
 8003470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003474 <_vfiprintf_r>:
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	460d      	mov	r5, r1
 800347a:	b09d      	sub	sp, #116	@ 0x74
 800347c:	4614      	mov	r4, r2
 800347e:	4698      	mov	r8, r3
 8003480:	4606      	mov	r6, r0
 8003482:	b118      	cbz	r0, 800348c <_vfiprintf_r+0x18>
 8003484:	6a03      	ldr	r3, [r0, #32]
 8003486:	b90b      	cbnz	r3, 800348c <_vfiprintf_r+0x18>
 8003488:	f7ff fdca 	bl	8003020 <__sinit>
 800348c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800348e:	07d9      	lsls	r1, r3, #31
 8003490:	d405      	bmi.n	800349e <_vfiprintf_r+0x2a>
 8003492:	89ab      	ldrh	r3, [r5, #12]
 8003494:	059a      	lsls	r2, r3, #22
 8003496:	d402      	bmi.n	800349e <_vfiprintf_r+0x2a>
 8003498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800349a:	f7ff fec6 	bl	800322a <__retarget_lock_acquire_recursive>
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	d501      	bpl.n	80034a8 <_vfiprintf_r+0x34>
 80034a4:	692b      	ldr	r3, [r5, #16]
 80034a6:	b99b      	cbnz	r3, 80034d0 <_vfiprintf_r+0x5c>
 80034a8:	4629      	mov	r1, r5
 80034aa:	4630      	mov	r0, r6
 80034ac:	f000 fb70 	bl	8003b90 <__swsetup_r>
 80034b0:	b170      	cbz	r0, 80034d0 <_vfiprintf_r+0x5c>
 80034b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034b4:	07dc      	lsls	r4, r3, #31
 80034b6:	d504      	bpl.n	80034c2 <_vfiprintf_r+0x4e>
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034bc:	b01d      	add	sp, #116	@ 0x74
 80034be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c2:	89ab      	ldrh	r3, [r5, #12]
 80034c4:	0598      	lsls	r0, r3, #22
 80034c6:	d4f7      	bmi.n	80034b8 <_vfiprintf_r+0x44>
 80034c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ca:	f7ff feaf 	bl	800322c <__retarget_lock_release_recursive>
 80034ce:	e7f3      	b.n	80034b8 <_vfiprintf_r+0x44>
 80034d0:	2300      	movs	r3, #0
 80034d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034d4:	2320      	movs	r3, #32
 80034d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034da:	f8cd 800c 	str.w	r8, [sp, #12]
 80034de:	2330      	movs	r3, #48	@ 0x30
 80034e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003690 <_vfiprintf_r+0x21c>
 80034e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034e8:	f04f 0901 	mov.w	r9, #1
 80034ec:	4623      	mov	r3, r4
 80034ee:	469a      	mov	sl, r3
 80034f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034f4:	b10a      	cbz	r2, 80034fa <_vfiprintf_r+0x86>
 80034f6:	2a25      	cmp	r2, #37	@ 0x25
 80034f8:	d1f9      	bne.n	80034ee <_vfiprintf_r+0x7a>
 80034fa:	ebba 0b04 	subs.w	fp, sl, r4
 80034fe:	d00b      	beq.n	8003518 <_vfiprintf_r+0xa4>
 8003500:	465b      	mov	r3, fp
 8003502:	4622      	mov	r2, r4
 8003504:	4629      	mov	r1, r5
 8003506:	4630      	mov	r0, r6
 8003508:	f7ff ffa1 	bl	800344e <__sfputs_r>
 800350c:	3001      	adds	r0, #1
 800350e:	f000 80a7 	beq.w	8003660 <_vfiprintf_r+0x1ec>
 8003512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003514:	445a      	add	r2, fp
 8003516:	9209      	str	r2, [sp, #36]	@ 0x24
 8003518:	f89a 3000 	ldrb.w	r3, [sl]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 809f 	beq.w	8003660 <_vfiprintf_r+0x1ec>
 8003522:	2300      	movs	r3, #0
 8003524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800352c:	f10a 0a01 	add.w	sl, sl, #1
 8003530:	9304      	str	r3, [sp, #16]
 8003532:	9307      	str	r3, [sp, #28]
 8003534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003538:	931a      	str	r3, [sp, #104]	@ 0x68
 800353a:	4654      	mov	r4, sl
 800353c:	2205      	movs	r2, #5
 800353e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003542:	4853      	ldr	r0, [pc, #332]	@ (8003690 <_vfiprintf_r+0x21c>)
 8003544:	f7fc fe64 	bl	8000210 <memchr>
 8003548:	9a04      	ldr	r2, [sp, #16]
 800354a:	b9d8      	cbnz	r0, 8003584 <_vfiprintf_r+0x110>
 800354c:	06d1      	lsls	r1, r2, #27
 800354e:	bf44      	itt	mi
 8003550:	2320      	movmi	r3, #32
 8003552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003556:	0713      	lsls	r3, r2, #28
 8003558:	bf44      	itt	mi
 800355a:	232b      	movmi	r3, #43	@ 0x2b
 800355c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003560:	f89a 3000 	ldrb.w	r3, [sl]
 8003564:	2b2a      	cmp	r3, #42	@ 0x2a
 8003566:	d015      	beq.n	8003594 <_vfiprintf_r+0x120>
 8003568:	9a07      	ldr	r2, [sp, #28]
 800356a:	4654      	mov	r4, sl
 800356c:	2000      	movs	r0, #0
 800356e:	f04f 0c0a 	mov.w	ip, #10
 8003572:	4621      	mov	r1, r4
 8003574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003578:	3b30      	subs	r3, #48	@ 0x30
 800357a:	2b09      	cmp	r3, #9
 800357c:	d94b      	bls.n	8003616 <_vfiprintf_r+0x1a2>
 800357e:	b1b0      	cbz	r0, 80035ae <_vfiprintf_r+0x13a>
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	e014      	b.n	80035ae <_vfiprintf_r+0x13a>
 8003584:	eba0 0308 	sub.w	r3, r0, r8
 8003588:	fa09 f303 	lsl.w	r3, r9, r3
 800358c:	4313      	orrs	r3, r2
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	46a2      	mov	sl, r4
 8003592:	e7d2      	b.n	800353a <_vfiprintf_r+0xc6>
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	1d19      	adds	r1, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	9103      	str	r1, [sp, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfbb      	ittet	lt
 80035a0:	425b      	neglt	r3, r3
 80035a2:	f042 0202 	orrlt.w	r2, r2, #2
 80035a6:	9307      	strge	r3, [sp, #28]
 80035a8:	9307      	strlt	r3, [sp, #28]
 80035aa:	bfb8      	it	lt
 80035ac:	9204      	strlt	r2, [sp, #16]
 80035ae:	7823      	ldrb	r3, [r4, #0]
 80035b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80035b2:	d10a      	bne.n	80035ca <_vfiprintf_r+0x156>
 80035b4:	7863      	ldrb	r3, [r4, #1]
 80035b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035b8:	d132      	bne.n	8003620 <_vfiprintf_r+0x1ac>
 80035ba:	9b03      	ldr	r3, [sp, #12]
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	9203      	str	r2, [sp, #12]
 80035c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035c6:	3402      	adds	r4, #2
 80035c8:	9305      	str	r3, [sp, #20]
 80035ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036a0 <_vfiprintf_r+0x22c>
 80035ce:	7821      	ldrb	r1, [r4, #0]
 80035d0:	2203      	movs	r2, #3
 80035d2:	4650      	mov	r0, sl
 80035d4:	f7fc fe1c 	bl	8000210 <memchr>
 80035d8:	b138      	cbz	r0, 80035ea <_vfiprintf_r+0x176>
 80035da:	9b04      	ldr	r3, [sp, #16]
 80035dc:	eba0 000a 	sub.w	r0, r0, sl
 80035e0:	2240      	movs	r2, #64	@ 0x40
 80035e2:	4082      	lsls	r2, r0
 80035e4:	4313      	orrs	r3, r2
 80035e6:	3401      	adds	r4, #1
 80035e8:	9304      	str	r3, [sp, #16]
 80035ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ee:	4829      	ldr	r0, [pc, #164]	@ (8003694 <_vfiprintf_r+0x220>)
 80035f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80035f4:	2206      	movs	r2, #6
 80035f6:	f7fc fe0b 	bl	8000210 <memchr>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d03f      	beq.n	800367e <_vfiprintf_r+0x20a>
 80035fe:	4b26      	ldr	r3, [pc, #152]	@ (8003698 <_vfiprintf_r+0x224>)
 8003600:	bb1b      	cbnz	r3, 800364a <_vfiprintf_r+0x1d6>
 8003602:	9b03      	ldr	r3, [sp, #12]
 8003604:	3307      	adds	r3, #7
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	3308      	adds	r3, #8
 800360c:	9303      	str	r3, [sp, #12]
 800360e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003610:	443b      	add	r3, r7
 8003612:	9309      	str	r3, [sp, #36]	@ 0x24
 8003614:	e76a      	b.n	80034ec <_vfiprintf_r+0x78>
 8003616:	fb0c 3202 	mla	r2, ip, r2, r3
 800361a:	460c      	mov	r4, r1
 800361c:	2001      	movs	r0, #1
 800361e:	e7a8      	b.n	8003572 <_vfiprintf_r+0xfe>
 8003620:	2300      	movs	r3, #0
 8003622:	3401      	adds	r4, #1
 8003624:	9305      	str	r3, [sp, #20]
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0c0a 	mov.w	ip, #10
 800362c:	4620      	mov	r0, r4
 800362e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003632:	3a30      	subs	r2, #48	@ 0x30
 8003634:	2a09      	cmp	r2, #9
 8003636:	d903      	bls.n	8003640 <_vfiprintf_r+0x1cc>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0c6      	beq.n	80035ca <_vfiprintf_r+0x156>
 800363c:	9105      	str	r1, [sp, #20]
 800363e:	e7c4      	b.n	80035ca <_vfiprintf_r+0x156>
 8003640:	fb0c 2101 	mla	r1, ip, r1, r2
 8003644:	4604      	mov	r4, r0
 8003646:	2301      	movs	r3, #1
 8003648:	e7f0      	b.n	800362c <_vfiprintf_r+0x1b8>
 800364a:	ab03      	add	r3, sp, #12
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	462a      	mov	r2, r5
 8003650:	4b12      	ldr	r3, [pc, #72]	@ (800369c <_vfiprintf_r+0x228>)
 8003652:	a904      	add	r1, sp, #16
 8003654:	4630      	mov	r0, r6
 8003656:	f3af 8000 	nop.w
 800365a:	4607      	mov	r7, r0
 800365c:	1c78      	adds	r0, r7, #1
 800365e:	d1d6      	bne.n	800360e <_vfiprintf_r+0x19a>
 8003660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003662:	07d9      	lsls	r1, r3, #31
 8003664:	d405      	bmi.n	8003672 <_vfiprintf_r+0x1fe>
 8003666:	89ab      	ldrh	r3, [r5, #12]
 8003668:	059a      	lsls	r2, r3, #22
 800366a:	d402      	bmi.n	8003672 <_vfiprintf_r+0x1fe>
 800366c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800366e:	f7ff fddd 	bl	800322c <__retarget_lock_release_recursive>
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	065b      	lsls	r3, r3, #25
 8003676:	f53f af1f 	bmi.w	80034b8 <_vfiprintf_r+0x44>
 800367a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800367c:	e71e      	b.n	80034bc <_vfiprintf_r+0x48>
 800367e:	ab03      	add	r3, sp, #12
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	462a      	mov	r2, r5
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <_vfiprintf_r+0x228>)
 8003686:	a904      	add	r1, sp, #16
 8003688:	4630      	mov	r0, r6
 800368a:	f000 f879 	bl	8003780 <_printf_i>
 800368e:	e7e4      	b.n	800365a <_vfiprintf_r+0x1e6>
 8003690:	08003dac 	.word	0x08003dac
 8003694:	08003db6 	.word	0x08003db6
 8003698:	00000000 	.word	0x00000000
 800369c:	0800344f 	.word	0x0800344f
 80036a0:	08003db2 	.word	0x08003db2

080036a4 <_printf_common>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4616      	mov	r6, r2
 80036aa:	4698      	mov	r8, r3
 80036ac:	688a      	ldr	r2, [r1, #8]
 80036ae:	690b      	ldr	r3, [r1, #16]
 80036b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bfb8      	it	lt
 80036b8:	4613      	movlt	r3, r2
 80036ba:	6033      	str	r3, [r6, #0]
 80036bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036c0:	4607      	mov	r7, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	b10a      	cbz	r2, 80036ca <_printf_common+0x26>
 80036c6:	3301      	adds	r3, #1
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	0699      	lsls	r1, r3, #26
 80036ce:	bf42      	ittt	mi
 80036d0:	6833      	ldrmi	r3, [r6, #0]
 80036d2:	3302      	addmi	r3, #2
 80036d4:	6033      	strmi	r3, [r6, #0]
 80036d6:	6825      	ldr	r5, [r4, #0]
 80036d8:	f015 0506 	ands.w	r5, r5, #6
 80036dc:	d106      	bne.n	80036ec <_printf_common+0x48>
 80036de:	f104 0a19 	add.w	sl, r4, #25
 80036e2:	68e3      	ldr	r3, [r4, #12]
 80036e4:	6832      	ldr	r2, [r6, #0]
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	42ab      	cmp	r3, r5
 80036ea:	dc26      	bgt.n	800373a <_printf_common+0x96>
 80036ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	3b00      	subs	r3, #0
 80036f4:	bf18      	it	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	0692      	lsls	r2, r2, #26
 80036fa:	d42b      	bmi.n	8003754 <_printf_common+0xb0>
 80036fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003700:	4641      	mov	r1, r8
 8003702:	4638      	mov	r0, r7
 8003704:	47c8      	blx	r9
 8003706:	3001      	adds	r0, #1
 8003708:	d01e      	beq.n	8003748 <_printf_common+0xa4>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	6922      	ldr	r2, [r4, #16]
 800370e:	f003 0306 	and.w	r3, r3, #6
 8003712:	2b04      	cmp	r3, #4
 8003714:	bf02      	ittt	eq
 8003716:	68e5      	ldreq	r5, [r4, #12]
 8003718:	6833      	ldreq	r3, [r6, #0]
 800371a:	1aed      	subeq	r5, r5, r3
 800371c:	68a3      	ldr	r3, [r4, #8]
 800371e:	bf0c      	ite	eq
 8003720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003724:	2500      	movne	r5, #0
 8003726:	4293      	cmp	r3, r2
 8003728:	bfc4      	itt	gt
 800372a:	1a9b      	subgt	r3, r3, r2
 800372c:	18ed      	addgt	r5, r5, r3
 800372e:	2600      	movs	r6, #0
 8003730:	341a      	adds	r4, #26
 8003732:	42b5      	cmp	r5, r6
 8003734:	d11a      	bne.n	800376c <_printf_common+0xc8>
 8003736:	2000      	movs	r0, #0
 8003738:	e008      	b.n	800374c <_printf_common+0xa8>
 800373a:	2301      	movs	r3, #1
 800373c:	4652      	mov	r2, sl
 800373e:	4641      	mov	r1, r8
 8003740:	4638      	mov	r0, r7
 8003742:	47c8      	blx	r9
 8003744:	3001      	adds	r0, #1
 8003746:	d103      	bne.n	8003750 <_printf_common+0xac>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	3501      	adds	r5, #1
 8003752:	e7c6      	b.n	80036e2 <_printf_common+0x3e>
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	2030      	movs	r0, #48	@ 0x30
 800375a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800375e:	4422      	add	r2, r4
 8003760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003768:	3302      	adds	r3, #2
 800376a:	e7c7      	b.n	80036fc <_printf_common+0x58>
 800376c:	2301      	movs	r3, #1
 800376e:	4622      	mov	r2, r4
 8003770:	4641      	mov	r1, r8
 8003772:	4638      	mov	r0, r7
 8003774:	47c8      	blx	r9
 8003776:	3001      	adds	r0, #1
 8003778:	d0e6      	beq.n	8003748 <_printf_common+0xa4>
 800377a:	3601      	adds	r6, #1
 800377c:	e7d9      	b.n	8003732 <_printf_common+0x8e>
	...

08003780 <_printf_i>:
 8003780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	7e0f      	ldrb	r7, [r1, #24]
 8003786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003788:	2f78      	cmp	r7, #120	@ 0x78
 800378a:	4691      	mov	r9, r2
 800378c:	4680      	mov	r8, r0
 800378e:	460c      	mov	r4, r1
 8003790:	469a      	mov	sl, r3
 8003792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003796:	d807      	bhi.n	80037a8 <_printf_i+0x28>
 8003798:	2f62      	cmp	r7, #98	@ 0x62
 800379a:	d80a      	bhi.n	80037b2 <_printf_i+0x32>
 800379c:	2f00      	cmp	r7, #0
 800379e:	f000 80d1 	beq.w	8003944 <_printf_i+0x1c4>
 80037a2:	2f58      	cmp	r7, #88	@ 0x58
 80037a4:	f000 80b8 	beq.w	8003918 <_printf_i+0x198>
 80037a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037b0:	e03a      	b.n	8003828 <_printf_i+0xa8>
 80037b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037b6:	2b15      	cmp	r3, #21
 80037b8:	d8f6      	bhi.n	80037a8 <_printf_i+0x28>
 80037ba:	a101      	add	r1, pc, #4	@ (adr r1, 80037c0 <_printf_i+0x40>)
 80037bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c0:	08003819 	.word	0x08003819
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	080037a9 	.word	0x080037a9
 80037cc:	080037a9 	.word	0x080037a9
 80037d0:	080037a9 	.word	0x080037a9
 80037d4:	080037a9 	.word	0x080037a9
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	080037a9 	.word	0x080037a9
 80037e0:	080037a9 	.word	0x080037a9
 80037e4:	080037a9 	.word	0x080037a9
 80037e8:	080037a9 	.word	0x080037a9
 80037ec:	0800392b 	.word	0x0800392b
 80037f0:	08003857 	.word	0x08003857
 80037f4:	080038e5 	.word	0x080038e5
 80037f8:	080037a9 	.word	0x080037a9
 80037fc:	080037a9 	.word	0x080037a9
 8003800:	0800394d 	.word	0x0800394d
 8003804:	080037a9 	.word	0x080037a9
 8003808:	08003857 	.word	0x08003857
 800380c:	080037a9 	.word	0x080037a9
 8003810:	080037a9 	.word	0x080037a9
 8003814:	080038ed 	.word	0x080038ed
 8003818:	6833      	ldr	r3, [r6, #0]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6032      	str	r2, [r6, #0]
 8003820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003828:	2301      	movs	r3, #1
 800382a:	e09c      	b.n	8003966 <_printf_i+0x1e6>
 800382c:	6833      	ldr	r3, [r6, #0]
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	6031      	str	r1, [r6, #0]
 8003834:	0606      	lsls	r6, r0, #24
 8003836:	d501      	bpl.n	800383c <_printf_i+0xbc>
 8003838:	681d      	ldr	r5, [r3, #0]
 800383a:	e003      	b.n	8003844 <_printf_i+0xc4>
 800383c:	0645      	lsls	r5, r0, #25
 800383e:	d5fb      	bpl.n	8003838 <_printf_i+0xb8>
 8003840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003844:	2d00      	cmp	r5, #0
 8003846:	da03      	bge.n	8003850 <_printf_i+0xd0>
 8003848:	232d      	movs	r3, #45	@ 0x2d
 800384a:	426d      	negs	r5, r5
 800384c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003850:	4858      	ldr	r0, [pc, #352]	@ (80039b4 <_printf_i+0x234>)
 8003852:	230a      	movs	r3, #10
 8003854:	e011      	b.n	800387a <_printf_i+0xfa>
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	0608      	lsls	r0, r1, #24
 800385c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003860:	d402      	bmi.n	8003868 <_printf_i+0xe8>
 8003862:	0649      	lsls	r1, r1, #25
 8003864:	bf48      	it	mi
 8003866:	b2ad      	uxthmi	r5, r5
 8003868:	2f6f      	cmp	r7, #111	@ 0x6f
 800386a:	4852      	ldr	r0, [pc, #328]	@ (80039b4 <_printf_i+0x234>)
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	bf14      	ite	ne
 8003870:	230a      	movne	r3, #10
 8003872:	2308      	moveq	r3, #8
 8003874:	2100      	movs	r1, #0
 8003876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800387a:	6866      	ldr	r6, [r4, #4]
 800387c:	60a6      	str	r6, [r4, #8]
 800387e:	2e00      	cmp	r6, #0
 8003880:	db05      	blt.n	800388e <_printf_i+0x10e>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	432e      	orrs	r6, r5
 8003886:	f021 0104 	bic.w	r1, r1, #4
 800388a:	6021      	str	r1, [r4, #0]
 800388c:	d04b      	beq.n	8003926 <_printf_i+0x1a6>
 800388e:	4616      	mov	r6, r2
 8003890:	fbb5 f1f3 	udiv	r1, r5, r3
 8003894:	fb03 5711 	mls	r7, r3, r1, r5
 8003898:	5dc7      	ldrb	r7, [r0, r7]
 800389a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800389e:	462f      	mov	r7, r5
 80038a0:	42bb      	cmp	r3, r7
 80038a2:	460d      	mov	r5, r1
 80038a4:	d9f4      	bls.n	8003890 <_printf_i+0x110>
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d10b      	bne.n	80038c2 <_printf_i+0x142>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	07df      	lsls	r7, r3, #31
 80038ae:	d508      	bpl.n	80038c2 <_printf_i+0x142>
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	6861      	ldr	r1, [r4, #4]
 80038b4:	4299      	cmp	r1, r3
 80038b6:	bfde      	ittt	le
 80038b8:	2330      	movle	r3, #48	@ 0x30
 80038ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038c2:	1b92      	subs	r2, r2, r6
 80038c4:	6122      	str	r2, [r4, #16]
 80038c6:	f8cd a000 	str.w	sl, [sp]
 80038ca:	464b      	mov	r3, r9
 80038cc:	aa03      	add	r2, sp, #12
 80038ce:	4621      	mov	r1, r4
 80038d0:	4640      	mov	r0, r8
 80038d2:	f7ff fee7 	bl	80036a4 <_printf_common>
 80038d6:	3001      	adds	r0, #1
 80038d8:	d14a      	bne.n	8003970 <_printf_i+0x1f0>
 80038da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038de:	b004      	add	sp, #16
 80038e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	f043 0320 	orr.w	r3, r3, #32
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	4832      	ldr	r0, [pc, #200]	@ (80039b8 <_printf_i+0x238>)
 80038ee:	2778      	movs	r7, #120	@ 0x78
 80038f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	6831      	ldr	r1, [r6, #0]
 80038f8:	061f      	lsls	r7, r3, #24
 80038fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80038fe:	d402      	bmi.n	8003906 <_printf_i+0x186>
 8003900:	065f      	lsls	r7, r3, #25
 8003902:	bf48      	it	mi
 8003904:	b2ad      	uxthmi	r5, r5
 8003906:	6031      	str	r1, [r6, #0]
 8003908:	07d9      	lsls	r1, r3, #31
 800390a:	bf44      	itt	mi
 800390c:	f043 0320 	orrmi.w	r3, r3, #32
 8003910:	6023      	strmi	r3, [r4, #0]
 8003912:	b11d      	cbz	r5, 800391c <_printf_i+0x19c>
 8003914:	2310      	movs	r3, #16
 8003916:	e7ad      	b.n	8003874 <_printf_i+0xf4>
 8003918:	4826      	ldr	r0, [pc, #152]	@ (80039b4 <_printf_i+0x234>)
 800391a:	e7e9      	b.n	80038f0 <_printf_i+0x170>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	f023 0320 	bic.w	r3, r3, #32
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	e7f6      	b.n	8003914 <_printf_i+0x194>
 8003926:	4616      	mov	r6, r2
 8003928:	e7bd      	b.n	80038a6 <_printf_i+0x126>
 800392a:	6833      	ldr	r3, [r6, #0]
 800392c:	6825      	ldr	r5, [r4, #0]
 800392e:	6961      	ldr	r1, [r4, #20]
 8003930:	1d18      	adds	r0, r3, #4
 8003932:	6030      	str	r0, [r6, #0]
 8003934:	062e      	lsls	r6, r5, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	d501      	bpl.n	800393e <_printf_i+0x1be>
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	e002      	b.n	8003944 <_printf_i+0x1c4>
 800393e:	0668      	lsls	r0, r5, #25
 8003940:	d5fb      	bpl.n	800393a <_printf_i+0x1ba>
 8003942:	8019      	strh	r1, [r3, #0]
 8003944:	2300      	movs	r3, #0
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	4616      	mov	r6, r2
 800394a:	e7bc      	b.n	80038c6 <_printf_i+0x146>
 800394c:	6833      	ldr	r3, [r6, #0]
 800394e:	1d1a      	adds	r2, r3, #4
 8003950:	6032      	str	r2, [r6, #0]
 8003952:	681e      	ldr	r6, [r3, #0]
 8003954:	6862      	ldr	r2, [r4, #4]
 8003956:	2100      	movs	r1, #0
 8003958:	4630      	mov	r0, r6
 800395a:	f7fc fc59 	bl	8000210 <memchr>
 800395e:	b108      	cbz	r0, 8003964 <_printf_i+0x1e4>
 8003960:	1b80      	subs	r0, r0, r6
 8003962:	6060      	str	r0, [r4, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	6123      	str	r3, [r4, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800396e:	e7aa      	b.n	80038c6 <_printf_i+0x146>
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	4632      	mov	r2, r6
 8003974:	4649      	mov	r1, r9
 8003976:	4640      	mov	r0, r8
 8003978:	47d0      	blx	sl
 800397a:	3001      	adds	r0, #1
 800397c:	d0ad      	beq.n	80038da <_printf_i+0x15a>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	079b      	lsls	r3, r3, #30
 8003982:	d413      	bmi.n	80039ac <_printf_i+0x22c>
 8003984:	68e0      	ldr	r0, [r4, #12]
 8003986:	9b03      	ldr	r3, [sp, #12]
 8003988:	4298      	cmp	r0, r3
 800398a:	bfb8      	it	lt
 800398c:	4618      	movlt	r0, r3
 800398e:	e7a6      	b.n	80038de <_printf_i+0x15e>
 8003990:	2301      	movs	r3, #1
 8003992:	4632      	mov	r2, r6
 8003994:	4649      	mov	r1, r9
 8003996:	4640      	mov	r0, r8
 8003998:	47d0      	blx	sl
 800399a:	3001      	adds	r0, #1
 800399c:	d09d      	beq.n	80038da <_printf_i+0x15a>
 800399e:	3501      	adds	r5, #1
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	9903      	ldr	r1, [sp, #12]
 80039a4:	1a5b      	subs	r3, r3, r1
 80039a6:	42ab      	cmp	r3, r5
 80039a8:	dcf2      	bgt.n	8003990 <_printf_i+0x210>
 80039aa:	e7eb      	b.n	8003984 <_printf_i+0x204>
 80039ac:	2500      	movs	r5, #0
 80039ae:	f104 0619 	add.w	r6, r4, #25
 80039b2:	e7f5      	b.n	80039a0 <_printf_i+0x220>
 80039b4:	08003dbd 	.word	0x08003dbd
 80039b8:	08003dce 	.word	0x08003dce

080039bc <__sflush_r>:
 80039bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	0716      	lsls	r6, r2, #28
 80039c6:	4605      	mov	r5, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	d454      	bmi.n	8003a76 <__sflush_r+0xba>
 80039cc:	684b      	ldr	r3, [r1, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	dc02      	bgt.n	80039d8 <__sflush_r+0x1c>
 80039d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	dd48      	ble.n	8003a6a <__sflush_r+0xae>
 80039d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d045      	beq.n	8003a6a <__sflush_r+0xae>
 80039de:	2300      	movs	r3, #0
 80039e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039e4:	682f      	ldr	r7, [r5, #0]
 80039e6:	6a21      	ldr	r1, [r4, #32]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	d030      	beq.n	8003a4e <__sflush_r+0x92>
 80039ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	0759      	lsls	r1, r3, #29
 80039f2:	d505      	bpl.n	8003a00 <__sflush_r+0x44>
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039fa:	b10b      	cbz	r3, 8003a00 <__sflush_r+0x44>
 80039fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a04:	6a21      	ldr	r1, [r4, #32]
 8003a06:	4628      	mov	r0, r5
 8003a08:	47b0      	blx	r6
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	d106      	bne.n	8003a1e <__sflush_r+0x62>
 8003a10:	6829      	ldr	r1, [r5, #0]
 8003a12:	291d      	cmp	r1, #29
 8003a14:	d82b      	bhi.n	8003a6e <__sflush_r+0xb2>
 8003a16:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac0 <__sflush_r+0x104>)
 8003a18:	40ca      	lsrs	r2, r1
 8003a1a:	07d6      	lsls	r6, r2, #31
 8003a1c:	d527      	bpl.n	8003a6e <__sflush_r+0xb2>
 8003a1e:	2200      	movs	r2, #0
 8003a20:	6062      	str	r2, [r4, #4]
 8003a22:	04d9      	lsls	r1, r3, #19
 8003a24:	6922      	ldr	r2, [r4, #16]
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	d504      	bpl.n	8003a34 <__sflush_r+0x78>
 8003a2a:	1c42      	adds	r2, r0, #1
 8003a2c:	d101      	bne.n	8003a32 <__sflush_r+0x76>
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	b903      	cbnz	r3, 8003a34 <__sflush_r+0x78>
 8003a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	b1b9      	cbz	r1, 8003a6a <__sflush_r+0xae>
 8003a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	d002      	beq.n	8003a48 <__sflush_r+0x8c>
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7ff fbf4 	bl	8003230 <_free_r>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a4c:	e00d      	b.n	8003a6a <__sflush_r+0xae>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4628      	mov	r0, r5
 8003a52:	47b0      	blx	r6
 8003a54:	4602      	mov	r2, r0
 8003a56:	1c50      	adds	r0, r2, #1
 8003a58:	d1c9      	bne.n	80039ee <__sflush_r+0x32>
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0c6      	beq.n	80039ee <__sflush_r+0x32>
 8003a60:	2b1d      	cmp	r3, #29
 8003a62:	d001      	beq.n	8003a68 <__sflush_r+0xac>
 8003a64:	2b16      	cmp	r3, #22
 8003a66:	d11e      	bne.n	8003aa6 <__sflush_r+0xea>
 8003a68:	602f      	str	r7, [r5, #0]
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e022      	b.n	8003ab4 <__sflush_r+0xf8>
 8003a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	e01b      	b.n	8003aae <__sflush_r+0xf2>
 8003a76:	690f      	ldr	r7, [r1, #16]
 8003a78:	2f00      	cmp	r7, #0
 8003a7a:	d0f6      	beq.n	8003a6a <__sflush_r+0xae>
 8003a7c:	0793      	lsls	r3, r2, #30
 8003a7e:	680e      	ldr	r6, [r1, #0]
 8003a80:	bf08      	it	eq
 8003a82:	694b      	ldreq	r3, [r1, #20]
 8003a84:	600f      	str	r7, [r1, #0]
 8003a86:	bf18      	it	ne
 8003a88:	2300      	movne	r3, #0
 8003a8a:	eba6 0807 	sub.w	r8, r6, r7
 8003a8e:	608b      	str	r3, [r1, #8]
 8003a90:	f1b8 0f00 	cmp.w	r8, #0
 8003a94:	dde9      	ble.n	8003a6a <__sflush_r+0xae>
 8003a96:	6a21      	ldr	r1, [r4, #32]
 8003a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a9a:	4643      	mov	r3, r8
 8003a9c:	463a      	mov	r2, r7
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	47b0      	blx	r6
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	dc08      	bgt.n	8003ab8 <__sflush_r+0xfc>
 8003aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab8:	4407      	add	r7, r0
 8003aba:	eba8 0800 	sub.w	r8, r8, r0
 8003abe:	e7e7      	b.n	8003a90 <__sflush_r+0xd4>
 8003ac0:	20400001 	.word	0x20400001

08003ac4 <_fflush_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	690b      	ldr	r3, [r1, #16]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	460c      	mov	r4, r1
 8003acc:	b913      	cbnz	r3, 8003ad4 <_fflush_r+0x10>
 8003ace:	2500      	movs	r5, #0
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	b118      	cbz	r0, 8003ade <_fflush_r+0x1a>
 8003ad6:	6a03      	ldr	r3, [r0, #32]
 8003ad8:	b90b      	cbnz	r3, 8003ade <_fflush_r+0x1a>
 8003ada:	f7ff faa1 	bl	8003020 <__sinit>
 8003ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f3      	beq.n	8003ace <_fflush_r+0xa>
 8003ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ae8:	07d0      	lsls	r0, r2, #31
 8003aea:	d404      	bmi.n	8003af6 <_fflush_r+0x32>
 8003aec:	0599      	lsls	r1, r3, #22
 8003aee:	d402      	bmi.n	8003af6 <_fflush_r+0x32>
 8003af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003af2:	f7ff fb9a 	bl	800322a <__retarget_lock_acquire_recursive>
 8003af6:	4628      	mov	r0, r5
 8003af8:	4621      	mov	r1, r4
 8003afa:	f7ff ff5f 	bl	80039bc <__sflush_r>
 8003afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b00:	07da      	lsls	r2, r3, #31
 8003b02:	4605      	mov	r5, r0
 8003b04:	d4e4      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	059b      	lsls	r3, r3, #22
 8003b0a:	d4e1      	bmi.n	8003ad0 <_fflush_r+0xc>
 8003b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b0e:	f7ff fb8d 	bl	800322c <__retarget_lock_release_recursive>
 8003b12:	e7dd      	b.n	8003ad0 <_fflush_r+0xc>

08003b14 <__swbuf_r>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	460e      	mov	r6, r1
 8003b18:	4614      	mov	r4, r2
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	b118      	cbz	r0, 8003b26 <__swbuf_r+0x12>
 8003b1e:	6a03      	ldr	r3, [r0, #32]
 8003b20:	b90b      	cbnz	r3, 8003b26 <__swbuf_r+0x12>
 8003b22:	f7ff fa7d 	bl	8003020 <__sinit>
 8003b26:	69a3      	ldr	r3, [r4, #24]
 8003b28:	60a3      	str	r3, [r4, #8]
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	071a      	lsls	r2, r3, #28
 8003b2e:	d501      	bpl.n	8003b34 <__swbuf_r+0x20>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	b943      	cbnz	r3, 8003b46 <__swbuf_r+0x32>
 8003b34:	4621      	mov	r1, r4
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 f82a 	bl	8003b90 <__swsetup_r>
 8003b3c:	b118      	cbz	r0, 8003b46 <__swbuf_r+0x32>
 8003b3e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003b42:	4638      	mov	r0, r7
 8003b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	6922      	ldr	r2, [r4, #16]
 8003b4a:	1a98      	subs	r0, r3, r2
 8003b4c:	6963      	ldr	r3, [r4, #20]
 8003b4e:	b2f6      	uxtb	r6, r6
 8003b50:	4283      	cmp	r3, r0
 8003b52:	4637      	mov	r7, r6
 8003b54:	dc05      	bgt.n	8003b62 <__swbuf_r+0x4e>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7ff ffb3 	bl	8003ac4 <_fflush_r>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d1ed      	bne.n	8003b3e <__swbuf_r+0x2a>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	6022      	str	r2, [r4, #0]
 8003b6e:	701e      	strb	r6, [r3, #0]
 8003b70:	6962      	ldr	r2, [r4, #20]
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d004      	beq.n	8003b82 <__swbuf_r+0x6e>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	07db      	lsls	r3, r3, #31
 8003b7c:	d5e1      	bpl.n	8003b42 <__swbuf_r+0x2e>
 8003b7e:	2e0a      	cmp	r6, #10
 8003b80:	d1df      	bne.n	8003b42 <__swbuf_r+0x2e>
 8003b82:	4621      	mov	r1, r4
 8003b84:	4628      	mov	r0, r5
 8003b86:	f7ff ff9d 	bl	8003ac4 <_fflush_r>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d0d9      	beq.n	8003b42 <__swbuf_r+0x2e>
 8003b8e:	e7d6      	b.n	8003b3e <__swbuf_r+0x2a>

08003b90 <__swsetup_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4b29      	ldr	r3, [pc, #164]	@ (8003c38 <__swsetup_r+0xa8>)
 8003b94:	4605      	mov	r5, r0
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	460c      	mov	r4, r1
 8003b9a:	b118      	cbz	r0, 8003ba4 <__swsetup_r+0x14>
 8003b9c:	6a03      	ldr	r3, [r0, #32]
 8003b9e:	b90b      	cbnz	r3, 8003ba4 <__swsetup_r+0x14>
 8003ba0:	f7ff fa3e 	bl	8003020 <__sinit>
 8003ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba8:	0719      	lsls	r1, r3, #28
 8003baa:	d422      	bmi.n	8003bf2 <__swsetup_r+0x62>
 8003bac:	06da      	lsls	r2, r3, #27
 8003bae:	d407      	bmi.n	8003bc0 <__swsetup_r+0x30>
 8003bb0:	2209      	movs	r2, #9
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bbe:	e033      	b.n	8003c28 <__swsetup_r+0x98>
 8003bc0:	0758      	lsls	r0, r3, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x5a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x4a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x46>
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	f7ff fb2d 	bl	8003230 <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x7a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x7a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 f84f 	bl	8003ca8 <__smakebuf_r>
 8003c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0e:	f013 0201 	ands.w	r2, r3, #1
 8003c12:	d00a      	beq.n	8003c2a <__swsetup_r+0x9a>
 8003c14:	2200      	movs	r2, #0
 8003c16:	60a2      	str	r2, [r4, #8]
 8003c18:	6962      	ldr	r2, [r4, #20]
 8003c1a:	4252      	negs	r2, r2
 8003c1c:	61a2      	str	r2, [r4, #24]
 8003c1e:	6922      	ldr	r2, [r4, #16]
 8003c20:	b942      	cbnz	r2, 8003c34 <__swsetup_r+0xa4>
 8003c22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c26:	d1c5      	bne.n	8003bb4 <__swsetup_r+0x24>
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	0799      	lsls	r1, r3, #30
 8003c2c:	bf58      	it	pl
 8003c2e:	6962      	ldrpl	r2, [r4, #20]
 8003c30:	60a2      	str	r2, [r4, #8]
 8003c32:	e7f4      	b.n	8003c1e <__swsetup_r+0x8e>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7f7      	b.n	8003c28 <__swsetup_r+0x98>
 8003c38:	20000018 	.word	0x20000018

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d06      	ldr	r5, [pc, #24]	@ (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	f7fc ffaa 	bl	8000ba0 <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	2000025c 	.word	0x2000025c

08003c5c <__swhatbuf_r>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c64:	2900      	cmp	r1, #0
 8003c66:	b096      	sub	sp, #88	@ 0x58
 8003c68:	4615      	mov	r5, r2
 8003c6a:	461e      	mov	r6, r3
 8003c6c:	da0d      	bge.n	8003c8a <__swhatbuf_r+0x2e>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2340      	movne	r3, #64	@ 0x40
 8003c7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c80:	2000      	movs	r0, #0
 8003c82:	6031      	str	r1, [r6, #0]
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	b016      	add	sp, #88	@ 0x58
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
 8003c8a:	466a      	mov	r2, sp
 8003c8c:	f000 f848 	bl	8003d20 <_fstat_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	dbec      	blt.n	8003c6e <__swhatbuf_r+0x12>
 8003c94:	9901      	ldr	r1, [sp, #4]
 8003c96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c9e:	4259      	negs	r1, r3
 8003ca0:	4159      	adcs	r1, r3
 8003ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ca6:	e7eb      	b.n	8003c80 <__swhatbuf_r+0x24>

08003ca8 <__smakebuf_r>:
 8003ca8:	898b      	ldrh	r3, [r1, #12]
 8003caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cac:	079d      	lsls	r5, r3, #30
 8003cae:	4606      	mov	r6, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	d507      	bpl.n	8003cc4 <__smakebuf_r+0x1c>
 8003cb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	6123      	str	r3, [r4, #16]
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	6163      	str	r3, [r4, #20]
 8003cc0:	b003      	add	sp, #12
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc4:	ab01      	add	r3, sp, #4
 8003cc6:	466a      	mov	r2, sp
 8003cc8:	f7ff ffc8 	bl	8003c5c <__swhatbuf_r>
 8003ccc:	9f00      	ldr	r7, [sp, #0]
 8003cce:	4605      	mov	r5, r0
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f7ff fb18 	bl	8003308 <_malloc_r>
 8003cd8:	b948      	cbnz	r0, 8003cee <__smakebuf_r+0x46>
 8003cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cde:	059a      	lsls	r2, r3, #22
 8003ce0:	d4ee      	bmi.n	8003cc0 <__smakebuf_r+0x18>
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	e7e2      	b.n	8003cb4 <__smakebuf_r+0xc>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	6020      	str	r0, [r4, #0]
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	9b01      	ldr	r3, [sp, #4]
 8003cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003cfe:	b15b      	cbz	r3, 8003d18 <__smakebuf_r+0x70>
 8003d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f81d 	bl	8003d44 <_isatty_r>
 8003d0a:	b128      	cbz	r0, 8003d18 <__smakebuf_r+0x70>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	431d      	orrs	r5, r3
 8003d1c:	81a5      	strh	r5, [r4, #12]
 8003d1e:	e7cf      	b.n	8003cc0 <__smakebuf_r+0x18>

08003d20 <_fstat_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d07      	ldr	r5, [pc, #28]	@ (8003d40 <_fstat_r+0x20>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	f7fc ff0e 	bl	8000b4e <_fstat>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	d102      	bne.n	8003d3c <_fstat_r+0x1c>
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	b103      	cbz	r3, 8003d3c <_fstat_r+0x1c>
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	bd38      	pop	{r3, r4, r5, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000025c 	.word	0x2000025c

08003d44 <_isatty_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d06      	ldr	r5, [pc, #24]	@ (8003d60 <_isatty_r+0x1c>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fc ff0d 	bl	8000b6e <_isatty>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_isatty_r+0x1a>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_isatty_r+0x1a>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	2000025c 	.word	0x2000025c

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
