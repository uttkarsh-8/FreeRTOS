
LED-tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b00  08004b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b48  08004b48  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b4c  08004b4c  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004b50  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  20000060  08004bb0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  08004bb0  00006bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014845  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f37  00000000  00000000  0001a8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dea  00000000  00000000  0001ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f30  00000000  00000000  0001f80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013785  00000000  00000000  0002273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d88c2  00000000  00000000  00035ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  0010e7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ae8 	.word	0x08004ae8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004ae8 	.word	0x08004ae8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fa0f 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f829 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f887 	bl	800065c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 xTaskCreate(task1, "task1", 256, NULL, 2, &taskHandler2);
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <main+0x48>)
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2302      	movs	r3, #2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800055c:	490a      	ldr	r1, [pc, #40]	@ (8000588 <main+0x4c>)
 800055e:	480b      	ldr	r0, [pc, #44]	@ (800058c <main+0x50>)
 8000560:	f002 fb5a 	bl	8002c18 <xTaskCreate>
 xTaskCreate(task2, "task2", 256, NULL, 2, &taskHandler1);
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <main+0x54>)
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	2302      	movs	r3, #2
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000572:	4908      	ldr	r1, [pc, #32]	@ (8000594 <main+0x58>)
 8000574:	4808      	ldr	r0, [pc, #32]	@ (8000598 <main+0x5c>)
 8000576:	f002 fb4f 	bl	8002c18 <xTaskCreate>

 vTaskStartScheduler();
 800057a:	f002 fce1 	bl	8002f40 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	bf00      	nop
 8000580:	e7fd      	b.n	800057e <main+0x42>
 8000582:	bf00      	nop
 8000584:	20000080 	.word	0x20000080
 8000588:	08004b00 	.word	0x08004b00
 800058c:	080006e1 	.word	0x080006e1
 8000590:	2000007c 	.word	0x2000007c
 8000594:	08004b08 	.word	0x08004b08
 8000598:	08000701 	.word	0x08000701

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	@ 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 f9ac 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <SystemClock_Config+0xb8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <SystemClock_Config+0xb8>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <SystemClock_Config+0xb8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <SystemClock_Config+0xbc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <SystemClock_Config+0xbc>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <SystemClock_Config+0xbc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ff75 	bl	8001500 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800061c:	f000 f892 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fc7e 	bl	8000f3c <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000646:	f000 f87d 	bl	8000744 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a10      	ldr	r2, [pc, #64]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0x7c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2120      	movs	r1, #32
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_GPIO_Init+0x80>)
 80006b0:	f000 fc10 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b4:	2320      	movs	r3, #32
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0x80>)
 80006cc:	f000 fa6e 	bl	8000bac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <task1>:

/* USER CODE BEGIN 4 */

void task1(void *pvParameters){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006e8:	2120      	movs	r1, #32
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <task1+0x1c>)
 80006ec:	f000 fc0b 	bl	8000f06 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(2000));
 80006f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006f4:	f002 fbee 	bl	8002ed4 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006f8:	bf00      	nop
 80006fa:	e7f5      	b.n	80006e8 <task1+0x8>
 80006fc:	40020000 	.word	0x40020000

08000700 <task2>:
	}
	vTaskDelete(NULL);
}

void task2(void *pvParameters){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000708:	2120      	movs	r1, #32
 800070a:	4804      	ldr	r0, [pc, #16]	@ (800071c <task2+0x1c>)
 800070c:	f000 fbfb 	bl	8000f06 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1200));
 8000710:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000714:	f002 fbde 	bl	8002ed4 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000718:	bf00      	nop
 800071a:	e7f5      	b.n	8000708 <task2+0x8>
 800071c:	40020000 	.word	0x40020000

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000732:	f000 f939 	bl	80009a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40001000 	.word	0x40001000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_MspInit+0x54>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a11      	ldr	r2, [pc, #68]	@ (80007a4 <HAL_MspInit+0x54>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x54>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <HAL_MspInit+0x54>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_MspInit+0x54>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_MspInit+0x54>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210f      	movs	r1, #15
 8000792:	f06f 0001 	mvn.w	r0, #1
 8000796:	f000 f9df 	bl	8000b58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08e      	sub	sp, #56	@ 0x38
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <HAL_InitTick+0xe4>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a32      	ldr	r2, [pc, #200]	@ (800088c <HAL_InitTick+0xe4>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b30      	ldr	r3, [pc, #192]	@ (800088c <HAL_InitTick+0xe4>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 0310 	and.w	r3, r3, #16
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d4:	f107 0210 	add.w	r2, r7, #16
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fcb2 	bl	8001148 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ee:	f000 fc97 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80007f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80007f4:	e004      	b.n	8000800 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007f6:	f000 fc93 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 80007fa:	4603      	mov	r3, r0
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <HAL_InitTick+0xe8>)
 8000804:	fba2 2303 	umull	r2, r3, r2, r3
 8000808:	0c9b      	lsrs	r3, r3, #18
 800080a:	3b01      	subs	r3, #1
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <HAL_InitTick+0xec>)
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <HAL_InitTick+0xf0>)
 8000812:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <HAL_InitTick+0xec>)
 8000816:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800081a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <HAL_InitTick+0xec>)
 800081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000820:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_InitTick+0xec>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_InitTick+0xec>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_InitTick+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000834:	4817      	ldr	r0, [pc, #92]	@ (8000894 <HAL_InitTick+0xec>)
 8000836:	f001 f901 	bl	8001a3c <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11b      	bne.n	8000880 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <HAL_InitTick+0xec>)
 800084a:	f001 f951 	bl	8001af0 <HAL_TIM_Base_Start_IT>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000854:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000858:	2b00      	cmp	r3, #0
 800085a:	d111      	bne.n	8000880 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800085c:	2036      	movs	r0, #54	@ 0x36
 800085e:	f000 f997 	bl	8000b90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d808      	bhi.n	800087a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2036      	movs	r0, #54	@ 0x36
 800086e:	f000 f973 	bl	8000b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_InitTick+0xf4>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e002      	b.n	8000880 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000884:	4618      	mov	r0, r3
 8000886:	3738      	adds	r7, #56	@ 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	431bde83 	.word	0x431bde83
 8000894:	20000084 	.word	0x20000084
 8000898:	40001000 	.word	0x40001000
 800089c:	20000004 	.word	0x20000004

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <TIM6_DAC_IRQHandler+0x10>)
 80008de:	f001 f977 	bl	8001bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000084 	.word	0x20000084

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	@ (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000948 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000914:	f7ff ffea 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	@ (8000950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	@ (800095c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800093e:	f004 f849 	bl	80049d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdfb 	bl	800053c <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000954:	08004b50 	.word	0x08004b50
  ldr r2, =_sbss
 8000958:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800095c:	20004bf4 	.word	0x20004bf4

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <HAL_Init+0x40>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_Init+0x40>)
 800097a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800097e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	@ (80009a4 <HAL_Init+0x40>)
 8000986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f8d8 	bl	8000b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	200f      	movs	r0, #15
 8000994:	f7ff ff08 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff feda 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	200000cc 	.word	0x200000cc

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	200000cc 	.word	0x200000cc

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	@ (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	@ (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	@ 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	@ 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff4c 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6a:	f7ff ff61 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	6978      	ldr	r0, [r7, #20]
 8000b76:	f7ff ffb1 	bl	8000adc <NVIC_EncodePriority>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff80 	bl	8000a88 <__NVIC_SetPriority>
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff54 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e165      	b.n	8000e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 8154 	bne.w	8000e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d005      	beq.n	8000bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d017      	beq.n	8000c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80ae 	beq.w	8000e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5d      	ldr	r3, [pc, #372]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b5a      	ldr	r3, [pc, #360]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a58      	ldr	r2, [pc, #352]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d025      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01f      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4d      	ldr	r2, [pc, #308]	@ (8000ebc <HAL_GPIO_Init+0x310>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	@ (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x206>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <HAL_GPIO_Init+0x320>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x202>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e00c      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e00a      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e008      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000db6:	2304      	movs	r3, #4
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd8:	4935      	ldr	r1, [pc, #212]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e0a:	4a31      	ldr	r2, [pc, #196]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	f67f ae96 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40013c00 	.word	0x40013c00

08000ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee4:	787b      	ldrb	r3, [r7, #1]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef0:	e003      	b.n	8000efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	041a      	lsls	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	400b      	ands	r3, r1
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0cc      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f50:	4b68      	ldr	r3, [pc, #416]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 030f 	and.w	r3, r3, #15
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d90c      	bls.n	8000f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5e:	4b65      	ldr	r3, [pc, #404]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f66:	4b63      	ldr	r3, [pc, #396]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e0b8      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d020      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f90:	4b59      	ldr	r3, [pc, #356]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4a58      	ldr	r2, [pc, #352]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fa8:	4b53      	ldr	r3, [pc, #332]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	4a52      	ldr	r2, [pc, #328]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb4:	4b50      	ldr	r3, [pc, #320]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	494d      	ldr	r1, [pc, #308]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d044      	beq.n	800105c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d119      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e07f      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d003      	beq.n	8000ffa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d107      	bne.n	800100a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e06f      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e067      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f023 0203 	bic.w	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4934      	ldr	r1, [pc, #208]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800102c:	f7ff fcd0 	bl	80009d0 <HAL_GetTick>
 8001030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	e00a      	b.n	800104a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fccc 	bl	80009d0 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001042:	4293      	cmp	r3, r2
 8001044:	d901      	bls.n	800104a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e04f      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104a:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 020c 	and.w	r2, r3, #12
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	429a      	cmp	r2, r3
 800105a:	d1eb      	bne.n	8001034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800105c:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d20c      	bcs.n	8001084 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e032      	b.n	80010ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4916      	ldr	r1, [pc, #88]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d009      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	490e      	ldr	r1, [pc, #56]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010c2:	f000 f873 	bl	80011ac <HAL_RCC_GetSysClockFreq>
 80010c6:	4602      	mov	r2, r0
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	490a      	ldr	r1, [pc, #40]	@ (80010fc <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	5ccb      	ldrb	r3, [r1, r3]
 80010d6:	fa22 f303 	lsr.w	r3, r2, r3
 80010da:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_RCC_ClockConfig+0x1c8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fb60 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00
 80010f8:	40023800 	.word	0x40023800
 80010fc:	08004b28 	.word	0x08004b28
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_RCC_GetHCLKFreq+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000

08001120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001124:	f7ff fff0 	bl	8001108 <HAL_RCC_GetHCLKFreq>
 8001128:	4602      	mov	r2, r0
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0a9b      	lsrs	r3, r3, #10
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	4903      	ldr	r1, [pc, #12]	@ (8001144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001136:	5ccb      	ldrb	r3, [r1, r3]
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	08004b38 	.word	0x08004b38

08001148 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	220f      	movs	r2, #15
 8001156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_RCC_GetClockConfig+0x5c>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_RCC_GetClockConfig+0x5c>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_RCC_GetClockConfig+0x5c>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <HAL_RCC_GetClockConfig+0x60>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 020f 	and.w	r2, r3, #15
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40023c00 	.word	0x40023c00

080011ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b0:	b0a6      	sub	sp, #152	@ 0x98
 80011b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011d2:	4bc8      	ldr	r3, [pc, #800]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	f200 817e 	bhi.w	80014dc <HAL_RCC_GetSysClockFreq+0x330>
 80011e0:	a201      	add	r2, pc, #4	@ (adr r2, 80011e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	0800121d 	.word	0x0800121d
 80011ec:	080014dd 	.word	0x080014dd
 80011f0:	080014dd 	.word	0x080014dd
 80011f4:	080014dd 	.word	0x080014dd
 80011f8:	08001225 	.word	0x08001225
 80011fc:	080014dd 	.word	0x080014dd
 8001200:	080014dd 	.word	0x080014dd
 8001204:	080014dd 	.word	0x080014dd
 8001208:	0800122d 	.word	0x0800122d
 800120c:	080014dd 	.word	0x080014dd
 8001210:	080014dd 	.word	0x080014dd
 8001214:	080014dd 	.word	0x080014dd
 8001218:	08001397 	.word	0x08001397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800121c:	4bb6      	ldr	r3, [pc, #728]	@ (80014f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800121e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001222:	e15f      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001224:	4bb5      	ldr	r3, [pc, #724]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x350>)
 8001226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800122a:	e15b      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800122c:	4bb1      	ldr	r3, [pc, #708]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001238:	4bae      	ldr	r3, [pc, #696]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d031      	beq.n	80012a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001244:	4bab      	ldr	r3, [pc, #684]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	2200      	movs	r2, #0
 800124c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800124e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001256:	663b      	str	r3, [r7, #96]	@ 0x60
 8001258:	2300      	movs	r3, #0
 800125a:	667b      	str	r3, [r7, #100]	@ 0x64
 800125c:	4ba7      	ldr	r3, [pc, #668]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x350>)
 800125e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001262:	462a      	mov	r2, r5
 8001264:	fb03 f202 	mul.w	r2, r3, r2
 8001268:	2300      	movs	r3, #0
 800126a:	4621      	mov	r1, r4
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	4413      	add	r3, r2
 8001272:	4aa2      	ldr	r2, [pc, #648]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x350>)
 8001274:	4621      	mov	r1, r4
 8001276:	fba1 1202 	umull	r1, r2, r1, r2
 800127a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800127c:	460a      	mov	r2, r1
 800127e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001280:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001282:	4413      	add	r3, r2
 8001284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800128a:	2200      	movs	r2, #0
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800128e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001290:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001294:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001298:	f7fe ffba 	bl	8000210 <__aeabi_uldivmod>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4613      	mov	r3, r2
 80012a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012a6:	e064      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a8:	4b92      	ldr	r3, [pc, #584]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	2200      	movs	r2, #0
 80012b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80012b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80012b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80012c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80012c4:	4622      	mov	r2, r4
 80012c6:	462b      	mov	r3, r5
 80012c8:	f04f 0000 	mov.w	r0, #0
 80012cc:	f04f 0100 	mov.w	r1, #0
 80012d0:	0159      	lsls	r1, r3, #5
 80012d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012d6:	0150      	lsls	r0, r2, #5
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4621      	mov	r1, r4
 80012de:	1a51      	subs	r1, r2, r1
 80012e0:	6139      	str	r1, [r7, #16]
 80012e2:	4629      	mov	r1, r5
 80012e4:	eb63 0301 	sbc.w	r3, r3, r1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012f6:	4659      	mov	r1, fp
 80012f8:	018b      	lsls	r3, r1, #6
 80012fa:	4651      	mov	r1, sl
 80012fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001300:	4651      	mov	r1, sl
 8001302:	018a      	lsls	r2, r1, #6
 8001304:	4651      	mov	r1, sl
 8001306:	ebb2 0801 	subs.w	r8, r2, r1
 800130a:	4659      	mov	r1, fp
 800130c:	eb63 0901 	sbc.w	r9, r3, r1
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800131c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001320:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	4623      	mov	r3, r4
 800132a:	eb18 0303 	adds.w	r3, r8, r3
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	462b      	mov	r3, r5
 8001332:	eb49 0303 	adc.w	r3, r9, r3
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001344:	4629      	mov	r1, r5
 8001346:	028b      	lsls	r3, r1, #10
 8001348:	4621      	mov	r1, r4
 800134a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800134e:	4621      	mov	r1, r4
 8001350:	028a      	lsls	r2, r1, #10
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800135a:	2200      	movs	r2, #0
 800135c:	643b      	str	r3, [r7, #64]	@ 0x40
 800135e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001364:	f7fe ff54 	bl	8000210 <__aeabi_uldivmod>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4613      	mov	r3, r2
 800136e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001372:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	3301      	adds	r3, #1
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001384:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001388:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001394:	e0a6      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001396:	4b57      	ldr	r3, [pc, #348]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800139e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d02a      	beq.n	8001404 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4b51      	ldr	r3, [pc, #324]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	2200      	movs	r2, #0
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80013ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013c0:	2100      	movs	r1, #0
 80013c2:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x350>)
 80013c4:	fb03 f201 	mul.w	r2, r3, r1
 80013c8:	2300      	movs	r3, #0
 80013ca:	fb00 f303 	mul.w	r3, r0, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_RCC_GetSysClockFreq+0x350>)
 80013d2:	fba0 1202 	umull	r1, r2, r0, r2
 80013d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80013d8:	460a      	mov	r2, r1
 80013da:	673a      	str	r2, [r7, #112]	@ 0x70
 80013dc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80013de:	4413      	add	r3, r2
 80013e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80013e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013e6:	2200      	movs	r2, #0
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80013ea:	637a      	str	r2, [r7, #52]	@ 0x34
 80013ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80013f4:	f7fe ff0c 	bl	8000210 <__aeabi_uldivmod>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4613      	mov	r3, r2
 80013fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001402:	e05b      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001404:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	099b      	lsrs	r3, r3, #6
 800140a:	2200      	movs	r2, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800140e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
 800141c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001420:	4642      	mov	r2, r8
 8001422:	464b      	mov	r3, r9
 8001424:	f04f 0000 	mov.w	r0, #0
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	0159      	lsls	r1, r3, #5
 800142e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001432:	0150      	lsls	r0, r2, #5
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4641      	mov	r1, r8
 800143a:	ebb2 0a01 	subs.w	sl, r2, r1
 800143e:	4649      	mov	r1, r9
 8001440:	eb63 0b01 	sbc.w	fp, r3, r1
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001458:	ebb2 040a 	subs.w	r4, r2, sl
 800145c:	eb63 050b 	sbc.w	r5, r3, fp
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	00eb      	lsls	r3, r5, #3
 800146a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800146e:	00e2      	lsls	r2, r4, #3
 8001470:	4614      	mov	r4, r2
 8001472:	461d      	mov	r5, r3
 8001474:	4643      	mov	r3, r8
 8001476:	18e3      	adds	r3, r4, r3
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	464b      	mov	r3, r9
 800147c:	eb45 0303 	adc.w	r3, r5, r3
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800148e:	4629      	mov	r1, r5
 8001490:	028b      	lsls	r3, r1, #10
 8001492:	4621      	mov	r1, r4
 8001494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001498:	4621      	mov	r1, r4
 800149a:	028a      	lsls	r2, r1, #10
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014a4:	2200      	movs	r2, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	61fa      	str	r2, [r7, #28]
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	f7fe feaf 	bl	8000210 <__aeabi_uldivmod>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4613      	mov	r3, r2
 80014b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0f1b      	lsrs	r3, r3, #28
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80014ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80014ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014da:	e003      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80014de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3798      	adds	r7, #152	@ 0x98
 80014ec:	46bd      	mov	sp, r7
 80014ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	00f42400 	.word	0x00f42400
 80014fc:	017d7840 	.word	0x017d7840

08001500 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e28d      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8083 	beq.w	8001626 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001520:	4b94      	ldr	r3, [pc, #592]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d019      	beq.n	8001560 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800152c:	4b91      	ldr	r3, [pc, #580]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
        || \
 8001534:	2b08      	cmp	r3, #8
 8001536:	d106      	bne.n	8001546 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001538:	4b8e      	ldr	r3, [pc, #568]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b88      	ldr	r3, [pc, #544]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b84      	ldr	r3, [pc, #528]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x124>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e25a      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x90>
 8001582:	4b7c      	ldr	r3, [pc, #496]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7b      	ldr	r2, [pc, #492]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xcc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0xb4>
 800159a:	4b76      	ldr	r3, [pc, #472]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a75      	ldr	r2, [pc, #468]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b73      	ldr	r3, [pc, #460]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a72      	ldr	r2, [pc, #456]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xcc>
 80015b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff f9fc 	bl	80009d0 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff f9f8 	bl	80009d0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e21f      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b61      	ldr	r3, [pc, #388]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xdc>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff f9e8 	bl	80009d0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff f9e4 	bl	80009d0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	@ 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e20b      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x104>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06f      	beq.n	8001712 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001632:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d017      	beq.n	800166e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800163e:	4b4d      	ldr	r3, [pc, #308]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
        || \
 8001646:	2b08      	cmp	r3, #8
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800164a:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b47      	ldr	r3, [pc, #284]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d11c      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b44      	ldr	r3, [pc, #272]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d116      	bne.n	800169c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d005      	beq.n	8001686 <HAL_RCC_OscConfig+0x186>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d001      	beq.n	8001686 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e1d3      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4937      	ldr	r1, [pc, #220]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169a:	e03a      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <HAL_RCC_OscConfig+0x278>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7ff f991 	bl	80009d0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff f98d 	bl	80009d0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1b4      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4925      	ldr	r1, [pc, #148]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016e6:	4b24      	ldr	r3, [pc, #144]	@ (8001778 <HAL_RCC_OscConfig+0x278>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff f970 	bl	80009d0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7ff f96c 	bl	80009d0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e193      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d036      	beq.n	800178c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_RCC_OscConfig+0x27c>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f950 	bl	80009d0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff f94c 	bl	80009d0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e173      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_RCC_OscConfig+0x274>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x234>
 8001752:	e01b      	b.n	800178c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_OscConfig+0x27c>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff f939 	bl	80009d0 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff f935 	bl	80009d0 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d907      	bls.n	8001780 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e15c      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
 8001774:	40023800 	.word	0x40023800
 8001778:	42470000 	.word	0x42470000
 800177c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b8a      	ldr	r3, [pc, #552]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ea      	bne.n	8001762 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8097 	beq.w	80018c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b83      	ldr	r3, [pc, #524]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b7f      	ldr	r3, [pc, #508]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a7e      	ldr	r2, [pc, #504]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b7c      	ldr	r3, [pc, #496]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	4b79      	ldr	r3, [pc, #484]	@ (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d118      	bne.n	8001808 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d6:	4b76      	ldr	r3, [pc, #472]	@ (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a75      	ldr	r2, [pc, #468]	@ (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f8f5 	bl	80009d0 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f8f1 	bl	80009d0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e118      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b6c      	ldr	r3, [pc, #432]	@ (80019b0 <HAL_RCC_OscConfig+0x4b0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x31e>
 8001810:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001814:	4a65      	ldr	r2, [pc, #404]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	@ 0x70
 800181c:	e01c      	b.n	8001858 <HAL_RCC_OscConfig+0x358>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x340>
 8001826:	4b61      	ldr	r3, [pc, #388]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182a:	4a60      	ldr	r2, [pc, #384]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	@ 0x70
 8001832:	4b5e      	ldr	r3, [pc, #376]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001836:	4a5d      	ldr	r2, [pc, #372]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6713      	str	r3, [r2, #112]	@ 0x70
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0x358>
 8001840:	4b5a      	ldr	r3, [pc, #360]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a59      	ldr	r2, [pc, #356]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
 800184c:	4b57      	ldr	r3, [pc, #348]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001850:	4a56      	ldr	r2, [pc, #344]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d015      	beq.n	800188c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff f8b6 	bl	80009d0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff f8b2 	bl	80009d0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0d7      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0ee      	beq.n	8001868 <HAL_RCC_OscConfig+0x368>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff f8a0 	bl	80009d0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	e00a      	b.n	80018aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff f89c 	bl	80009d0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0c1      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	4b40      	ldr	r3, [pc, #256]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b3b      	ldr	r3, [pc, #236]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	4a3a      	ldr	r2, [pc, #232]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ad 	beq.w	8001a2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d2:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d060      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d145      	bne.n	8001972 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e6:	4b33      	ldr	r3, [pc, #204]	@ (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f870 	bl	80009d0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f86c 	bl	80009d0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e093      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	085b      	lsrs	r3, r3, #1
 800192a:	3b01      	subs	r3, #1
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	071b      	lsls	r3, r3, #28
 800193e:	491b      	ldr	r1, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f841 	bl	80009d0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff f83d 	bl	80009d0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e064      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x452>
 8001970:	e05c      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_RCC_OscConfig+0x4b4>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f82a 	bl	80009d0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f826 	bl	80009d0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04d      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_RCC_OscConfig+0x4ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x480>
 800199e:	e045      	b.n	8001a2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e040      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_RCC_OscConfig+0x538>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d030      	beq.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d129      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d122      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d119      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e041      	b.n	8001ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f839 	bl	8001ada <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f000 f9c0 	bl	8001e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d001      	beq.n	8001b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e04e      	b.n	8001ba6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d022      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b32:	d01d      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d018      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00e      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d009      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d004      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x80>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d111      	bne.n	8001b94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d010      	beq.n	8001ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b92:	e007      	b.n	8001ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40000800 	.word	0x40000800
 8001bc0:	40000c00 	.word	0x40000c00
 8001bc4:	40010400 	.word	0x40010400
 8001bc8:	40014000 	.word	0x40014000
 8001bcc:	40001800 	.word	0x40001800

08001bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d020      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f06f 0202 	mvn.w	r2, #2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8d2 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e005      	b.n	8001c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8c4 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8d5 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01b      	beq.n	8001c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0204 	mvn.w	r2, #4
 8001c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8ac 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f89e 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8af 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d020      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01b      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0208 	mvn.w	r2, #8
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f886 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f878 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f889 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f860 	bl	8001dc4 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f852 	bl	8001db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f863 	bl	8001dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00c      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0201 	mvn.w	r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fcf2 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00c      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f900 	bl	8001f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f834 	bl	8001dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8d2 	bl	8001f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a43      	ldr	r2, [pc, #268]	@ (8001f20 <TIM_Base_SetConfig+0x120>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e1e:	d00f      	beq.n	8001e40 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a40      	ldr	r2, [pc, #256]	@ (8001f24 <TIM_Base_SetConfig+0x124>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00b      	beq.n	8001e40 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f28 <TIM_Base_SetConfig+0x128>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d007      	beq.n	8001e40 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3e      	ldr	r2, [pc, #248]	@ (8001f2c <TIM_Base_SetConfig+0x12c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d003      	beq.n	8001e40 <TIM_Base_SetConfig+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f30 <TIM_Base_SetConfig+0x130>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d108      	bne.n	8001e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a32      	ldr	r2, [pc, #200]	@ (8001f20 <TIM_Base_SetConfig+0x120>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02b      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e60:	d027      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2f      	ldr	r2, [pc, #188]	@ (8001f24 <TIM_Base_SetConfig+0x124>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d023      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f28 <TIM_Base_SetConfig+0x128>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01f      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <TIM_Base_SetConfig+0x12c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01b      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f30 <TIM_Base_SetConfig+0x130>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d017      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <TIM_Base_SetConfig+0x134>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <TIM_Base_SetConfig+0x138>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00f      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a29      	ldr	r2, [pc, #164]	@ (8001f3c <TIM_Base_SetConfig+0x13c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00b      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a28      	ldr	r2, [pc, #160]	@ (8001f40 <TIM_Base_SetConfig+0x140>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <TIM_Base_SetConfig+0x144>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <TIM_Base_SetConfig+0xb2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a26      	ldr	r2, [pc, #152]	@ (8001f48 <TIM_Base_SetConfig+0x148>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f20 <TIM_Base_SetConfig+0x120>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d003      	beq.n	8001ef2 <TIM_Base_SetConfig+0xf2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <TIM_Base_SetConfig+0x130>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d103      	bne.n	8001efa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f043 0204 	orr.w	r2, r3, #4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000

08001f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <SysTick_Handler+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f7c:	f001 fc44 	bl	8003808 <xTaskGetSchedulerState>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f86:	f002 fa3f 	bl	8004408 <xPortSysTickHandler>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8001faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	601a      	str	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200000d0 	.word	0x200000d0
 8001fc4:	20000178 	.word	0x20000178

08001fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a07      	ldr	r2, [pc, #28]	@ (8001ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4a06      	ldr	r2, [pc, #24]	@ (8001ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8001fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	20000378 	.word	0x20000378
 8001ff8:	20000420 	.word	0x20000420

08001ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 0208 	add.w	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f103 0208 	add.w	r2, r3, #8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f103 0208 	add.w	r2, r3, #8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800209e:	b480      	push	{r7}
 80020a0:	b085      	sub	sp, #20
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020b4:	d103      	bne.n	80020be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e00c      	b.n	80020d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3308      	adds	r3, #8
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e002      	b.n	80020cc <vListInsert+0x2e>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d2f6      	bcs.n	80020c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6852      	ldr	r2, [r2, #4]
 8002130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d103      	bne.n	8002144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1e5a      	subs	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002190:	f002 f8aa 	bl	80042e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	441a      	add	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	3b01      	subs	r3, #1
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	441a      	add	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	22ff      	movs	r2, #255	@ 0xff
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	22ff      	movs	r2, #255	@ 0xff
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d114      	bne.n	8002210 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01a      	beq.n	8002224 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3310      	adds	r3, #16
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 f942 	bl	800347c <xTaskRemoveFromEventList>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <xQueueGenericReset+0xd0>)
 8002200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	e009      	b.n	8002224 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3310      	adds	r3, #16
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fef1 	bl	8001ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3324      	adds	r3, #36	@ 0x24
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff feec 	bl	8001ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002224:	f002 f892 	bl	800434c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	@ 0x38
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10b      	bne.n	8002264 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	e7fd      	b.n	800227e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <xQueueGenericCreateStatic+0x56>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <xQueueGenericCreateStatic+0x5a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <xQueueGenericCreateStatic+0x5c>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	623b      	str	r3, [r7, #32]
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <xQueueGenericCreateStatic+0x84>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <xQueueGenericCreateStatic+0x88>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <xQueueGenericCreateStatic+0x8a>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	61fb      	str	r3, [r7, #28]
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	e7fd      	b.n	80022da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022de:	2350      	movs	r3, #80	@ 0x50
 80022e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b50      	cmp	r3, #80	@ 0x50
 80022e6:	d00b      	beq.n	8002300 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61bb      	str	r3, [r7, #24]
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002300:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800230c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002314:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f805 	bl	8002332 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800232a:	4618      	mov	r0, r3
 800232c:	3730      	adds	r7, #48	@ 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e002      	b.n	8002354 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002360:	2101      	movs	r1, #1
 8002362:	69b8      	ldr	r0, [r7, #24]
 8002364:	f7ff fefe 	bl	8002164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	@ 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002386:	2300      	movs	r3, #0
 8002388:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800238e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <xQueueGenericSend+0x34>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <xQueueGenericSend+0x42>
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <xQueueGenericSend+0x46>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <xQueueGenericSend+0x48>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <xQueueGenericSend+0x64>
	__asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSend+0x72>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <xQueueGenericSend+0x76>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericSend+0x78>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <xQueueGenericSend+0x94>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240c:	f001 f9fc 	bl	8003808 <xTaskGetSchedulerState>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <xQueueGenericSend+0xa4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <xQueueGenericSend+0xa8>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <xQueueGenericSend+0xaa>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <xQueueGenericSend+0xc6>
	__asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	61fb      	str	r3, [r7, #28]
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	e7fd      	b.n	800243a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800243e:	f001 ff53 	bl	80042e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <xQueueGenericSend+0xdc>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d129      	bne.n	80024a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800245a:	f000 fa0f 	bl	800287c <prvCopyDataToQueue>
 800245e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	3324      	adds	r3, #36	@ 0x24
 800246c:	4618      	mov	r0, r3
 800246e:	f001 f805 	bl	800347c <xTaskRemoveFromEventList>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002478:	4b3f      	ldr	r3, [pc, #252]	@ (8002578 <xQueueGenericSend+0x200>)
 800247a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	e00a      	b.n	80024a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800248a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002490:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <xQueueGenericSend+0x200>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024a0:	f001 ff54 	bl	800434c <vPortExitCritical>
				return pdPASS;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e063      	b.n	8002570 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024ae:	f001 ff4d 	bl	800434c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e05c      	b.n	8002570 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 f83f 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ca:	f001 ff3f 	bl	800434c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024ce:	f000 fda7 	bl	8003020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024d2:	f001 ff09 	bl	80042e8 <vPortEnterCritical>
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024e2:	d103      	bne.n	80024ec <xQueueGenericSend+0x174>
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f8:	d103      	bne.n	8002502 <xQueueGenericSend+0x18a>
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002502:	f001 ff23 	bl	800434c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002506:	1d3a      	adds	r2, r7, #4
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f82e 	bl	8003570 <xTaskCheckForTimeOut>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d124      	bne.n	8002564 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800251a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800251c:	f000 faa6 	bl	8002a6c <prvIsQueueFull>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	3310      	adds	r3, #16
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f000 ff52 	bl	80033d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002536:	f000 fa31 	bl	800299c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800253a:	f000 fd7f 	bl	800303c <xTaskResumeAll>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f af7c 	bne.w	800243e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002546:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <xQueueGenericSend+0x200>)
 8002548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	e772      	b.n	800243e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800255a:	f000 fa1f 	bl	800299c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800255e:	f000 fd6d 	bl	800303c <xTaskResumeAll>
 8002562:	e76c      	b.n	800243e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002566:	f000 fa19 	bl	800299c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800256a:	f000 fd67 	bl	800303c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800256e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002570:	4618      	mov	r0, r3
 8002572:	3738      	adds	r7, #56	@ 0x38
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b090      	sub	sp, #64	@ 0x40
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800258e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <xQueueGenericSendFromISR+0x3e>
 80025b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <xQueueGenericSendFromISR+0x42>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueGenericSendFromISR+0x44>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d103      	bne.n	80025ea <xQueueGenericSendFromISR+0x6e>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <xQueueGenericSendFromISR+0x72>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <xQueueGenericSendFromISR+0x74>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	623b      	str	r3, [r7, #32]
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800260c:	f001 ff4c 	bl	80044a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002610:	f3ef 8211 	mrs	r2, BASEPRI
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	61fa      	str	r2, [r7, #28]
 8002626:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002628:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800262c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	429a      	cmp	r2, r3
 8002636:	d302      	bcc.n	800263e <xQueueGenericSendFromISR+0xc2>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d12f      	bne.n	800269e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002654:	f000 f912 	bl	800287c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002658:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002660:	d112      	bne.n	8002688 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	3324      	adds	r3, #36	@ 0x24
 800266e:	4618      	mov	r0, r3
 8002670:	f000 ff04 	bl	800347c <xTaskRemoveFromEventList>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00e      	beq.n	8002698 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800268c:	3301      	adds	r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	b25a      	sxtb	r2, r3
 8002692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002698:	2301      	movs	r3, #1
 800269a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800269c:	e001      	b.n	80026a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3740      	adds	r7, #64	@ 0x40
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	@ 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <xQueueReceive+0x32>
	__asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	623b      	str	r3, [r7, #32]
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	e7fd      	b.n	80026e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <xQueueReceive+0x40>
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <xQueueReceive+0x44>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <xQueueReceive+0x46>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <xQueueReceive+0x62>
	__asm volatile
 8002702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	61fb      	str	r3, [r7, #28]
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	e7fd      	b.n	8002716 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800271a:	f001 f875 	bl	8003808 <xTaskGetSchedulerState>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <xQueueReceive+0x72>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <xQueueReceive+0x76>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <xQueueReceive+0x78>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <xQueueReceive+0x94>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	61bb      	str	r3, [r7, #24]
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800274c:	f001 fdcc 	bl	80042e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01f      	beq.n	800279c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002760:	f000 f8f6 	bl	8002950 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	1e5a      	subs	r2, r3, #1
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00f      	beq.n	8002794 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	3310      	adds	r3, #16
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fe7f 	bl	800347c <xTaskRemoveFromEventList>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002784:	4b3c      	ldr	r3, [pc, #240]	@ (8002878 <xQueueReceive+0x1c0>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002794:	f001 fdda 	bl	800434c <vPortExitCritical>
				return pdPASS;
 8002798:	2301      	movs	r3, #1
 800279a:	e069      	b.n	8002870 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027a2:	f001 fdd3 	bl	800434c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e062      	b.n	8002870 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fec5 	bl	8003544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027be:	f001 fdc5 	bl	800434c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027c2:	f000 fc2d 	bl	8003020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027c6:	f001 fd8f 	bl	80042e8 <vPortEnterCritical>
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d6:	d103      	bne.n	80027e0 <xQueueReceive+0x128>
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027ec:	d103      	bne.n	80027f6 <xQueueReceive+0x13e>
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027f6:	f001 fda9 	bl	800434c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027fa:	1d3a      	adds	r2, r7, #4
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f000 feb4 	bl	8003570 <xTaskCheckForTimeOut>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d123      	bne.n	8002856 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800280e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002810:	f000 f916 	bl	8002a40 <prvIsQueueEmpty>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d017      	beq.n	800284a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	3324      	adds	r3, #36	@ 0x24
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fdd8 	bl	80033d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800282a:	f000 f8b7 	bl	800299c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800282e:	f000 fc05 	bl	800303c <xTaskResumeAll>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d189      	bne.n	800274c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <xQueueReceive+0x1c0>)
 800283a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	e780      	b.n	800274c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800284a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800284c:	f000 f8a6 	bl	800299c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002850:	f000 fbf4 	bl	800303c <xTaskResumeAll>
 8002854:	e77a      	b.n	800274c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002858:	f000 f8a0 	bl	800299c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800285c:	f000 fbee 	bl	800303c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002862:	f000 f8ed 	bl	8002a40 <prvIsQueueEmpty>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	f43f af6f 	beq.w	800274c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800286e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002870:	4618      	mov	r0, r3
 8002872:	3730      	adds	r7, #48	@ 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10d      	bne.n	80028b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d14d      	bne.n	800293e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ffcc 	bl	8003844 <xTaskPriorityDisinherit>
 80028ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e043      	b.n	800293e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d119      	bne.n	80028f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6858      	ldr	r0, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	461a      	mov	r2, r3
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	f002 f8aa 	bl	8004a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	441a      	add	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d32b      	bcc.n	800293e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e026      	b.n	800293e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68d8      	ldr	r0, [r3, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	461a      	mov	r2, r3
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	f002 f890 	bl	8004a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	425b      	negs	r3, r3
 800290a:	441a      	add	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	425b      	negs	r3, r3
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d105      	bne.n	800293e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3b01      	subs	r3, #1
 800293c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002946:	697b      	ldr	r3, [r7, #20]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d018      	beq.n	8002994 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	441a      	add	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d303      	bcc.n	8002984 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68d9      	ldr	r1, [r3, #12]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	461a      	mov	r2, r3
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f002 f846 	bl	8004a20 <memcpy>
	}
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029a4:	f001 fca0 	bl	80042e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b0:	e011      	b.n	80029d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3324      	adds	r3, #36	@ 0x24
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fd5c 	bl	800347c <xTaskRemoveFromEventList>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029ca:	f000 fe35 	bl	8003638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	dce9      	bgt.n	80029b2 <prvUnlockQueue+0x16>
 80029de:	e000      	b.n	80029e2 <prvUnlockQueue+0x46>
					break;
 80029e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	22ff      	movs	r2, #255	@ 0xff
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80029ea:	f001 fcaf 	bl	800434c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029ee:	f001 fc7b 	bl	80042e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029fa:	e011      	b.n	8002a20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3310      	adds	r3, #16
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fd37 	bl	800347c <xTaskRemoveFromEventList>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a14:	f000 fe10 	bl	8003638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a18:	7bbb      	ldrb	r3, [r7, #14]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	dce9      	bgt.n	80029fc <prvUnlockQueue+0x60>
 8002a28:	e000      	b.n	8002a2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	22ff      	movs	r2, #255	@ 0xff
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002a34:	f001 fc8a 	bl	800434c <vPortExitCritical>
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a48:	f001 fc4e 	bl	80042e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e001      	b.n	8002a5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a5e:	f001 fc75 	bl	800434c <vPortExitCritical>

	return xReturn;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a74:	f001 fc38 	bl	80042e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d102      	bne.n	8002a8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e001      	b.n	8002a8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a8e:	f001 fc5d 	bl	800434c <vPortExitCritical>

	return xReturn;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e014      	b.n	8002ad6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002aac:	4a0f      	ldr	r2, [pc, #60]	@ (8002aec <vQueueAddToRegistry+0x50>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <vQueueAddToRegistry+0x50>)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <vQueueAddToRegistry+0x50>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ace:	e006      	b.n	8002ade <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	d9e7      	bls.n	8002aac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000820 	.word	0x20000820

08002af0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b00:	f001 fbf2 	bl	80042e8 <vPortEnterCritical>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b10:	d103      	bne.n	8002b1a <vQueueWaitForMessageRestricted+0x2a>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b26:	d103      	bne.n	8002b30 <vQueueWaitForMessageRestricted+0x40>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b30:	f001 fc0c 	bl	800434c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3324      	adds	r3, #36	@ 0x24
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fc6d 	bl	8003424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff26 	bl	800299c <prvUnlockQueue>
	}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	@ 0x38
 8002b5c:	af04      	add	r7, sp, #16
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	623b      	str	r3, [r7, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	61fb      	str	r3, [r7, #28]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ba2:	23a8      	movs	r3, #168	@ 0xa8
 8002ba4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2ba8      	cmp	r3, #168	@ 0xa8
 8002baa:	d00b      	beq.n	8002bc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61bb      	str	r3, [r7, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01e      	beq.n	8002c0a <xTaskCreateStatic+0xb2>
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01b      	beq.n	8002c0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002be4:	2300      	movs	r3, #0
 8002be6:	9303      	str	r3, [sp, #12]
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f851 	bl	8002ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c04:	f000 f8f6 	bl	8002df4 <prvAddNewTaskToReadyList>
 8002c08:	e001      	b.n	8002c0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c0e:	697b      	ldr	r3, [r7, #20]
	}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	@ 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	@ 0x30
 8002c1c:	af04      	add	r7, sp, #16
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fc7d 	bl	800452c <pvPortMalloc>
 8002c32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00e      	beq.n	8002c58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c3a:	20a8      	movs	r0, #168	@ 0xa8
 8002c3c:	f001 fc76 	bl	800452c <pvPortMalloc>
 8002c40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c4e:	e005      	b.n	8002c5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f001 fd39 	bl	80046c8 <vPortFree>
 8002c56:	e001      	b.n	8002c5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d017      	beq.n	8002c92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9303      	str	r3, [sp, #12]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f80f 	bl	8002ca4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c86:	69f8      	ldr	r0, [r7, #28]
 8002c88:	f000 f8b4 	bl	8002df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	e002      	b.n	8002c98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c98:	69bb      	ldr	r3, [r7, #24]
	}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	21a5      	movs	r1, #165	@ 0xa5
 8002cbe:	f001 fe23 	bl	8004908 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f023 0307 	bic.w	r3, r3, #7
 8002cda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	617b      	str	r3, [r7, #20]
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01f      	beq.n	8002d44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e012      	b.n	8002d30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	7819      	ldrb	r1, [r3, #0]
 8002d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	3334      	adds	r3, #52	@ 0x34
 8002d1a:	460a      	mov	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	d9e9      	bls.n	8002d0a <prvInitialiseNewTask+0x66>
 8002d36:	e000      	b.n	8002d3a <prvInitialiseNewTask+0x96>
			{
				break;
 8002d38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d42:	e003      	b.n	8002d4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	2b37      	cmp	r3, #55	@ 0x37
 8002d50:	d901      	bls.n	8002d56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d52:	2337      	movs	r3, #55	@ 0x37
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	2200      	movs	r2, #0
 8002d66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f965 	bl	800203c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	3318      	adds	r3, #24
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f960 	bl	800203c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	3354      	adds	r3, #84	@ 0x54
 8002da6:	224c      	movs	r2, #76	@ 0x4c
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fdac 	bl	8004908 <memset>
 8002db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db2:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <prvInitialiseNewTask+0x144>)
 8002db4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <prvInitialiseNewTask+0x148>)
 8002dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <prvInitialiseNewTask+0x14c>)
 8002dc0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	69b8      	ldr	r0, [r7, #24]
 8002dc8:	f001 f95a 	bl	8004080 <pxPortInitialiseStack>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dde:	bf00      	nop
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20004ab4 	.word	0x20004ab4
 8002dec:	20004b1c 	.word	0x20004b1c
 8002df0:	20004b84 	.word	0x20004b84

08002df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002dfc:	f001 fa74 	bl	80042e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e12:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <prvAddNewTaskToReadyList+0xc4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d110      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e20:	f000 fc2e 	bl	8003680 <prvInitialiseTaskLists>
 8002e24:	e00d      	b.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e26:	4b26      	ldr	r3, [pc, #152]	@ (8002ec0 <prvAddNewTaskToReadyList+0xcc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e2e:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d802      	bhi.n	8002e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <prvAddNewTaskToReadyList+0xd0>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <prvAddNewTaskToReadyList+0xd4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d903      	bls.n	8002e68 <prvAddNewTaskToReadyList+0x74>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	4a18      	ldr	r2, [pc, #96]	@ (8002ec8 <prvAddNewTaskToReadyList+0xd4>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a15      	ldr	r2, [pc, #84]	@ (8002ecc <prvAddNewTaskToReadyList+0xd8>)
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7ff f8e9 	bl	8002056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e84:	f001 fa62 	bl	800434c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <prvAddNewTaskToReadyList+0xcc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <prvAddNewTaskToReadyList+0xc8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d207      	bcs.n	8002eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <prvAddNewTaskToReadyList+0xdc>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000d34 	.word	0x20000d34
 8002ebc:	20000860 	.word	0x20000860
 8002ec0:	20000d40 	.word	0x20000d40
 8002ec4:	20000d50 	.word	0x20000d50
 8002ec8:	20000d3c 	.word	0x20000d3c
 8002ecc:	20000864 	.word	0x20000864
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ee6:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <vTaskDelay+0x64>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <vTaskDelay+0x32>
	__asm volatile
 8002eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60bb      	str	r3, [r7, #8]
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	e7fd      	b.n	8002f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f06:	f000 f88b 	bl	8003020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fd09 	bl	8003924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f12:	f000 f893 	bl	800303c <xTaskResumeAll>
 8002f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002f1e:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <vTaskDelay+0x68>)
 8002f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000d5c 	.word	0x20000d5c
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f4e:	463a      	mov	r2, r7
 8002f50:	1d39      	adds	r1, r7, #4
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f81c 	bl	8001f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	9202      	str	r2, [sp, #8]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	4924      	ldr	r1, [pc, #144]	@ (8003000 <vTaskStartScheduler+0xc0>)
 8002f70:	4824      	ldr	r0, [pc, #144]	@ (8003004 <vTaskStartScheduler+0xc4>)
 8002f72:	f7ff fdf1 	bl	8002b58 <xTaskCreateStatic>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a23      	ldr	r2, [pc, #140]	@ (8003008 <vTaskStartScheduler+0xc8>)
 8002f7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <vTaskStartScheduler+0xc8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f84:	2301      	movs	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e001      	b.n	8002f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f94:	f000 fd1a 	bl	80039cc <xTimerCreateTimerTask>
 8002f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11b      	bne.n	8002fd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	613b      	str	r3, [r7, #16]
}
 8002fb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fb4:	4b15      	ldr	r3, [pc, #84]	@ (800300c <vTaskStartScheduler+0xcc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3354      	adds	r3, #84	@ 0x54
 8002fba:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <vTaskStartScheduler+0xd0>)
 8002fbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <vTaskStartScheduler+0xd4>)
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <vTaskStartScheduler+0xd8>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	@ (800301c <vTaskStartScheduler+0xdc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fd2:	f001 f8e5 	bl	80041a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fd6:	e00f      	b.n	8002ff8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fde:	d10b      	bne.n	8002ff8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	60fb      	str	r3, [r7, #12]
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <vTaskStartScheduler+0xb4>
}
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	08004b10 	.word	0x08004b10
 8003004:	08003651 	.word	0x08003651
 8003008:	20000d58 	.word	0x20000d58
 800300c:	20000860 	.word	0x20000860
 8003010:	20000010 	.word	0x20000010
 8003014:	20000d54 	.word	0x20000d54
 8003018:	20000d40 	.word	0x20000d40
 800301c:	20000d38 	.word	0x20000d38

08003020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <vTaskSuspendAll+0x18>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	4a03      	ldr	r2, [pc, #12]	@ (8003038 <vTaskSuspendAll+0x18>)
 800302c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000d5c 	.word	0x20000d5c

0800303c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800304a:	4b42      	ldr	r3, [pc, #264]	@ (8003154 <xTaskResumeAll+0x118>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <xTaskResumeAll+0x2e>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	603b      	str	r3, [r7, #0]
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	e7fd      	b.n	8003066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800306a:	f001 f93d 	bl	80042e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800306e:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <xTaskResumeAll+0x118>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	4a37      	ldr	r2, [pc, #220]	@ (8003154 <xTaskResumeAll+0x118>)
 8003076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <xTaskResumeAll+0x118>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d162      	bne.n	8003146 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <xTaskResumeAll+0x11c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05e      	beq.n	8003146 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003088:	e02f      	b.n	80030ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b34      	ldr	r3, [pc, #208]	@ (800315c <xTaskResumeAll+0x120>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3318      	adds	r3, #24
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f83a 	bl	8002110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3304      	adds	r3, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f835 	bl	8002110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <xTaskResumeAll+0x124>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d903      	bls.n	80030ba <xTaskResumeAll+0x7e>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003160 <xTaskResumeAll+0x124>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4a27      	ldr	r2, [pc, #156]	@ (8003164 <xTaskResumeAll+0x128>)
 80030c8:	441a      	add	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4610      	mov	r0, r2
 80030d2:	f7fe ffc0 	bl	8002056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <xTaskResumeAll+0x12c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <xTaskResumeAll+0x130>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <xTaskResumeAll+0x120>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1cb      	bne.n	800308a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030f8:	f000 fb66 	bl	80037c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <xTaskResumeAll+0x134>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003108:	f000 f846 	bl	8003198 <xTaskIncrementTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <xTaskResumeAll+0x130>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f1      	bne.n	8003108 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003124:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <xTaskResumeAll+0x134>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <xTaskResumeAll+0x130>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003132:	2301      	movs	r3, #1
 8003134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003136:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <xTaskResumeAll+0x138>)
 8003138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f001 f901 	bl	800434c <vPortExitCritical>

	return xAlreadyYielded;
 800314a:	68bb      	ldr	r3, [r7, #8]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000d5c 	.word	0x20000d5c
 8003158:	20000d34 	.word	0x20000d34
 800315c:	20000cf4 	.word	0x20000cf4
 8003160:	20000d3c 	.word	0x20000d3c
 8003164:	20000864 	.word	0x20000864
 8003168:	20000860 	.word	0x20000860
 800316c:	20000d48 	.word	0x20000d48
 8003170:	20000d44 	.word	0x20000d44
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800317e:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <xTaskGetTickCount+0x1c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000d38 	.word	0x20000d38

08003198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a2:	4b4f      	ldr	r3, [pc, #316]	@ (80032e0 <xTaskIncrementTick+0x148>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 8090 	bne.w	80032cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031ac:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <xTaskIncrementTick+0x14c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031b4:	4a4b      	ldr	r2, [pc, #300]	@ (80032e4 <xTaskIncrementTick+0x14c>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d121      	bne.n	8003204 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80031c0:	4b49      	ldr	r3, [pc, #292]	@ (80032e8 <xTaskIncrementTick+0x150>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	603b      	str	r3, [r7, #0]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xTaskIncrementTick+0x46>
 80031e2:	4b41      	ldr	r3, [pc, #260]	@ (80032e8 <xTaskIncrementTick+0x150>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	4b40      	ldr	r3, [pc, #256]	@ (80032ec <xTaskIncrementTick+0x154>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3e      	ldr	r2, [pc, #248]	@ (80032e8 <xTaskIncrementTick+0x150>)
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4a3e      	ldr	r2, [pc, #248]	@ (80032ec <xTaskIncrementTick+0x154>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <xTaskIncrementTick+0x158>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	4a3c      	ldr	r2, [pc, #240]	@ (80032f0 <xTaskIncrementTick+0x158>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	f000 fae2 	bl	80037c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003204:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <xTaskIncrementTick+0x15c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	429a      	cmp	r2, r3
 800320c:	d349      	bcc.n	80032a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320e:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <xTaskIncrementTick+0x150>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003218:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <xTaskIncrementTick+0x15c>)
 800321a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800321e:	601a      	str	r2, [r3, #0]
					break;
 8003220:	e03f      	b.n	80032a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <xTaskIncrementTick+0x150>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d203      	bcs.n	8003242 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800323a:	4a2e      	ldr	r2, [pc, #184]	@ (80032f4 <xTaskIncrementTick+0x15c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003240:	e02f      	b.n	80032a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3304      	adds	r3, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ff62 	bl	8002110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3318      	adds	r3, #24
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe ff59 	bl	8002110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003262:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <xTaskIncrementTick+0x160>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d903      	bls.n	8003272 <xTaskIncrementTick+0xda>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <xTaskIncrementTick+0x160>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <xTaskIncrementTick+0x164>)
 8003280:	441a      	add	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f7fe fee4 	bl	8002056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003292:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <xTaskIncrementTick+0x168>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	429a      	cmp	r2, r3
 800329a:	d3b8      	bcc.n	800320e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a0:	e7b5      	b.n	800320e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032a2:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <xTaskIncrementTick+0x168>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4914      	ldr	r1, [pc, #80]	@ (80032fc <xTaskIncrementTick+0x164>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d901      	bls.n	80032be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <xTaskIncrementTick+0x16c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e004      	b.n	80032d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <xTaskIncrementTick+0x170>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <xTaskIncrementTick+0x170>)
 80032d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032d6:	697b      	ldr	r3, [r7, #20]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000d5c 	.word	0x20000d5c
 80032e4:	20000d38 	.word	0x20000d38
 80032e8:	20000cec 	.word	0x20000cec
 80032ec:	20000cf0 	.word	0x20000cf0
 80032f0:	20000d4c 	.word	0x20000d4c
 80032f4:	20000d54 	.word	0x20000d54
 80032f8:	20000d3c 	.word	0x20000d3c
 80032fc:	20000864 	.word	0x20000864
 8003300:	20000860 	.word	0x20000860
 8003304:	20000d48 	.word	0x20000d48
 8003308:	20000d44 	.word	0x20000d44

0800330c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003312:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <vTaskSwitchContext+0xb4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800331a:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <vTaskSwitchContext+0xb8>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003320:	e047      	b.n	80033b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003322:	4b28      	ldr	r3, [pc, #160]	@ (80033c4 <vTaskSwitchContext+0xb8>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003328:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <vTaskSwitchContext+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e011      	b.n	8003354 <vTaskSwitchContext+0x48>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <vTaskSwitchContext+0x42>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	607b      	str	r3, [r7, #4]
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	e7fd      	b.n	800334a <vTaskSwitchContext+0x3e>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3b01      	subs	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	491d      	ldr	r1, [pc, #116]	@ (80033cc <vTaskSwitchContext+0xc0>)
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0e3      	beq.n	8003330 <vTaskSwitchContext+0x24>
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <vTaskSwitchContext+0xc0>)
 8003374:	4413      	add	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3308      	adds	r3, #8
 800338a:	429a      	cmp	r2, r3
 800338c:	d104      	bne.n	8003398 <vTaskSwitchContext+0x8c>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4a0c      	ldr	r2, [pc, #48]	@ (80033d0 <vTaskSwitchContext+0xc4>)
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4a09      	ldr	r2, [pc, #36]	@ (80033c8 <vTaskSwitchContext+0xbc>)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <vTaskSwitchContext+0xc4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3354      	adds	r3, #84	@ 0x54
 80033ae:	4a09      	ldr	r2, [pc, #36]	@ (80033d4 <vTaskSwitchContext+0xc8>)
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000d5c 	.word	0x20000d5c
 80033c4:	20000d48 	.word	0x20000d48
 80033c8:	20000d3c 	.word	0x20000d3c
 80033cc:	20000864 	.word	0x20000864
 80033d0:	20000860 	.word	0x20000860
 80033d4:	20000010 	.word	0x20000010

080033d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	60fb      	str	r3, [r7, #12]
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <vTaskPlaceOnEventList+0x48>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3318      	adds	r3, #24
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe fe48 	bl	800209e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800340e:	2101      	movs	r1, #1
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f000 fa87 	bl	8003924 <prvAddCurrentTaskToDelayedList>
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000860 	.word	0x20000860

08003424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	617b      	str	r3, [r7, #20]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <vTaskPlaceOnEventListRestricted+0x54>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe fdfd 	bl	8002056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003466:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	68b8      	ldr	r0, [r7, #8]
 800346c:	f000 fa5a 	bl	8003924 <prvAddCurrentTaskToDelayedList>
	}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000860 	.word	0x20000860

0800347c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10b      	bne.n	80034aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60fb      	str	r3, [r7, #12]
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fe2e 	bl	8002110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <xTaskRemoveFromEventList+0xb0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fe25 	bl	8002110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d903      	bls.n	80034da <xTaskRemoveFromEventList+0x5e>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4a16      	ldr	r2, [pc, #88]	@ (8003530 <xTaskRemoveFromEventList+0xb4>)
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4a13      	ldr	r2, [pc, #76]	@ (8003534 <xTaskRemoveFromEventList+0xb8>)
 80034e8:	441a      	add	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7fe fdb0 	bl	8002056 <vListInsertEnd>
 80034f6:	e005      	b.n	8003504 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	3318      	adds	r3, #24
 80034fc:	4619      	mov	r1, r3
 80034fe:	480e      	ldr	r0, [pc, #56]	@ (8003538 <xTaskRemoveFromEventList+0xbc>)
 8003500:	f7fe fda9 	bl	8002056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <xTaskRemoveFromEventList+0xc0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	429a      	cmp	r2, r3
 8003510:	d905      	bls.n	800351e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003512:	2301      	movs	r3, #1
 8003514:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <xTaskRemoveFromEventList+0xc4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e001      	b.n	8003522 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003522:	697b      	ldr	r3, [r7, #20]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000d5c 	.word	0x20000d5c
 8003530:	20000d3c 	.word	0x20000d3c
 8003534:	20000864 	.word	0x20000864
 8003538:	20000cf4 	.word	0x20000cf4
 800353c:	20000860 	.word	0x20000860
 8003540:	20000d48 	.word	0x20000d48

08003544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <vTaskInternalSetTimeOutState+0x24>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <vTaskInternalSetTimeOutState+0x28>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	20000d4c 	.word	0x20000d4c
 800356c:	20000d38 	.word	0x20000d38

08003570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	613b      	str	r3, [r7, #16]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80035b6:	f000 fe97 	bl	80042e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <xTaskCheckForTimeOut+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035d2:	d102      	bne.n	80035da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e023      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <xTaskCheckForTimeOut+0xc4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d007      	beq.n	80035f6 <xTaskCheckForTimeOut+0x86>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e015      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20b      	bcs.n	8003618 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff99 	bl	8003544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e004      	b.n	8003622 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003622:	f000 fe93 	bl	800434c <vPortExitCritical>

	return xReturn;
 8003626:	69fb      	ldr	r3, [r7, #28]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000d38 	.word	0x20000d38
 8003634:	20000d4c 	.word	0x20000d4c

08003638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <vTaskMissedYield+0x14>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000d48 	.word	0x20000d48

08003650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003658:	f000 f852 	bl	8003700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <prvIdleTask+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d9f9      	bls.n	8003658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <prvIdleTask+0x2c>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003674:	e7f0      	b.n	8003658 <prvIdleTask+0x8>
 8003676:	bf00      	nop
 8003678:	20000864 	.word	0x20000864
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e00c      	b.n	80036a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <prvInitialiseTaskLists+0x60>)
 8003698:	4413      	add	r3, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fcae 	bl	8001ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b37      	cmp	r3, #55	@ 0x37
 80036aa:	d9ef      	bls.n	800368c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036ac:	480d      	ldr	r0, [pc, #52]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ae:	f7fe fca5 	bl	8001ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036b2:	480d      	ldr	r0, [pc, #52]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036b4:	f7fe fca2 	bl	8001ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036b8:	480c      	ldr	r0, [pc, #48]	@ (80036ec <prvInitialiseTaskLists+0x6c>)
 80036ba:	f7fe fc9f 	bl	8001ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036be:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <prvInitialiseTaskLists+0x70>)
 80036c0:	f7fe fc9c 	bl	8001ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <prvInitialiseTaskLists+0x74>)
 80036c6:	f7fe fc99 	bl	8001ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <prvInitialiseTaskLists+0x78>)
 80036cc:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <prvInitialiseTaskLists+0x64>)
 80036ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <prvInitialiseTaskLists+0x7c>)
 80036d2:	4a05      	ldr	r2, [pc, #20]	@ (80036e8 <prvInitialiseTaskLists+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000864 	.word	0x20000864
 80036e4:	20000cc4 	.word	0x20000cc4
 80036e8:	20000cd8 	.word	0x20000cd8
 80036ec:	20000cf4 	.word	0x20000cf4
 80036f0:	20000d08 	.word	0x20000d08
 80036f4:	20000d20 	.word	0x20000d20
 80036f8:	20000cec 	.word	0x20000cec
 80036fc:	20000cf0 	.word	0x20000cf0

08003700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003706:	e019      	b.n	800373c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003708:	f000 fdee 	bl	80042e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <prvCheckTasksWaitingTermination+0x50>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fcf9 	bl	8002110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a0b      	ldr	r2, [pc, #44]	@ (8003754 <prvCheckTasksWaitingTermination+0x54>)
 8003726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 8003730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003732:	f000 fe0b 	bl	800434c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f810 	bl	800375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <prvCheckTasksWaitingTermination+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e1      	bne.n	8003708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000d08 	.word	0x20000d08
 8003754:	20000d34 	.word	0x20000d34
 8003758:	20000d1c 	.word	0x20000d1c

0800375c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3354      	adds	r3, #84	@ 0x54
 8003768:	4618      	mov	r0, r3
 800376a:	f001 f8d5 	bl	8004918 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ffa3 	bl	80046c8 <vPortFree>
				vPortFree( pxTCB );
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 ffa0 	bl	80046c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003788:	e019      	b.n	80037be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003790:	2b01      	cmp	r3, #1
 8003792:	d103      	bne.n	800379c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 ff97 	bl	80046c8 <vPortFree>
	}
 800379a:	e010      	b.n	80037be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d00b      	beq.n	80037be <prvDeleteTCB+0x62>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	60fb      	str	r3, [r7, #12]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <prvDeleteTCB+0x5e>
	}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <prvResetNextTaskUnblockTime+0x38>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <prvResetNextTaskUnblockTime+0x3c>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037e0:	e008      	b.n	80037f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <prvResetNextTaskUnblockTime+0x38>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <prvResetNextTaskUnblockTime+0x3c>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	20000cec 	.word	0x20000cec
 8003804:	20000d54 	.word	0x20000d54

08003808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <xTaskGetSchedulerState+0x34>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003816:	2301      	movs	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	e008      	b.n	800382e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <xTaskGetSchedulerState+0x38>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003824:	2302      	movs	r3, #2
 8003826:	607b      	str	r3, [r7, #4]
 8003828:	e001      	b.n	800382e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800382e:	687b      	ldr	r3, [r7, #4]
	}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000d40 	.word	0x20000d40
 8003840:	20000d5c 	.word	0x20000d5c

08003844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d058      	beq.n	800390c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800385a:	4b2f      	ldr	r3, [pc, #188]	@ (8003918 <xTaskPriorityDisinherit+0xd4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d00b      	beq.n	800387c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60fb      	str	r3, [r7, #12]
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60bb      	str	r3, [r7, #8]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d02c      	beq.n	800390c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d128      	bne.n	800390c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc26 	bl	8002110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038dc:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <xTaskPriorityDisinherit+0xd8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d903      	bls.n	80038ec <xTaskPriorityDisinherit+0xa8>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	4a0c      	ldr	r2, [pc, #48]	@ (800391c <xTaskPriorityDisinherit+0xd8>)
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <xTaskPriorityDisinherit+0xdc>)
 80038fa:	441a      	add	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f7fe fba7 	bl	8002056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800390c:	697b      	ldr	r3, [r7, #20]
	}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000860 	.word	0x20000860
 800391c:	20000d3c 	.word	0x20000d3c
 8003920:	20000864 	.word	0x20000864

08003924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800392e:	4b21      	ldr	r3, [pc, #132]	@ (80039b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003934:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3304      	adds	r3, #4
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fbe8 	bl	8002110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003946:	d10a      	bne.n	800395e <prvAddCurrentTaskToDelayedList+0x3a>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800394e:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4819      	ldr	r0, [pc, #100]	@ (80039bc <prvAddCurrentTaskToDelayedList+0x98>)
 8003958:	f7fe fb7d 	bl	8002056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800395c:	e026      	b.n	80039ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003966:	4b14      	ldr	r3, [pc, #80]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	429a      	cmp	r2, r3
 8003974:	d209      	bcs.n	800398a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b0f      	ldr	r3, [pc, #60]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3304      	adds	r3, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f7fe fb8b 	bl	800209e <vListInsert>
}
 8003988:	e010      	b.n	80039ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800398a:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f7fe fb81 	bl	800209e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d202      	bcs.n	80039ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039a6:	4a08      	ldr	r2, [pc, #32]	@ (80039c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000d38 	.word	0x20000d38
 80039b8:	20000860 	.word	0x20000860
 80039bc:	20000d20 	.word	0x20000d20
 80039c0:	20000cf0 	.word	0x20000cf0
 80039c4:	20000cec 	.word	0x20000cec
 80039c8:	20000d54 	.word	0x20000d54

080039cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	@ 0x28
 80039d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039d6:	f000 fb13 	bl	8004000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039da:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <xTimerCreateTimerTask+0x84>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d021      	beq.n	8003a26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039ea:	1d3a      	adds	r2, r7, #4
 80039ec:	f107 0108 	add.w	r1, r7, #8
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fae7 	bl	8001fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	9202      	str	r2, [sp, #8]
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	2302      	movs	r3, #2
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	4911      	ldr	r1, [pc, #68]	@ (8003a54 <xTimerCreateTimerTask+0x88>)
 8003a0e:	4812      	ldr	r0, [pc, #72]	@ (8003a58 <xTimerCreateTimerTask+0x8c>)
 8003a10:	f7ff f8a2 	bl	8002b58 <xTaskCreateStatic>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <xTimerCreateTimerTask+0x90>)
 8003a18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <xTimerCreateTimerTask+0x90>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a22:	2301      	movs	r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	613b      	str	r3, [r7, #16]
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000d90 	.word	0x20000d90
 8003a54:	08004b18 	.word	0x08004b18
 8003a58:	08003b99 	.word	0x08003b99
 8003a5c:	20000d94 	.word	0x20000d94

08003a60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <xTimerGenericCommand+0x30>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	623b      	str	r3, [r7, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a90:	4b19      	ldr	r3, [pc, #100]	@ (8003af8 <xTimerGenericCommand+0x98>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02a      	beq.n	8003aee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	dc18      	bgt.n	8003adc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003aaa:	f7ff fead 	bl	8003808 <xTaskGetSchedulerState>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d109      	bne.n	8003ac8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ab4:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <xTimerGenericCommand+0x98>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	f107 0110 	add.w	r1, r7, #16
 8003abc:	2300      	movs	r3, #0
 8003abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac0:	f7fe fc5a 	bl	8002378 <xQueueGenericSend>
 8003ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ac6:	e012      	b.n	8003aee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <xTimerGenericCommand+0x98>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	f107 0110 	add.w	r1, r7, #16
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f7fe fc50 	bl	8002378 <xQueueGenericSend>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ada:	e008      	b.n	8003aee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <xTimerGenericCommand+0x98>)
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	f107 0110 	add.w	r1, r7, #16
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	f7fe fd48 	bl	800257c <xQueueGenericSendFromISR>
 8003aec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	@ 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000d90 	.word	0x20000d90

08003afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b06:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <prvProcessExpiredTimer+0x98>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fafb 	bl	8002110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d023      	beq.n	8003b70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	18d1      	adds	r1, r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f000 f8d5 	bl	8003ce4 <prvInsertTimerInActiveList>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d020      	beq.n	8003b82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	2100      	movs	r1, #0
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff88 	bl	8003a60 <xTimerGenericCommand>
 8003b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d114      	bne.n	8003b82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	60fb      	str	r3, [r7, #12]
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	4798      	blx	r3
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000d88 	.word	0x20000d88

08003b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f859 	bl	8003c5c <prvGetNextExpireTime>
 8003baa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f805 	bl	8003bc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bb6:	f000 f8d7 	bl	8003d68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bba:	bf00      	nop
 8003bbc:	e7f0      	b.n	8003ba0 <prvTimerTask+0x8>
	...

08003bc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bca:	f7ff fa29 	bl	8003020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f866 	bl	8003ca4 <prvSampleTimeNow>
 8003bd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d130      	bne.n	8003c42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <prvProcessTimerOrBlockTask+0x3c>
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d806      	bhi.n	8003bfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bee:	f7ff fa25 	bl	800303c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bf2:	68f9      	ldr	r1, [r7, #12]
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff81 	bl	8003afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bfa:	e024      	b.n	8003c46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c02:	4b13      	ldr	r3, [pc, #76]	@ (8003c50 <prvProcessTimerOrBlockTask+0x90>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <prvProcessTimerOrBlockTask+0x50>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <prvProcessTimerOrBlockTask+0x52>
 8003c10:	2300      	movs	r3, #0
 8003c12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <prvProcessTimerOrBlockTask+0x94>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fe ff65 	bl	8002af0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c26:	f7ff fa09 	bl	800303c <xTaskResumeAll>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <prvProcessTimerOrBlockTask+0x98>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
}
 8003c40:	e001      	b.n	8003c46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c42:	f7ff f9fb 	bl	800303c <xTaskResumeAll>
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000d8c 	.word	0x20000d8c
 8003c54:	20000d90 	.word	0x20000d90
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <prvGetNextExpireTime+0x44>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <prvGetNextExpireTime+0x16>
 8003c6e:	2201      	movs	r2, #1
 8003c70:	e000      	b.n	8003c74 <prvGetNextExpireTime+0x18>
 8003c72:	2200      	movs	r2, #0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <prvGetNextExpireTime+0x44>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e001      	b.n	8003c90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c90:	68fb      	ldr	r3, [r7, #12]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000d88 	.word	0x20000d88

08003ca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cac:	f7ff fa64 	bl	8003178 <xTaskGetTickCount>
 8003cb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <prvSampleTimeNow+0x3c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d205      	bcs.n	8003cc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cbc:	f000 f93a 	bl	8003f34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e002      	b.n	8003cce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cce:	4a04      	ldr	r2, [pc, #16]	@ (8003ce0 <prvSampleTimeNow+0x3c>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000d98 	.word	0x20000d98

08003ce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d812      	bhi.n	8003d30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e01b      	b.n	8003d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <prvInsertTimerInActiveList+0x7c>)
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f7fe f9b8 	bl	800209e <vListInsert>
 8003d2e:	e012      	b.n	8003d56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d206      	bcs.n	8003d46 <prvInsertTimerInActiveList+0x62>
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d302      	bcc.n	8003d46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e007      	b.n	8003d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <prvInsertTimerInActiveList+0x80>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f7fe f9a4 	bl	800209e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d56:	697b      	ldr	r3, [r7, #20]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000d8c 	.word	0x20000d8c
 8003d64:	20000d88 	.word	0x20000d88

08003d68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	@ 0x38
 8003d6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d6e:	e0ce      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da19      	bge.n	8003daa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	3304      	adds	r3, #4
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	61fb      	str	r3, [r7, #28]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da0:	6850      	ldr	r0, [r2, #4]
 8003da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da4:	6892      	ldr	r2, [r2, #8]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f2c0 80ae 	blt.w	8003f0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe f9a4 	bl	8002110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff6a 	bl	8003ca4 <prvSampleTimeNow>
 8003dd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	f200 8097 	bhi.w	8003f08 <prvProcessReceivedCommands+0x1a0>
 8003dda:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <prvProcessReceivedCommands+0x78>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003e09 	.word	0x08003e09
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e09 	.word	0x08003e09
 8003dec:	08003e7f 	.word	0x08003e7f
 8003df0:	08003e93 	.word	0x08003e93
 8003df4:	08003edf 	.word	0x08003edf
 8003df8:	08003e09 	.word	0x08003e09
 8003dfc:	08003e09 	.word	0x08003e09
 8003e00:	08003e7f 	.word	0x08003e7f
 8003e04:	08003e93 	.word	0x08003e93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	18d1      	adds	r1, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e28:	f7ff ff5c 	bl	8003ce4 <prvInsertTimerInActiveList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d06c      	beq.n	8003f0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d061      	beq.n	8003f0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	441a      	add	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2300      	movs	r3, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e5a:	f7ff fe01 	bl	8003a60 <xTimerGenericCommand>
 8003e5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d152      	bne.n	8003f0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61bb      	str	r3, [r7, #24]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003e90:	e03d      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	617b      	str	r3, [r7, #20]
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	e7fd      	b.n	8003ec6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	18d1      	adds	r1, r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ed8:	f7ff ff04 	bl	8003ce4 <prvInsertTimerInActiveList>
					break;
 8003edc:	e017      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eee:	f000 fbeb 	bl	80046c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ef2:	e00c      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003f06:	e002      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <prvProcessReceivedCommands+0x1a6>
					break;
 8003f0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <prvProcessReceivedCommands+0x1c8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1d39      	adds	r1, r7, #4
 8003f14:	2200      	movs	r2, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fbce 	bl	80026b8 <xQueueReceive>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f47f af26 	bne.w	8003d70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3730      	adds	r7, #48	@ 0x30
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000d90 	.word	0x20000d90

08003f34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f3a:	e049      	b.n	8003fd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f46:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f8db 	bl	8002110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02f      	beq.n	8003fd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4413      	add	r3, r2
 8003f78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d90e      	bls.n	8003fa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7fe f880 	bl	800209e <vListInsert>
 8003f9e:	e017      	b.n	8003fd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff fd58 	bl	8003a60 <xTimerGenericCommand>
 8003fb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	603b      	str	r3, [r7, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1b0      	bne.n	8003f3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fda:	4b07      	ldr	r3, [pc, #28]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <prvSwitchTimerLists+0xc8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <prvSwitchTimerLists+0xc4>)
 8003fe6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <prvSwitchTimerLists+0xc8>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6013      	str	r3, [r2, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000d88 	.word	0x20000d88
 8003ffc:	20000d8c 	.word	0x20000d8c

08004000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004006:	f000 f96f 	bl	80042e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <prvCheckForValidListAndQueue+0x60>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d120      	bne.n	8004054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004012:	4814      	ldr	r0, [pc, #80]	@ (8004064 <prvCheckForValidListAndQueue+0x64>)
 8004014:	f7fd fff2 	bl	8001ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004018:	4813      	ldr	r0, [pc, #76]	@ (8004068 <prvCheckForValidListAndQueue+0x68>)
 800401a:	f7fd ffef 	bl	8001ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800401e:	4b13      	ldr	r3, [pc, #76]	@ (800406c <prvCheckForValidListAndQueue+0x6c>)
 8004020:	4a10      	ldr	r2, [pc, #64]	@ (8004064 <prvCheckForValidListAndQueue+0x64>)
 8004022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004024:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <prvCheckForValidListAndQueue+0x70>)
 8004026:	4a10      	ldr	r2, [pc, #64]	@ (8004068 <prvCheckForValidListAndQueue+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	4b11      	ldr	r3, [pc, #68]	@ (8004074 <prvCheckForValidListAndQueue+0x74>)
 8004030:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <prvCheckForValidListAndQueue+0x78>)
 8004032:	2110      	movs	r1, #16
 8004034:	200a      	movs	r0, #10
 8004036:	f7fe f8ff 	bl	8002238 <xQueueGenericCreateStatic>
 800403a:	4603      	mov	r3, r0
 800403c:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <prvCheckForValidListAndQueue+0x60>)
 800403e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004040:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <prvCheckForValidListAndQueue+0x60>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <prvCheckForValidListAndQueue+0x60>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	490b      	ldr	r1, [pc, #44]	@ (800407c <prvCheckForValidListAndQueue+0x7c>)
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fd24 	bl	8002a9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004054:	f000 f97a 	bl	800434c <vPortExitCritical>
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000d90 	.word	0x20000d90
 8004064:	20000d60 	.word	0x20000d60
 8004068:	20000d74 	.word	0x20000d74
 800406c:	20000d88 	.word	0x20000d88
 8004070:	20000d8c 	.word	0x20000d8c
 8004074:	20000e3c 	.word	0x20000e3c
 8004078:	20000d9c 	.word	0x20000d9c
 800407c:	08004b20 	.word	0x08004b20

08004080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3b04      	subs	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b04      	subs	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f023 0201 	bic.w	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040b0:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <pxPortInitialiseStack+0x64>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3b14      	subs	r3, #20
 80040ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b04      	subs	r3, #4
 80040c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f06f 0202 	mvn.w	r2, #2
 80040ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3b20      	subs	r3, #32
 80040d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	080040e9 	.word	0x080040e9

080040e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040f2:	4b13      	ldr	r3, [pc, #76]	@ (8004140 <prvTaskExitError+0x58>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040fa:	d00b      	beq.n	8004114 <prvTaskExitError+0x2c>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	60fb      	str	r3, [r7, #12]
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <prvTaskExitError+0x28>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60bb      	str	r3, [r7, #8]
}
 8004126:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004128:	bf00      	nop
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0fc      	beq.n	800412a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c
	...

08004150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pxCurrentTCBConst2>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	6808      	ldr	r0, [r1, #0]
 8004156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415a:	f380 8809 	msr	PSP, r0
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8811 	msr	BASEPRI, r0
 800416a:	4770      	bx	lr
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst2>:
 8004170:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004178:	4808      	ldr	r0, [pc, #32]	@ (800419c <prvPortStartFirstTask+0x24>)
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f380 8808 	msr	MSP, r0
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8814 	msr	CONTROL, r0
 800418a:	b662      	cpsie	i
 800418c:	b661      	cpsie	f
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	df00      	svc	0
 8004198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800419a:	bf00      	nop
 800419c:	e000ed08 	.word	0xe000ed08

080041a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041a6:	4b47      	ldr	r3, [pc, #284]	@ (80042c4 <xPortStartScheduler+0x124>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a47      	ldr	r2, [pc, #284]	@ (80042c8 <xPortStartScheduler+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10b      	bne.n	80041c8 <xPortStartScheduler+0x28>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041c8:	4b3e      	ldr	r3, [pc, #248]	@ (80042c4 <xPortStartScheduler+0x124>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	@ (80042cc <xPortStartScheduler+0x12c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10b      	bne.n	80041ea <xPortStartScheduler+0x4a>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	613b      	str	r3, [r7, #16]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041ea:	4b39      	ldr	r3, [pc, #228]	@ (80042d0 <xPortStartScheduler+0x130>)
 80041ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	22ff      	movs	r2, #255	@ 0xff
 80041fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b31      	ldr	r3, [pc, #196]	@ (80042d4 <xPortStartScheduler+0x134>)
 8004210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004212:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <xPortStartScheduler+0x138>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004218:	e009      	b.n	800422e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800421a:	4b2f      	ldr	r3, [pc, #188]	@ (80042d8 <xPortStartScheduler+0x138>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3b01      	subs	r3, #1
 8004220:	4a2d      	ldr	r2, [pc, #180]	@ (80042d8 <xPortStartScheduler+0x138>)
 8004222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d0ef      	beq.n	800421a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800423a:	4b27      	ldr	r3, [pc, #156]	@ (80042d8 <xPortStartScheduler+0x138>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1c3 0307 	rsb	r3, r3, #7
 8004242:	2b04      	cmp	r3, #4
 8004244:	d00b      	beq.n	800425e <xPortStartScheduler+0xbe>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60bb      	str	r3, [r7, #8]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <xPortStartScheduler+0x138>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	4a1c      	ldr	r2, [pc, #112]	@ (80042d8 <xPortStartScheduler+0x138>)
 8004266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <xPortStartScheduler+0x138>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004270:	4a19      	ldr	r2, [pc, #100]	@ (80042d8 <xPortStartScheduler+0x138>)
 8004272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <xPortStartScheduler+0x13c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a16      	ldr	r2, [pc, #88]	@ (80042dc <xPortStartScheduler+0x13c>)
 8004282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <xPortStartScheduler+0x13c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <xPortStartScheduler+0x13c>)
 800428e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004294:	f000 f8da 	bl	800444c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <xPortStartScheduler+0x140>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800429e:	f000 f8f9 	bl	8004494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <xPortStartScheduler+0x144>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	@ (80042e4 <xPortStartScheduler+0x144>)
 80042a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042ae:	f7ff ff63 	bl	8004178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042b2:	f7ff f82b 	bl	800330c <vTaskSwitchContext>
	prvTaskExitError();
 80042b6:	f7ff ff17 	bl	80040e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	e000ed00 	.word	0xe000ed00
 80042c8:	410fc271 	.word	0x410fc271
 80042cc:	410fc270 	.word	0x410fc270
 80042d0:	e000e400 	.word	0xe000e400
 80042d4:	20000e8c 	.word	0x20000e8c
 80042d8:	20000e90 	.word	0x20000e90
 80042dc:	e000ed20 	.word	0xe000ed20
 80042e0:	2000000c 	.word	0x2000000c
 80042e4:	e000ef34 	.word	0xe000ef34

080042e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004302:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <vPortEnterCritical+0x5c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <vPortEnterCritical+0x5c>)
 800430a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800430c:	4b0d      	ldr	r3, [pc, #52]	@ (8004344 <vPortEnterCritical+0x5c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d110      	bne.n	8004336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004314:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <vPortEnterCritical+0x60>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <vPortEnterCritical+0x4e>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	603b      	str	r3, [r7, #0]
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <vPortEnterCritical+0x4a>
	}
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004352:	4b12      	ldr	r3, [pc, #72]	@ (800439c <vPortExitCritical+0x50>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <vPortExitCritical+0x26>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	607b      	str	r3, [r7, #4]
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	e7fd      	b.n	800436e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004372:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <vPortExitCritical+0x50>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a08      	ldr	r2, [pc, #32]	@ (800439c <vPortExitCritical+0x50>)
 800437a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800437c:	4b07      	ldr	r3, [pc, #28]	@ (800439c <vPortExitCritical+0x50>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <vPortExitCritical+0x44>
 8004384:	2300      	movs	r3, #0
 8004386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f383 8811 	msr	BASEPRI, r3
}
 800438e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	2000000c 	.word	0x2000000c

080043a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043a0:	f3ef 8009 	mrs	r0, PSP
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	4b15      	ldr	r3, [pc, #84]	@ (8004400 <pxCurrentTCBConst>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f01e 0f10 	tst.w	lr, #16
 80043b0:	bf08      	it	eq
 80043b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ba:	6010      	str	r0, [r2, #0]
 80043bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043c4:	f380 8811 	msr	BASEPRI, r0
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f7fe ff9c 	bl	800330c <vTaskSwitchContext>
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	f380 8811 	msr	BASEPRI, r0
 80043dc:	bc09      	pop	{r0, r3}
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	6808      	ldr	r0, [r1, #0]
 80043e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e6:	f01e 0f10 	tst.w	lr, #16
 80043ea:	bf08      	it	eq
 80043ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043f0:	f380 8809 	msr	PSP, r0
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w

08004400 <pxCurrentTCBConst>:
 8004400:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop

08004408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
}
 8004420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004422:	f7fe feb9 	bl	8003198 <xTaskIncrementTick>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800442c:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <xPortSysTickHandler+0x40>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f383 8811 	msr	BASEPRI, r3
}
 800443e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <vPortSetupTimerInterrupt+0x38>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <vPortSetupTimerInterrupt+0x3c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <vPortSetupTimerInterrupt+0x40>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <vPortSetupTimerInterrupt+0x44>)
 800446a:	3b01      	subs	r3, #1
 800446c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800446e:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <vPortSetupTimerInterrupt+0x34>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010
 8004484:	e000e018 	.word	0xe000e018
 8004488:	20000000 	.word	0x20000000
 800448c:	10624dd3 	.word	0x10624dd3
 8004490:	e000e014 	.word	0xe000e014

08004494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80044a4 <vPortEnableVFP+0x10>
 8004498:	6801      	ldr	r1, [r0, #0]
 800449a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800449e:	6001      	str	r1, [r0, #0]
 80044a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044a2:	bf00      	nop
 80044a4:	e000ed88 	.word	0xe000ed88

080044a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044ae:	f3ef 8305 	mrs	r3, IPSR
 80044b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d915      	bls.n	80044e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ba:	4a18      	ldr	r2, [pc, #96]	@ (800451c <vPortValidateInterruptPriority+0x74>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044c4:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <vPortValidateInterruptPriority+0x78>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	7afa      	ldrb	r2, [r7, #11]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d20b      	bcs.n	80044e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004524 <vPortValidateInterruptPriority+0x7c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <vPortValidateInterruptPriority+0x80>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90b      	bls.n	800450e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <vPortValidateInterruptPriority+0x62>
	}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000e3f0 	.word	0xe000e3f0
 8004520:	20000e8c 	.word	0x20000e8c
 8004524:	e000ed0c 	.word	0xe000ed0c
 8004528:	20000e90 	.word	0x20000e90

0800452c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004538:	f7fe fd72 	bl	8003020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800453c:	4b5c      	ldr	r3, [pc, #368]	@ (80046b0 <pvPortMalloc+0x184>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004544:	f000 f924 	bl	8004790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004548:	4b5a      	ldr	r3, [pc, #360]	@ (80046b4 <pvPortMalloc+0x188>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 8095 	bne.w	8004680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01e      	beq.n	800459a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800455c:	2208      	movs	r2, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	2b00      	cmp	r3, #0
 800456c:	d015      	beq.n	800459a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	3308      	adds	r3, #8
 8004576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <pvPortMalloc+0x6e>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	617b      	str	r3, [r7, #20]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d06f      	beq.n	8004680 <pvPortMalloc+0x154>
 80045a0:	4b45      	ldr	r3, [pc, #276]	@ (80046b8 <pvPortMalloc+0x18c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d86a      	bhi.n	8004680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045aa:	4b44      	ldr	r3, [pc, #272]	@ (80046bc <pvPortMalloc+0x190>)
 80045ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045ae:	4b43      	ldr	r3, [pc, #268]	@ (80046bc <pvPortMalloc+0x190>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045b4:	e004      	b.n	80045c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d903      	bls.n	80045d2 <pvPortMalloc+0xa6>
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f1      	bne.n	80045b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045d2:	4b37      	ldr	r3, [pc, #220]	@ (80046b0 <pvPortMalloc+0x184>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	429a      	cmp	r2, r3
 80045da:	d051      	beq.n	8004680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2208      	movs	r2, #8
 80045e2:	4413      	add	r3, r2
 80045e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	2308      	movs	r3, #8
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d920      	bls.n	8004640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4413      	add	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00b      	beq.n	8004628 <pvPortMalloc+0xfc>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800463a:	69b8      	ldr	r0, [r7, #24]
 800463c:	f000 f90a 	bl	8004854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004640:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <pvPortMalloc+0x18c>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <pvPortMalloc+0x18c>)
 800464c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800464e:	4b1a      	ldr	r3, [pc, #104]	@ (80046b8 <pvPortMalloc+0x18c>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <pvPortMalloc+0x194>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d203      	bcs.n	8004662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800465a:	4b17      	ldr	r3, [pc, #92]	@ (80046b8 <pvPortMalloc+0x18c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <pvPortMalloc+0x194>)
 8004660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <pvPortMalloc+0x188>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	431a      	orrs	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004676:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <pvPortMalloc+0x198>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a11      	ldr	r2, [pc, #68]	@ (80046c4 <pvPortMalloc+0x198>)
 800467e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004680:	f7fe fcdc 	bl	800303c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <pvPortMalloc+0x17a>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <pvPortMalloc+0x176>
	return pvReturn;
 80046a6:	69fb      	ldr	r3, [r7, #28]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20004a9c 	.word	0x20004a9c
 80046b4:	20004ab0 	.word	0x20004ab0
 80046b8:	20004aa0 	.word	0x20004aa0
 80046bc:	20004a94 	.word	0x20004a94
 80046c0:	20004aa4 	.word	0x20004aa4
 80046c4:	20004aa8 	.word	0x20004aa8

080046c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04f      	beq.n	800477a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046da:	2308      	movs	r3, #8
 80046dc:	425b      	negs	r3, r3
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <vPortFree+0xbc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <vPortFree+0x46>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	60fb      	str	r3, [r7, #12]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <vPortFree+0x66>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <vPortFree+0xbc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01e      	beq.n	800477a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11a      	bne.n	800477a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <vPortFree+0xbc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004754:	f7fe fc64 	bl	8003020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <vPortFree+0xc0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4413      	add	r3, r2
 8004762:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <vPortFree+0xc0>)
 8004764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004766:	6938      	ldr	r0, [r7, #16]
 8004768:	f000 f874 	bl	8004854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800476c:	4b07      	ldr	r3, [pc, #28]	@ (800478c <vPortFree+0xc4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a06      	ldr	r2, [pc, #24]	@ (800478c <vPortFree+0xc4>)
 8004774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004776:	f7fe fc61 	bl	800303c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800477a:	bf00      	nop
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20004ab0 	.word	0x20004ab0
 8004788:	20004aa0 	.word	0x20004aa0
 800478c:	20004aac 	.word	0x20004aac

08004790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800479a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800479c:	4b27      	ldr	r3, [pc, #156]	@ (800483c <prvHeapInit+0xac>)
 800479e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3307      	adds	r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <prvHeapInit+0xac>)
 80047c0:	4413      	add	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004840 <prvHeapInit+0xb0>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <prvHeapInit+0xb0>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4413      	add	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80047dc:	2208      	movs	r2, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0307 	bic.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <prvHeapInit+0xb4>)
 80047f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047f2:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <prvHeapInit+0xb4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047fa:	4b12      	ldr	r3, [pc, #72]	@ (8004844 <prvHeapInit+0xb4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <prvHeapInit+0xb4>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a0a      	ldr	r2, [pc, #40]	@ (8004848 <prvHeapInit+0xb8>)
 800481e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a09      	ldr	r2, [pc, #36]	@ (800484c <prvHeapInit+0xbc>)
 8004826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004828:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <prvHeapInit+0xc0>)
 800482a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000e94 	.word	0x20000e94
 8004840:	20004a94 	.word	0x20004a94
 8004844:	20004a9c 	.word	0x20004a9c
 8004848:	20004aa4 	.word	0x20004aa4
 800484c:	20004aa0 	.word	0x20004aa0
 8004850:	20004ab0 	.word	0x20004ab0

08004854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800485c:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <prvInsertBlockIntoFreeList+0xac>)
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e002      	b.n	8004868 <prvInsertBlockIntoFreeList+0x14>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d8f7      	bhi.n	8004862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d108      	bne.n	8004896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	441a      	add	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d118      	bne.n	80048dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <prvInsertBlockIntoFreeList+0xb0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d00d      	beq.n	80048d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	441a      	add	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e008      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e003      	b.n	80048e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d002      	beq.n	80048f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20004a94 	.word	0x20004a94
 8004904:	20004a9c 	.word	0x20004a9c

08004908 <memset>:
 8004908:	4402      	add	r2, r0
 800490a:	4603      	mov	r3, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <_reclaim_reent>:
 8004918:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <_reclaim_reent+0xb8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4283      	cmp	r3, r0
 800491e:	b570      	push	{r4, r5, r6, lr}
 8004920:	4604      	mov	r4, r0
 8004922:	d053      	beq.n	80049cc <_reclaim_reent+0xb4>
 8004924:	69c3      	ldr	r3, [r0, #28]
 8004926:	b31b      	cbz	r3, 8004970 <_reclaim_reent+0x58>
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	b163      	cbz	r3, 8004946 <_reclaim_reent+0x2e>
 800492c:	2500      	movs	r5, #0
 800492e:	69e3      	ldr	r3, [r4, #28]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	5959      	ldr	r1, [r3, r5]
 8004934:	b9b1      	cbnz	r1, 8004964 <_reclaim_reent+0x4c>
 8004936:	3504      	adds	r5, #4
 8004938:	2d80      	cmp	r5, #128	@ 0x80
 800493a:	d1f8      	bne.n	800492e <_reclaim_reent+0x16>
 800493c:	69e3      	ldr	r3, [r4, #28]
 800493e:	4620      	mov	r0, r4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f000 f87b 	bl	8004a3c <_free_r>
 8004946:	69e3      	ldr	r3, [r4, #28]
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	b111      	cbz	r1, 8004952 <_reclaim_reent+0x3a>
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f875 	bl	8004a3c <_free_r>
 8004952:	69e3      	ldr	r3, [r4, #28]
 8004954:	689d      	ldr	r5, [r3, #8]
 8004956:	b15d      	cbz	r5, 8004970 <_reclaim_reent+0x58>
 8004958:	4629      	mov	r1, r5
 800495a:	4620      	mov	r0, r4
 800495c:	682d      	ldr	r5, [r5, #0]
 800495e:	f000 f86d 	bl	8004a3c <_free_r>
 8004962:	e7f8      	b.n	8004956 <_reclaim_reent+0x3e>
 8004964:	680e      	ldr	r6, [r1, #0]
 8004966:	4620      	mov	r0, r4
 8004968:	f000 f868 	bl	8004a3c <_free_r>
 800496c:	4631      	mov	r1, r6
 800496e:	e7e1      	b.n	8004934 <_reclaim_reent+0x1c>
 8004970:	6961      	ldr	r1, [r4, #20]
 8004972:	b111      	cbz	r1, 800497a <_reclaim_reent+0x62>
 8004974:	4620      	mov	r0, r4
 8004976:	f000 f861 	bl	8004a3c <_free_r>
 800497a:	69e1      	ldr	r1, [r4, #28]
 800497c:	b111      	cbz	r1, 8004984 <_reclaim_reent+0x6c>
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f85c 	bl	8004a3c <_free_r>
 8004984:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004986:	b111      	cbz	r1, 800498e <_reclaim_reent+0x76>
 8004988:	4620      	mov	r0, r4
 800498a:	f000 f857 	bl	8004a3c <_free_r>
 800498e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004990:	b111      	cbz	r1, 8004998 <_reclaim_reent+0x80>
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f852 	bl	8004a3c <_free_r>
 8004998:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800499a:	b111      	cbz	r1, 80049a2 <_reclaim_reent+0x8a>
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f84d 	bl	8004a3c <_free_r>
 80049a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80049a4:	b111      	cbz	r1, 80049ac <_reclaim_reent+0x94>
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 f848 	bl	8004a3c <_free_r>
 80049ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80049ae:	b111      	cbz	r1, 80049b6 <_reclaim_reent+0x9e>
 80049b0:	4620      	mov	r0, r4
 80049b2:	f000 f843 	bl	8004a3c <_free_r>
 80049b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80049b8:	b111      	cbz	r1, 80049c0 <_reclaim_reent+0xa8>
 80049ba:	4620      	mov	r0, r4
 80049bc:	f000 f83e 	bl	8004a3c <_free_r>
 80049c0:	6a23      	ldr	r3, [r4, #32]
 80049c2:	b11b      	cbz	r3, 80049cc <_reclaim_reent+0xb4>
 80049c4:	4620      	mov	r0, r4
 80049c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049ca:	4718      	bx	r3
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	bf00      	nop
 80049d0:	20000010 	.word	0x20000010

080049d4 <__libc_init_array>:
 80049d4:	b570      	push	{r4, r5, r6, lr}
 80049d6:	4d0d      	ldr	r5, [pc, #52]	@ (8004a0c <__libc_init_array+0x38>)
 80049d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004a10 <__libc_init_array+0x3c>)
 80049da:	1b64      	subs	r4, r4, r5
 80049dc:	10a4      	asrs	r4, r4, #2
 80049de:	2600      	movs	r6, #0
 80049e0:	42a6      	cmp	r6, r4
 80049e2:	d109      	bne.n	80049f8 <__libc_init_array+0x24>
 80049e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004a14 <__libc_init_array+0x40>)
 80049e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004a18 <__libc_init_array+0x44>)
 80049e8:	f000 f87e 	bl	8004ae8 <_init>
 80049ec:	1b64      	subs	r4, r4, r5
 80049ee:	10a4      	asrs	r4, r4, #2
 80049f0:	2600      	movs	r6, #0
 80049f2:	42a6      	cmp	r6, r4
 80049f4:	d105      	bne.n	8004a02 <__libc_init_array+0x2e>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fc:	4798      	blx	r3
 80049fe:	3601      	adds	r6, #1
 8004a00:	e7ee      	b.n	80049e0 <__libc_init_array+0xc>
 8004a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a06:	4798      	blx	r3
 8004a08:	3601      	adds	r6, #1
 8004a0a:	e7f2      	b.n	80049f2 <__libc_init_array+0x1e>
 8004a0c:	08004b48 	.word	0x08004b48
 8004a10:	08004b48 	.word	0x08004b48
 8004a14:	08004b48 	.word	0x08004b48
 8004a18:	08004b4c 	.word	0x08004b4c

08004a1c <__retarget_lock_acquire_recursive>:
 8004a1c:	4770      	bx	lr

08004a1e <__retarget_lock_release_recursive>:
 8004a1e:	4770      	bx	lr

08004a20 <memcpy>:
 8004a20:	440a      	add	r2, r1
 8004a22:	4291      	cmp	r1, r2
 8004a24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004a28:	d100      	bne.n	8004a2c <memcpy+0xc>
 8004a2a:	4770      	bx	lr
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a36:	4291      	cmp	r1, r2
 8004a38:	d1f9      	bne.n	8004a2e <memcpy+0xe>
 8004a3a:	bd10      	pop	{r4, pc}

08004a3c <_free_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d041      	beq.n	8004ac8 <_free_r+0x8c>
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f0c      	subs	r4, r1, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	18e4      	addlt	r4, r4, r3
 8004a50:	f000 f83e 	bl	8004ad0 <__malloc_lock>
 8004a54:	4a1d      	ldr	r2, [pc, #116]	@ (8004acc <_free_r+0x90>)
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	b933      	cbnz	r3, 8004a68 <_free_r+0x2c>
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a64:	f000 b83a 	b.w	8004adc <__malloc_unlock>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d908      	bls.n	8004a7e <_free_r+0x42>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	1821      	adds	r1, r4, r0
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf01      	itttt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	1809      	addeq	r1, r1, r0
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	e7ed      	b.n	8004a5a <_free_r+0x1e>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b10b      	cbz	r3, 8004a88 <_free_r+0x4c>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d9fa      	bls.n	8004a7e <_free_r+0x42>
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	1850      	adds	r0, r2, r1
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d10b      	bne.n	8004aa8 <_free_r+0x6c>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	4401      	add	r1, r0
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	4283      	cmp	r3, r0
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	d1e0      	bne.n	8004a5e <_free_r+0x22>
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	6053      	str	r3, [r2, #4]
 8004aa2:	4408      	add	r0, r1
 8004aa4:	6010      	str	r0, [r2, #0]
 8004aa6:	e7da      	b.n	8004a5e <_free_r+0x22>
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x74>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	e7d6      	b.n	8004a5e <_free_r+0x22>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf04      	itt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	6063      	str	r3, [r4, #4]
 8004abe:	bf04      	itt	eq
 8004ac0:	1809      	addeq	r1, r1, r0
 8004ac2:	6021      	streq	r1, [r4, #0]
 8004ac4:	6054      	str	r4, [r2, #4]
 8004ac6:	e7ca      	b.n	8004a5e <_free_r+0x22>
 8004ac8:	bd38      	pop	{r3, r4, r5, pc}
 8004aca:	bf00      	nop
 8004acc:	20004bf0 	.word	0x20004bf0

08004ad0 <__malloc_lock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	@ (8004ad8 <__malloc_lock+0x8>)
 8004ad2:	f7ff bfa3 	b.w	8004a1c <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	20004bec 	.word	0x20004bec

08004adc <__malloc_unlock>:
 8004adc:	4801      	ldr	r0, [pc, #4]	@ (8004ae4 <__malloc_unlock+0x8>)
 8004ade:	f7ff bf9e 	b.w	8004a1e <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	20004bec 	.word	0x20004bec

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
