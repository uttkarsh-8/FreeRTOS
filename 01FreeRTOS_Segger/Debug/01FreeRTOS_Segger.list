
01FreeRTOS_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080061b0  080061b0  000071b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006274  08006274  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006274  08006274  00007274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800627c  0800627c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006284  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be8  20000060  080062e4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c48  080062e4  00008c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fbb  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c3  00000000  00000000  0002104b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00024610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001030  00000000  00000000  00025ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003385  00000000  00000000  00026b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e01  00000000  00000000  00029e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db31e  00000000  00000000  00040c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bfac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005abc  00000000  00000000  0011bff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00121aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006198 	.word	0x08006198

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006198 	.word	0x08006198

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fb11 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f85d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8f3 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8c7 	bl	80006e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1, "MyTask1", 100, NULL, 2, &task_handle1);
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <main+0x94>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	491d      	ldr	r1, [pc, #116]	@ (80005d4 <main+0x98>)
 8000560:	481d      	ldr	r0, [pc, #116]	@ (80005d8 <main+0x9c>)
 8000562:	f003 feb1 	bl	80042c8 <xTaskCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <main+0xa0>)
 800056a:	6013      	str	r3, [r2, #0]
  if(status != pdPASS){
 800056c:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <main+0xa0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d005      	beq.n	8000580 <main+0x44>
		static const char msg[] = "task1 cannot run\r\n";
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 8000574:	2364      	movs	r3, #100	@ 0x64
 8000576:	2212      	movs	r2, #18
 8000578:	4919      	ldr	r1, [pc, #100]	@ (80005e0 <main+0xa4>)
 800057a:	481a      	ldr	r0, [pc, #104]	@ (80005e4 <main+0xa8>)
 800057c:	f001 ff5e 	bl	800243c <HAL_UART_Transmit>
  }


  status = xTaskCreate(task2, "MyTask2", 100, NULL, 2, &task_handle2);
 8000580:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <main+0xac>)
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2264      	movs	r2, #100	@ 0x64
 800058c:	4917      	ldr	r1, [pc, #92]	@ (80005ec <main+0xb0>)
 800058e:	4818      	ldr	r0, [pc, #96]	@ (80005f0 <main+0xb4>)
 8000590:	f003 fe9a 	bl	80042c8 <xTaskCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <main+0xa0>)
 8000598:	6013      	str	r3, [r2, #0]
  if(status != pdPASS){
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <main+0xa0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d005      	beq.n	80005ae <main+0x72>
	  static const char msg[] = "task1 cannot run\r\n";
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	2212      	movs	r2, #18
 80005a6:	4913      	ldr	r1, [pc, #76]	@ (80005f4 <main+0xb8>)
 80005a8:	480e      	ldr	r0, [pc, #56]	@ (80005e4 <main+0xa8>)
 80005aa:	f001 ff47 	bl	800243c <HAL_UART_Transmit>
  }

  vTaskStartScheduler();
 80005ae:	f004 f81f 	bl	80045f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b2:	f002 ff4f 	bl	8003454 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b6:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <main+0xbc>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4810      	ldr	r0, [pc, #64]	@ (80005fc <main+0xc0>)
 80005bc:	f002 ff94 	bl	80034e8 <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000600 <main+0xc4>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c6:	f002 ff69 	bl	800349c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x8e>
 80005ce:	bf00      	nop
 80005d0:	200000c8 	.word	0x200000c8
 80005d4:	080061bc 	.word	0x080061bc
 80005d8:	08000811 	.word	0x08000811
 80005dc:	200000d0 	.word	0x200000d0
 80005e0:	08006208 	.word	0x08006208
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	080061c4 	.word	0x080061c4
 80005f0:	08000839 	.word	0x08000839
 80005f4:	0800621c 	.word	0x0800621c
 80005f8:	080061e4 	.word	0x080061e4
 80005fc:	08000861 	.word	0x08000861
 8000600:	200000c4 	.word	0x200000c4

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	@ 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fcd0 	bl	8005fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a29      	ldr	r2, [pc, #164]	@ (80006d8 <SystemClock_Config+0xd4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <SystemClock_Config+0xd8>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f948 	bl	8001928 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800069e:	f000 f8f9 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fdb6 	bl	8001230 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ca:	f000 f8e3 	bl	8000894 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 fe40 	bl	800239c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f8b7 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000007c 	.word	0x2000007c
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f000 fd1c 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fb7a 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fb6c 	bl	8000ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <task1>:

/* USER CODE BEGIN 4 */

void task1(void *pvParameters){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	static const char msg[] = "task1 is running \r\n";
	while(1){
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	2213      	movs	r2, #19
 800081c:	4904      	ldr	r1, [pc, #16]	@ (8000830 <task1+0x20>)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <task1+0x24>)
 8000820:	f001 fe0c 	bl	800243c <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000828:	f003 feac 	bl	8004584 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 800082c:	bf00      	nop
 800082e:	e7f3      	b.n	8000818 <task1+0x8>
 8000830:	08006230 	.word	0x08006230
 8000834:	2000007c 	.word	0x2000007c

08000838 <task2>:
//		taskYIELD();
	}
	vTaskDelete(NULL);
}

void task2(void *pvParameters){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	static const char msg[] = "task 2 is running !!\r\n";
	while(1){
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 8000840:	2364      	movs	r3, #100	@ 0x64
 8000842:	2216      	movs	r2, #22
 8000844:	4904      	ldr	r1, [pc, #16]	@ (8000858 <task2+0x20>)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <task2+0x24>)
 8000848:	f001 fdf8 	bl	800243c <HAL_UART_Transmit>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800084c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000850:	f003 fe98 	bl	8004584 <vTaskDelay>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, sizeof(msg)-1, 100);
 8000854:	bf00      	nop
 8000856:	e7f3      	b.n	8000840 <task2+0x8>
 8000858:	08006244 	.word	0x08006244
 800085c:	2000007c 	.word	0x2000007c

08000860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f002 fecf 	bl	800360c <osDelay>
 800086e:	e7fb      	b.n	8000868 <StartDefaultTask+0x8>

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000882:	f000 f993 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40001000 	.word	0x40001000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	@ (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 fa39 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1d      	ldr	r2, [pc, #116]	@ (800098c <HAL_UART_MspInit+0x94>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d133      	bne.n	8000982 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <HAL_UART_MspInit+0x98>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <HAL_UART_MspInit+0x98>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <HAL_UART_MspInit+0x98>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_UART_MspInit+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_UART_MspInit+0x98>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_UART_MspInit+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	@ (8000994 <HAL_UART_MspInit+0x9c>)
 800096e:	f000 fab1 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	2026      	movs	r0, #38	@ 0x26
 8000978:	f000 f9f0 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800097c:	2026      	movs	r0, #38	@ 0x26
 800097e:	f000 fa09 	bl	8000d94 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40004400 	.word	0x40004400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fd48 	bl	8001464 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f000 fd19 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 80009e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f000 fd15 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f2:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <HAL_InitTick+0xe8>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_InitTick+0xf0>)
 8000a02:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a24:	4817      	ldr	r0, [pc, #92]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a26:	f001 fa1d 	bl	8001e64 <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a3a:	f001 fa6d 	bl	8001f18 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a4c:	2036      	movs	r0, #54	@ 0x36
 8000a4e:	f000 f9a1 	bl	8000d94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	@ 0x36
 8000a5e:	f000 f97d 	bl	8000d5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_InitTick+0xf4>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3738      	adds	r7, #56	@ 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <USART2_IRQHandler+0x10>)
 8000ace:	f001 fd41 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000007c 	.word	0x2000007c

08000adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	@ (8000aec <TIM6_DAC_IRQHandler+0x10>)
 8000ae2:	f001 fa89 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000d4 	.word	0x200000d4

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f005 fa9f 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fcf9 	bl	800053c <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b58:	08006284 	.word	0x08006284
  ldr r2, =_sbss
 8000b5c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b60:	20004c48 	.word	0x20004c48

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8d8 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f7ff fefe 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe80 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000011c 	.word	0x2000011c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000011c 	.word	0x2000011c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	@ (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dbe:	f7ff ff09 	bl	8000bd4 <HAL_GetTick>
 8000dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d008      	beq.n	8000de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e052      	b.n	8000e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0216 	bic.w	r2, r2, #22
 8000df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <HAL_DMA_Abort+0x62>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0208 	bic.w	r2, r2, #8
 8000e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0201 	bic.w	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e32:	e013      	b.n	8000e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e34:	f7ff fece 	bl	8000bd4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d90c      	bls.n	8000e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e015      	b.n	8000e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1e4      	bne.n	8000e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e6e:	223f      	movs	r2, #63	@ 0x3f
 8000e70:	409a      	lsls	r2, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d004      	beq.n	8000eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00c      	b.n	8000ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e165      	b.n	80011bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8154 	bne.w	80011b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80ae 	beq.w	80011b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a5c      	ldr	r2, [pc, #368]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b5a      	ldr	r3, [pc, #360]	@ (80011d4 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a58      	ldr	r2, [pc, #352]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	@ (80011dc <HAL_GPIO_Init+0x308>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	@ (80011e0 <HAL_GPIO_Init+0x30c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	@ (80011e4 <HAL_GPIO_Init+0x310>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	@ (80011e8 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x20a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	@ (80011f0 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x206>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	@ (80011f4 <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x202>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00c      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00a      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010da:	2305      	movs	r3, #5
 80010dc:	e008      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010de:	2304      	movs	r3, #4
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e2:	2303      	movs	r3, #3
 80010e4:	e004      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x21c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	f002 0203 	and.w	r2, r2, #3
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	4093      	lsls	r3, r2
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001100:	4935      	ldr	r1, [pc, #212]	@ (80011d8 <HAL_GPIO_Init+0x304>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110e:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001132:	4a31      	ldr	r2, [pc, #196]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800115c:	4a26      	ldr	r2, [pc, #152]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001162:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001186:	4a1c      	ldr	r2, [pc, #112]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <HAL_GPIO_Init+0x324>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3301      	adds	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	f67f ae96 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3724      	adds	r7, #36	@ 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0cc      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90c      	bls.n	800126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b65      	ldr	r3, [pc, #404]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b8      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b59      	ldr	r3, [pc, #356]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a58      	ldr	r2, [pc, #352]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b53      	ldr	r3, [pc, #332]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a52      	ldr	r2, [pc, #328]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b50      	ldr	r3, [pc, #320]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d044      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b47      	ldr	r3, [pc, #284]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b3f      	ldr	r3, [pc, #252]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e067      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4934      	ldr	r1, [pc, #208]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fc58 	bl	8000bd4 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fc54 	bl	8000bd4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e04f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d20c      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b20      	ldr	r3, [pc, #128]	@ (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e032      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4916      	ldr	r1, [pc, #88]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490e      	ldr	r1, [pc, #56]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f887 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	490a      	ldr	r1, [pc, #40]	@ (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fade 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00
 80013ec:	40023800 	.word	0x40023800
 80013f0:	0800625c 	.word	0x0800625c
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <HAL_RCC_GetHCLKFreq+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001418:	f7ff fff0 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0a9b      	lsrs	r3, r3, #10
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	@ (8001438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	0800626c 	.word	0x0800626c

0800143c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001440:	f7ff ffdc 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001444:	4602      	mov	r2, r0
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	0b5b      	lsrs	r3, r3, #13
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	4903      	ldr	r1, [pc, #12]	@ (8001460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	0800626c 	.word	0x0800626c

08001464 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	220f      	movs	r2, #15
 8001472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_RCC_GetClockConfig+0x5c>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_RCC_GetClockConfig+0x5c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <HAL_RCC_GetClockConfig+0x60>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 020f 	and.w	r2, r3, #15
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014cc:	b0ae      	sub	sp, #184	@ 0xb8
 80014ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ee:	4bcb      	ldr	r3, [pc, #812]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	f200 8206 	bhi.w	8001908 <HAL_RCC_GetSysClockFreq+0x440>
 80014fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001539 	.word	0x08001539
 8001508:	08001909 	.word	0x08001909
 800150c:	08001909 	.word	0x08001909
 8001510:	08001909 	.word	0x08001909
 8001514:	08001541 	.word	0x08001541
 8001518:	08001909 	.word	0x08001909
 800151c:	08001909 	.word	0x08001909
 8001520:	08001909 	.word	0x08001909
 8001524:	08001549 	.word	0x08001549
 8001528:	08001909 	.word	0x08001909
 800152c:	08001909 	.word	0x08001909
 8001530:	08001909 	.word	0x08001909
 8001534:	08001739 	.word	0x08001739
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4bb9      	ldr	r3, [pc, #740]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x358>)
 800153a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800153e:	e1e7      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001540:	4bb8      	ldr	r3, [pc, #736]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001546:	e1e3      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001548:	4bb4      	ldr	r3, [pc, #720]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001554:	4bb1      	ldr	r3, [pc, #708]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d071      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001560:	4bae      	ldr	r3, [pc, #696]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	2200      	movs	r2, #0
 8001568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800156c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001586:	4622      	mov	r2, r4
 8001588:	462b      	mov	r3, r5
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0159      	lsls	r1, r3, #5
 8001594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001598:	0150      	lsls	r0, r2, #5
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4621      	mov	r1, r4
 80015a0:	1a51      	subs	r1, r2, r1
 80015a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80015a4:	4629      	mov	r1, r5
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015b8:	4649      	mov	r1, r9
 80015ba:	018b      	lsls	r3, r1, #6
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c2:	4641      	mov	r1, r8
 80015c4:	018a      	lsls	r2, r1, #6
 80015c6:	4641      	mov	r1, r8
 80015c8:	1a51      	subs	r1, r2, r1
 80015ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015cc:	4649      	mov	r1, r9
 80015ce:	eb63 0301 	sbc.w	r3, r3, r1
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015e0:	4649      	mov	r1, r9
 80015e2:	00cb      	lsls	r3, r1, #3
 80015e4:	4641      	mov	r1, r8
 80015e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ea:	4641      	mov	r1, r8
 80015ec:	00ca      	lsls	r2, r1, #3
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	4622      	mov	r2, r4
 80015f6:	189b      	adds	r3, r3, r2
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80015fa:	462b      	mov	r3, r5
 80015fc:	460a      	mov	r2, r1
 80015fe:	eb42 0303 	adc.w	r3, r2, r3
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001610:	4629      	mov	r1, r5
 8001612:	024b      	lsls	r3, r1, #9
 8001614:	4621      	mov	r1, r4
 8001616:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800161a:	4621      	mov	r1, r4
 800161c:	024a      	lsls	r2, r1, #9
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001626:	2200      	movs	r2, #0
 8001628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800162c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001630:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001634:	f7fe fdec 	bl	8000210 <__aeabi_uldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4613      	mov	r3, r2
 800163e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001642:	e067      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001644:	4b75      	ldr	r3, [pc, #468]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	2200      	movs	r2, #0
 800164c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001650:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001654:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800165e:	2300      	movs	r3, #0
 8001660:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001662:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0159      	lsls	r1, r3, #5
 8001674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001678:	0150      	lsls	r0, r2, #5
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4621      	mov	r1, r4
 8001680:	1a51      	subs	r1, r2, r1
 8001682:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001684:	4629      	mov	r1, r5
 8001686:	eb63 0301 	sbc.w	r3, r3, r1
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001698:	4649      	mov	r1, r9
 800169a:	018b      	lsls	r3, r1, #6
 800169c:	4641      	mov	r1, r8
 800169e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a2:	4641      	mov	r1, r8
 80016a4:	018a      	lsls	r2, r1, #6
 80016a6:	4641      	mov	r1, r8
 80016a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ac:	4649      	mov	r1, r9
 80016ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016c6:	4692      	mov	sl, r2
 80016c8:	469b      	mov	fp, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	eb1a 0303 	adds.w	r3, sl, r3
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	462b      	mov	r3, r5
 80016d4:	eb4b 0303 	adc.w	r3, fp, r3
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016e6:	4629      	mov	r1, r5
 80016e8:	028b      	lsls	r3, r1, #10
 80016ea:	4621      	mov	r1, r4
 80016ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f0:	4621      	mov	r1, r4
 80016f2:	028a      	lsls	r2, r1, #10
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016fc:	2200      	movs	r2, #0
 80016fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001700:	677a      	str	r2, [r7, #116]	@ 0x74
 8001702:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001706:	f7fe fd83 	bl	8000210 <__aeabi_uldivmod>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4613      	mov	r3, r2
 8001710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001714:	4b41      	ldr	r3, [pc, #260]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	3301      	adds	r3, #1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800172a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001736:	e0eb      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001744:	4b35      	ldr	r3, [pc, #212]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d06b      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b32      	ldr	r3, [pc, #200]	@ (800181c <HAL_RCC_GetSysClockFreq+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800175a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800175c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800175e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001762:	663b      	str	r3, [r7, #96]	@ 0x60
 8001764:	2300      	movs	r3, #0
 8001766:	667b      	str	r3, [r7, #100]	@ 0x64
 8001768:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800176c:	4622      	mov	r2, r4
 800176e:	462b      	mov	r3, r5
 8001770:	f04f 0000 	mov.w	r0, #0
 8001774:	f04f 0100 	mov.w	r1, #0
 8001778:	0159      	lsls	r1, r3, #5
 800177a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177e:	0150      	lsls	r0, r2, #5
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4621      	mov	r1, r4
 8001786:	1a51      	subs	r1, r2, r1
 8001788:	61b9      	str	r1, [r7, #24]
 800178a:	4629      	mov	r1, r5
 800178c:	eb63 0301 	sbc.w	r3, r3, r1
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800179e:	4659      	mov	r1, fp
 80017a0:	018b      	lsls	r3, r1, #6
 80017a2:	4651      	mov	r1, sl
 80017a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a8:	4651      	mov	r1, sl
 80017aa:	018a      	lsls	r2, r1, #6
 80017ac:	4651      	mov	r1, sl
 80017ae:	ebb2 0801 	subs.w	r8, r2, r1
 80017b2:	4659      	mov	r1, fp
 80017b4:	eb63 0901 	sbc.w	r9, r3, r1
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017cc:	4690      	mov	r8, r2
 80017ce:	4699      	mov	r9, r3
 80017d0:	4623      	mov	r3, r4
 80017d2:	eb18 0303 	adds.w	r3, r8, r3
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	462b      	mov	r3, r5
 80017da:	eb49 0303 	adc.w	r3, r9, r3
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017ec:	4629      	mov	r1, r5
 80017ee:	024b      	lsls	r3, r1, #9
 80017f0:	4621      	mov	r1, r4
 80017f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f6:	4621      	mov	r1, r4
 80017f8:	024a      	lsls	r2, r1, #9
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001802:	2200      	movs	r2, #0
 8001804:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001806:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001808:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800180c:	f7fe fd00 	bl	8000210 <__aeabi_uldivmod>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4613      	mov	r3, r2
 8001816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800181a:	e065      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x420>
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400
 8001824:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001828:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x458>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	2200      	movs	r2, #0
 8001830:	4618      	mov	r0, r3
 8001832:	4611      	mov	r1, r2
 8001834:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50
 800183a:	2300      	movs	r3, #0
 800183c:	657b      	str	r3, [r7, #84]	@ 0x54
 800183e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001842:	4642      	mov	r2, r8
 8001844:	464b      	mov	r3, r9
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	0159      	lsls	r1, r3, #5
 8001850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001854:	0150      	lsls	r0, r2, #5
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4641      	mov	r1, r8
 800185c:	1a51      	subs	r1, r2, r1
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	4649      	mov	r1, r9
 8001862:	eb63 0301 	sbc.w	r3, r3, r1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001874:	4659      	mov	r1, fp
 8001876:	018b      	lsls	r3, r1, #6
 8001878:	4651      	mov	r1, sl
 800187a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187e:	4651      	mov	r1, sl
 8001880:	018a      	lsls	r2, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	1a54      	subs	r4, r2, r1
 8001886:	4659      	mov	r1, fp
 8001888:	eb63 0501 	sbc.w	r5, r3, r1
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	00eb      	lsls	r3, r5, #3
 8001896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189a:	00e2      	lsls	r2, r4, #3
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	4643      	mov	r3, r8
 80018a2:	18e3      	adds	r3, r4, r3
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	464b      	mov	r3, r9
 80018a8:	eb45 0303 	adc.w	r3, r5, r3
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ba:	4629      	mov	r1, r5
 80018bc:	028b      	lsls	r3, r1, #10
 80018be:	4621      	mov	r1, r4
 80018c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c4:	4621      	mov	r1, r4
 80018c6:	028a      	lsls	r2, r1, #10
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018d0:	2200      	movs	r2, #0
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018da:	f7fe fc99 	bl	8000210 <__aeabi_uldivmod>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4613      	mov	r3, r2
 80018e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0f1b      	lsrs	r3, r3, #28
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80018f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001906:	e003      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x45c>)
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800190e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001910:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001914:	4618      	mov	r0, r3
 8001916:	37b8      	adds	r7, #184	@ 0xb8
 8001918:	46bd      	mov	sp, r7
 800191a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	00f42400 	.word	0x00f42400

08001928 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e28d      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8083 	beq.w	8001a4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001948:	4b94      	ldr	r3, [pc, #592]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d019      	beq.n	8001988 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001954:	4b91      	ldr	r3, [pc, #580]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
        || \
 800195c:	2b08      	cmp	r3, #8
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001960:	4b8e      	ldr	r3, [pc, #568]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800196c:	d00c      	beq.n	8001988 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b88      	ldr	r3, [pc, #544]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b84      	ldr	r3, [pc, #528]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x124>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d157      	bne.n	8001a4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e25a      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x90>
 80019aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7b      	ldr	r2, [pc, #492]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xcc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0xb4>
 80019c2:	4b76      	ldr	r3, [pc, #472]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a75      	ldr	r2, [pc, #468]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b73      	ldr	r3, [pc, #460]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a72      	ldr	r2, [pc, #456]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xcc>
 80019dc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a6b      	ldr	r2, [pc, #428]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f8ea 	bl	8000bd4 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff f8e6 	bl	8000bd4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	@ 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e21f      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b61      	ldr	r3, [pc, #388]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xdc>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f8d6 	bl	8000bd4 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f8d2 	bl	8000bd4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e20b      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b57      	ldr	r3, [pc, #348]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x104>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d06f      	beq.n	8001b3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a5a:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d017      	beq.n	8001a96 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b44      	ldr	r3, [pc, #272]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x186>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1d3      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4937      	ldr	r1, [pc, #220]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e03a      	b.n	8001b3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <HAL_RCC_OscConfig+0x278>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f87f 	bl	8000bd4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff f87b 	bl	8000bd4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1b4      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4925      	ldr	r1, [pc, #148]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <HAL_RCC_OscConfig+0x278>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff f85e 	bl	8000bd4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f85a 	bl	8000bd4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e193      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d036      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d016      	beq.n	8001b7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b54:	f7ff f83e 	bl	8000bd4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7ff f83a 	bl	8000bd4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e173      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x234>
 8001b7a:	e01b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff f827 	bl	8000bd4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	e00e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff f823 	bl	8000bd4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d907      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e15c      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470000 	.word	0x42470000
 8001ba4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ea      	bne.n	8001b8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8097 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b83      	ldr	r3, [pc, #524]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b79      	ldr	r3, [pc, #484]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b76      	ldr	r3, [pc, #472]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a75      	ldr	r2, [pc, #468]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b0>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe ffe3 	bl	8000bd4 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7fe ffdf 	bl	8000bd4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e118      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x31e>
 8001c38:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3c:	4a65      	ldr	r2, [pc, #404]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c44:	e01c      	b.n	8001c80 <HAL_RCC_OscConfig+0x358>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x340>
 8001c4e:	4b61      	ldr	r3, [pc, #388]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	4a60      	ldr	r2, [pc, #384]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0x358>
 8001c68:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a59      	ldr	r2, [pc, #356]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c74:	4b57      	ldr	r3, [pc, #348]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c78:	4a56      	ldr	r2, [pc, #344]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	f023 0304 	bic.w	r3, r3, #4
 8001c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7fe ffa4 	bl	8000bd4 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c90:	f7fe ffa0 	bl	8000bd4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e0d7      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ee      	beq.n	8001c90 <HAL_RCC_OscConfig+0x368>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7fe ff8e 	bl	8000bd4 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe ff8a 	bl	8000bd4 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0c1      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ee      	bne.n	8001cbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80ad 	beq.w	8001e54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d060      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d145      	bne.n	8001d9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <HAL_RCC_OscConfig+0x4b4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff5e 	bl	8000bd4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe ff5a 	bl	8000bd4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e093      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	019b      	lsls	r3, r3, #6
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	071b      	lsls	r3, r3, #28
 8001d66:	491b      	ldr	r1, [pc, #108]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x4b4>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7fe ff2f 	bl	8000bd4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe ff2b 	bl	8000bd4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e064      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x452>
 8001d98:	e05c      	b.n	8001e54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_RCC_OscConfig+0x4b4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe ff18 	bl	8000bd4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe ff14 	bl	8000bd4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04d      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x480>
 8001dc6:	e045      	b.n	8001e54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e040      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_RCC_OscConfig+0x538>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d030      	beq.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d129      	bne.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d122      	bne.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e10:	4013      	ands	r3, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d119      	bne.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10f      	bne.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e041      	b.n	8001efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f839 	bl	8001f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 f9c0 	bl	8002228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e04e      	b.n	8001fce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5a:	d01d      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_TIM_Base_Start_IT+0xd4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x80>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a18      	ldr	r2, [pc, #96]	@ (8001ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d010      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	e007      	b.n	8001fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40001800 	.word	0x40001800

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01b      	beq.n	800205c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8d2 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c4 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f8d5 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8ac 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f89e 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8af 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0208 	mvn.w	r2, #8
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2204      	movs	r2, #4
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f886 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f878 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f889 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d020      	beq.n	8002140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0210 	mvn.w	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2208      	movs	r2, #8
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f860 	bl	80021ec <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f852 	bl	80021d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f863 	bl	8002200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fb86 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002174:	2b00      	cmp	r3, #0
 8002176:	d007      	beq.n	8002188 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f900 	bl	8002388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f834 	bl	8002214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0220 	mvn.w	r2, #32
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8d2 	bl	8002374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a43      	ldr	r2, [pc, #268]	@ (8002348 <TIM_Base_SetConfig+0x120>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002246:	d00f      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a40      	ldr	r2, [pc, #256]	@ (800234c <TIM_Base_SetConfig+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00b      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3f      	ldr	r2, [pc, #252]	@ (8002350 <TIM_Base_SetConfig+0x128>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3e      	ldr	r2, [pc, #248]	@ (8002354 <TIM_Base_SetConfig+0x12c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3d      	ldr	r2, [pc, #244]	@ (8002358 <TIM_Base_SetConfig+0x130>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800226e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a32      	ldr	r2, [pc, #200]	@ (8002348 <TIM_Base_SetConfig+0x120>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d02b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002288:	d027      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <TIM_Base_SetConfig+0x124>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d023      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <TIM_Base_SetConfig+0x128>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2d      	ldr	r2, [pc, #180]	@ (8002354 <TIM_Base_SetConfig+0x12c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002358 <TIM_Base_SetConfig+0x130>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d017      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2b      	ldr	r2, [pc, #172]	@ (800235c <TIM_Base_SetConfig+0x134>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002360 <TIM_Base_SetConfig+0x138>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00f      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a29      	ldr	r2, [pc, #164]	@ (8002364 <TIM_Base_SetConfig+0x13c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a28      	ldr	r2, [pc, #160]	@ (8002368 <TIM_Base_SetConfig+0x140>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a27      	ldr	r2, [pc, #156]	@ (800236c <TIM_Base_SetConfig+0x144>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a26      	ldr	r2, [pc, #152]	@ (8002370 <TIM_Base_SetConfig+0x148>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <TIM_Base_SetConfig+0x120>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0xf2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a10      	ldr	r2, [pc, #64]	@ (8002358 <TIM_Base_SetConfig+0x130>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d103      	bne.n	8002322 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	601a      	str	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40010000 	.word	0x40010000
 800234c:	40000400 	.word	0x40000400
 8002350:	40000800 	.word	0x40000800
 8002354:	40000c00 	.word	0x40000c00
 8002358:	40010400 	.word	0x40010400
 800235c:	40014000 	.word	0x40014000
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800
 8002368:	40001800 	.word	0x40001800
 800236c:	40001c00 	.word	0x40001c00
 8002370:	40002000 	.word	0x40002000

08002374 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e042      	b.n	8002434 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fa98 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	@ 0x24
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd7f 	bl	8002ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	d175      	bne.n	8002548 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Transmit+0x2c>
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e06e      	b.n	800254a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	@ 0x21
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800247a:	f7fe fbab 	bl	8000bd4 <HAL_GetTick>
 800247e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002494:	d108      	bne.n	80024a8 <HAL_UART_Transmit+0x6c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	e003      	b.n	80024b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024b0:	e02e      	b.n	8002510 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fb1d 	bl	8002afc <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e03a      	b.n	800254a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3302      	adds	r3, #2
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	e007      	b.n	8002502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3301      	adds	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1cb      	bne.n	80024b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	2140      	movs	r1, #64	@ 0x40
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fae9 	bl	8002afc <UART_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e006      	b.n	800254a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ba      	sub	sp, #232	@ 0xe8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
 80025a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fbd7 	bl	8002d66 <UART_Receive_IT>
      return;
 80025b8:	e273      	b.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80de 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
 80025c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80d1 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
 8002656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 820a 	beq.w	8002a98 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fb62 	bl	8002d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b40      	cmp	r3, #64	@ 0x40
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_UART_IRQHandler+0x17a>
 80026c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04f      	beq.n	800276e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa6d 	bl	8002bae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026de:	2b40      	cmp	r3, #64	@ 0x40
 80026e0:	d141      	bne.n	8002766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800270e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800271a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d9      	bne.n	80026e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273a:	4a8a      	ldr	r2, [pc, #552]	@ (8002964 <HAL_UART_IRQHandler+0x410>)
 800273c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fba4 	bl	8000e90 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e00e      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9b6 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	e00a      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f9b2 	bl	8002ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	e006      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f9ae 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800277a:	e18d      	b.n	8002a98 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	bf00      	nop
    return;
 800277e:	e18b      	b.n	8002a98 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 8167 	bne.w	8002a58 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8160 	beq.w	8002a58 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8159 	beq.w	8002a58 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	f040 80ce 	bne.w	8002968 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a9 	beq.w	8002934 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f080 80a2 	bcs.w	8002934 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002802:	f000 8088 	beq.w	8002916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1d9      	bne.n	8002806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002876:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800287a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800287e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e1      	bne.n	8002852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3314      	adds	r3, #20
 8002894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002898:	e853 3f00 	ldrex	r3, [r3]
 800289c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800289e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3314      	adds	r3, #20
 80028ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e3      	bne.n	800288e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80028f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e3      	bne.n	80028d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fa4d 	bl	8000db0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002924:	b29b      	uxth	r3, r3
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8d9 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002932:	e0b3      	b.n	8002a9c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 80ad 	bne.w	8002a9c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294c:	f040 80a6 	bne.w	8002a9c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8c1 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
      return;
 8002962:	e09b      	b.n	8002a9c <HAL_UART_IRQHandler+0x548>
 8002964:	08002c75 	.word	0x08002c75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002970:	b29b      	uxth	r3, r3
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 808e 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8089 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80029b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80029b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e3      	bne.n	800298e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	623b      	str	r3, [r7, #32]
   return(result);
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e3      	bne.n	80029c6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0310 	bic.w	r3, r3, #16
 8002a22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a30:	61fa      	str	r2, [r7, #28]
 8002a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a34:	69b9      	ldr	r1, [r7, #24]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	e841 2300 	strex	r3, r2, [r1]
 8002a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e3      	bne.n	8002a0c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f847 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a56:	e023      	b.n	8002aa0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <HAL_UART_IRQHandler+0x524>
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f910 	bl	8002c96 <UART_Transmit_IT>
    return;
 8002a76:	e014      	b.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00e      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f950 	bl	8002d36 <UART_EndTransmit_IT>
    return;
 8002a96:	e004      	b.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
    return;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_UART_IRQHandler+0x54e>
      return;
 8002aa0:	bf00      	nop
  }
}
 8002aa2:	37e8      	adds	r7, #232	@ 0xe8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0c:	e03b      	b.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b14:	d037      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe f85d 	bl	8000bd4 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e03a      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d023      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	d020      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b40      	cmp	r3, #64	@ 0x40
 8002b48:	d01d      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d116      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f81d 	bl	8002bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2208      	movs	r2, #8
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d0b4      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b095      	sub	sp, #84	@ 0x54
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	330c      	adds	r3, #12
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	330c      	adds	r3, #12
 8002bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	e853 3f00 	ldrex	r3, [r3]
 8002bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e5      	bne.n	8002bea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d119      	bne.n	8002c5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f023 0310 	bic.w	r3, r3, #16
 8002c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c46:	61ba      	str	r2, [r7, #24]
 8002c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	6979      	ldr	r1, [r7, #20]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	613b      	str	r3, [r7, #16]
   return(result);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e5      	bne.n	8002c26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c68:	bf00      	nop
 8002c6a:	3754      	adds	r7, #84	@ 0x54
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff ff21 	bl	8002ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b21      	cmp	r3, #33	@ 0x21
 8002ca8:	d13e      	bne.n	8002d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb2:	d114      	bne.n	8002cde <UART_Transmit_IT+0x48>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d110      	bne.n	8002cde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	1c9a      	adds	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	e008      	b.n	8002cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6211      	str	r1, [r2, #32]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10f      	bne.n	8002d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fea6 	bl	8002aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08c      	sub	sp, #48	@ 0x30
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b22      	cmp	r3, #34	@ 0x22
 8002d80:	f040 80aa 	bne.w	8002ed8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8c:	d115      	bne.n	8002dba <UART_Receive_IT+0x54>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d111      	bne.n	8002dba <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	1c9a      	adds	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002db8:	e024      	b.n	8002e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc8:	d007      	beq.n	8002dda <UART_Receive_IT+0x74>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <UART_Receive_IT+0x82>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e008      	b.n	8002dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4619      	mov	r1, r3
 8002e12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d15d      	bne.n	8002ed4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0220 	bic.w	r2, r2, #32
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d135      	bne.n	8002eca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	613b      	str	r3, [r7, #16]
   return(result);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 0310 	bic.w	r3, r3, #16
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e84:	623a      	str	r2, [r7, #32]
 8002e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	69f9      	ldr	r1, [r7, #28]
 8002e8a:	6a3a      	ldr	r2, [r7, #32]
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d10a      	bne.n	8002ebc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fe0e 	bl	8002ae4 <HAL_UARTEx_RxEventCallback>
 8002ec8:	e002      	b.n	8002ed0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fdf6 	bl	8002abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e002      	b.n	8002eda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3730      	adds	r7, #48	@ 0x30
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b0c0      	sub	sp, #256	@ 0x100
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	ea40 0301 	orr.w	r3, r0, r1
 8002f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f3c:	f021 010c 	bic.w	r1, r1, #12
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5e:	6999      	ldr	r1, [r3, #24]
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	ea40 0301 	orr.w	r3, r0, r1
 8002f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b8f      	ldr	r3, [pc, #572]	@ (80031b0 <UART_SetConfig+0x2cc>)
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0xa0>
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80031b4 <UART_SetConfig+0x2d0>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d104      	bne.n	8002f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7fe fa5a 	bl	800143c <HAL_RCC_GetPCLK2Freq>
 8002f88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f8c:	e003      	b.n	8002f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f8e:	f7fe fa41 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8002f92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa0:	f040 810c 	bne.w	80031bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	1891      	adds	r1, r2, r2
 8002fbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fbe:	415b      	adcs	r3, r3
 8002fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	eb12 0801 	adds.w	r8, r2, r1
 8002fcc:	4629      	mov	r1, r5
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe6:	4690      	mov	r8, r2
 8002fe8:	4699      	mov	r9, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	eb18 0303 	adds.w	r3, r8, r3
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800300a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800300e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003012:	460b      	mov	r3, r1
 8003014:	18db      	adds	r3, r3, r3
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
 8003018:	4613      	mov	r3, r2
 800301a:	eb42 0303 	adc.w	r3, r2, r3
 800301e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003028:	f7fd f8f2 	bl	8000210 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b61      	ldr	r3, [pc, #388]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003044:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003054:	415b      	adcs	r3, r3
 8003056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800305c:	4641      	mov	r1, r8
 800305e:	eb12 0a01 	adds.w	sl, r2, r1
 8003062:	4649      	mov	r1, r9
 8003064:	eb43 0b01 	adc.w	fp, r3, r1
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	4692      	mov	sl, r2
 800307e:	469b      	mov	fp, r3
 8003080:	4643      	mov	r3, r8
 8003082:	eb1a 0303 	adds.w	r3, sl, r3
 8003086:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800308a:	464b      	mov	r3, r9
 800308c:	eb4b 0303 	adc.w	r3, fp, r3
 8003090:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030be:	f7fd f8a7 	bl	8000210 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2301 	umull	r2, r3, r3, r1
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2264      	movs	r2, #100	@ 0x64
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	1acb      	subs	r3, r1, r3
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030de:	4b36      	ldr	r3, [pc, #216]	@ (80031b8 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030ec:	441c      	add	r4, r3
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003108:	415b      	adcs	r3, r3
 800310a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6339      	str	r1, [r7, #48]	@ 0x30
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003144:	464b      	mov	r3, r9
 8003146:	460a      	mov	r2, r1
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800315c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800317a:	f7fd f849 	bl	8000210 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003184:	fba3 1302 	umull	r1, r3, r3, r2
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	2164      	movs	r1, #100	@ 0x64
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	3332      	adds	r3, #50	@ 0x32
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <UART_SetConfig+0x2d4>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4422      	add	r2, r4
 80031aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ac:	e106      	b.n	80033bc <UART_SetConfig+0x4d8>
 80031ae:	bf00      	nop
 80031b0:	40011000 	.word	0x40011000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	6239      	str	r1, [r7, #32]
 80031d6:	415b      	adcs	r3, r3
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031de:	4641      	mov	r1, r8
 80031e0:	1854      	adds	r4, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0501 	adc.w	r5, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	00eb      	lsls	r3, r5, #3
 80031f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	4614      	mov	r4, r2
 80031fa:	461d      	mov	r5, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	18e3      	adds	r3, r4, r3
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003204:	464b      	mov	r3, r9
 8003206:	eb45 0303 	adc.w	r3, r5, r3
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800321a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800322a:	4629      	mov	r1, r5
 800322c:	008b      	lsls	r3, r1, #2
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003234:	4621      	mov	r1, r4
 8003236:	008a      	lsls	r2, r1, #2
 8003238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800323c:	f7fc ffe8 	bl	8000210 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4b60      	ldr	r3, [pc, #384]	@ (80033c8 <UART_SetConfig+0x4e4>)
 8003246:	fba3 2302 	umull	r2, r3, r3, r2
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	011c      	lsls	r4, r3, #4
 800324e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003258:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800325c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	1891      	adds	r1, r2, r2
 8003266:	61b9      	str	r1, [r7, #24]
 8003268:	415b      	adcs	r3, r3
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	4641      	mov	r1, r8
 8003272:	1851      	adds	r1, r2, r1
 8003274:	6139      	str	r1, [r7, #16]
 8003276:	4649      	mov	r1, r9
 8003278:	414b      	adcs	r3, r1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003288:	4659      	mov	r1, fp
 800328a:	00cb      	lsls	r3, r1, #3
 800328c:	4651      	mov	r1, sl
 800328e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003292:	4651      	mov	r1, sl
 8003294:	00ca      	lsls	r2, r1, #3
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	4603      	mov	r3, r0
 800329c:	4642      	mov	r2, r8
 800329e:	189b      	adds	r3, r3, r2
 80032a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032c8:	4649      	mov	r1, r9
 80032ca:	008b      	lsls	r3, r1, #2
 80032cc:	4641      	mov	r1, r8
 80032ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d2:	4641      	mov	r1, r8
 80032d4:	008a      	lsls	r2, r1, #2
 80032d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032da:	f7fc ff99 	bl	8000210 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b38      	ldr	r3, [pc, #224]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	@ 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3332      	adds	r3, #50	@ 0x32
 80032f8:	4a33      	ldr	r2, [pc, #204]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	673b      	str	r3, [r7, #112]	@ 0x70
 800330e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003310:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	415b      	adcs	r3, r3
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003356:	464b      	mov	r3, r9
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	663b      	str	r3, [r7, #96]	@ 0x60
 800336a:	667a      	str	r2, [r7, #100]	@ 0x64
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003378:	4649      	mov	r1, r9
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	4641      	mov	r1, r8
 800337e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003382:	4641      	mov	r1, r8
 8003384:	008a      	lsls	r2, r1, #2
 8003386:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800338a:	f7fc ff41 	bl	8000210 <__aeabi_uldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <UART_SetConfig+0x4e4>)
 8003394:	fba3 1302 	umull	r1, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2164      	movs	r1, #100	@ 0x64
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	@ 0x32
 80033a6:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <UART_SetConfig+0x4e4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4422      	add	r2, r4
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <__NVIC_SetPriority>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	@ (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	@ (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <SysTick_Handler+0x1c>)
 8003426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003428:	f001 fd46 	bl	8004eb8 <xTaskGetSchedulerState>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003432:	f002 fb41 	bl	8005ab8 <xPortSysTickHandler>
  }
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010

08003440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003444:	2100      	movs	r1, #0
 8003446:	f06f 0004 	mvn.w	r0, #4
 800344a:	f7ff ffbf 	bl	80033cc <__NVIC_SetPriority>
#endif
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800345a:	f3ef 8305 	mrs	r3, IPSR
 800345e:	603b      	str	r3, [r7, #0]
  return(result);
 8003460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003466:	f06f 0305 	mvn.w	r3, #5
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	e00c      	b.n	8003488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <osKernelInitialize+0x44>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <osKernelInitialize+0x44>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	e002      	b.n	8003488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000120 	.word	0x20000120

0800349c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a2:	f3ef 8305 	mrs	r3, IPSR
 80034a6:	603b      	str	r3, [r7, #0]
  return(result);
 80034a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80034ae:	f06f 0305 	mvn.w	r3, #5
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	e010      	b.n	80034d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034b6:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <osKernelStart+0x48>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d109      	bne.n	80034d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034be:	f7ff ffbf 	bl	8003440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034c2:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <osKernelStart+0x48>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034c8:	f001 f892 	bl	80045f0 <vTaskStartScheduler>
      stat = osOK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	e002      	b.n	80034d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034d8:	687b      	ldr	r3, [r7, #4]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000120 	.word	0x20000120

080034e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08e      	sub	sp, #56	@ 0x38
 80034ec:	af04      	add	r7, sp, #16
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034f8:	f3ef 8305 	mrs	r3, IPSR
 80034fc:	617b      	str	r3, [r7, #20]
  return(result);
 80034fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003500:	2b00      	cmp	r3, #0
 8003502:	d17e      	bne.n	8003602 <osThreadNew+0x11a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d07b      	beq.n	8003602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800350e:	2318      	movs	r3, #24
 8003510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800351a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d045      	beq.n	80035ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <osThreadNew+0x48>
        name = attr->name;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <osThreadNew+0x6e>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b38      	cmp	r3, #56	@ 0x38
 8003548:	d805      	bhi.n	8003556 <osThreadNew+0x6e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <osThreadNew+0x72>
        return (NULL);
 8003556:	2300      	movs	r3, #0
 8003558:	e054      	b.n	8003604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <osThreadNew+0xa8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2ba7      	cmp	r3, #167	@ 0xa7
 8003578:	d90a      	bls.n	8003590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <osThreadNew+0xa8>
        mem = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e010      	b.n	80035b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <osThreadNew+0xca>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <osThreadNew+0xca>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <osThreadNew+0xca>
          mem = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e001      	b.n	80035b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d110      	bne.n	80035da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c0:	9202      	str	r2, [sp, #8]
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fe1a 	bl	8004208 <xTaskCreateStatic>
 80035d4:	4603      	mov	r3, r0
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	e013      	b.n	8003602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d110      	bne.n	8003602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fe68 	bl	80042c8 <xTaskCreate>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <osThreadNew+0x11a>
            hTask = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003602:	693b      	ldr	r3, [r7, #16]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3728      	adds	r7, #40	@ 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003614:	f3ef 8305 	mrs	r3, IPSR
 8003618:	60bb      	str	r3, [r7, #8]
  return(result);
 800361a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <osDelay+0x1c>
    stat = osErrorISR;
 8003620:	f06f 0305 	mvn.w	r3, #5
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e007      	b.n	8003638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 ffa6 	bl	8004584 <vTaskDelay>
    }
  }

  return (stat);
 8003638:	68fb      	ldr	r3, [r7, #12]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <vApplicationGetIdleTaskMemory+0x2c>)
 8003654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <vApplicationGetIdleTaskMemory+0x30>)
 800365a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000124 	.word	0x20000124
 8003674:	200001cc 	.word	0x200001cc

08003678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a07      	ldr	r2, [pc, #28]	@ (80036a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a06      	ldr	r2, [pc, #24]	@ (80036a8 <vApplicationGetTimerTaskMemory+0x30>)
 800368e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	601a      	str	r2, [r3, #0]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	200003cc 	.word	0x200003cc
 80036a8:	20000474 	.word	0x20000474

080036ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f103 0208 	add.w	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f103 0208 	add.w	r2, r3, #8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f103 0208 	add.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003764:	d103      	bne.n	800376e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e00c      	b.n	8003788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3308      	adds	r3, #8
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e002      	b.n	800377c <vListInsert+0x2e>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d2f6      	bcs.n	8003776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6852      	ldr	r2, [r2, #4]
 80037e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d103      	bne.n	80037f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003840:	f002 f8aa 	bl	8005998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	441a      	add	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	3b01      	subs	r3, #1
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	22ff      	movs	r2, #255	@ 0xff
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	22ff      	movs	r2, #255	@ 0xff
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d114      	bne.n	80038c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01a      	beq.n	80038d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3310      	adds	r3, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f942 	bl	8004b2c <xTaskRemoveFromEventList>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <xQueueGenericReset+0xd0>)
 80038b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	e009      	b.n	80038d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3310      	adds	r3, #16
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fef1 	bl	80036ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3324      	adds	r3, #36	@ 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff feec 	bl	80036ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038d4:	f002 f892 	bl	80059fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038d8:	2301      	movs	r3, #1
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <xQueueGenericCreateStatic+0x56>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <xQueueGenericCreateStatic+0x5a>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericCreateStatic+0x5c>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xQueueGenericCreateStatic+0x84>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xQueueGenericCreateStatic+0x88>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <xQueueGenericCreateStatic+0x8a>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61fb      	str	r3, [r7, #28]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800398e:	2350      	movs	r3, #80	@ 0x50
 8003990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b50      	cmp	r3, #80	@ 0x50
 8003996:	d00b      	beq.n	80039b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f805 	bl	80039e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80039da:	4618      	mov	r0, r3
 80039dc:	3730      	adds	r7, #48	@ 0x30
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e002      	b.n	8003a04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a10:	2101      	movs	r1, #1
 8003a12:	69b8      	ldr	r0, [r7, #24]
 8003a14:	f7ff fefe 	bl	8003814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08e      	sub	sp, #56	@ 0x38
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a36:	2300      	movs	r3, #0
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <xQueueGenericSend+0x34>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSend+0x42>
 8003a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <xQueueGenericSend+0x46>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueGenericSend+0x48>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <xQueueGenericSend+0x64>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSend+0x72>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSend+0x76>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSend+0x78>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <xQueueGenericSend+0x94>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003abc:	f001 f9fc 	bl	8004eb8 <xTaskGetSchedulerState>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <xQueueGenericSend+0xa4>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <xQueueGenericSend+0xa8>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <xQueueGenericSend+0xaa>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <xQueueGenericSend+0xc6>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	61fb      	str	r3, [r7, #28]
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	e7fd      	b.n	8003aea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003aee:	f001 ff53 	bl	8005998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <xQueueGenericSend+0xdc>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d129      	bne.n	8003b58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b0a:	f000 fa0f 	bl	8003f2c <prvCopyDataToQueue>
 8003b0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	3324      	adds	r3, #36	@ 0x24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 f805 	bl	8004b2c <xTaskRemoveFromEventList>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b28:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <xQueueGenericSend+0x200>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	e00a      	b.n	8003b50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b40:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <xQueueGenericSend+0x200>)
 8003b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b50:	f001 ff54 	bl	80059fc <vPortExitCritical>
				return pdPASS;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e063      	b.n	8003c20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b5e:	f001 ff4d 	bl	80059fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e05c      	b.n	8003c20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 f83f 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b7a:	f001 ff3f 	bl	80059fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b7e:	f000 fda7 	bl	80046d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b82:	f001 ff09 	bl	8005998 <vPortEnterCritical>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b92:	d103      	bne.n	8003b9c <xQueueGenericSend+0x174>
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ba2:	b25b      	sxtb	r3, r3
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba8:	d103      	bne.n	8003bb2 <xQueueGenericSend+0x18a>
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bb2:	f001 ff23 	bl	80059fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bb6:	1d3a      	adds	r2, r7, #4
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f82e 	bl	8004c20 <xTaskCheckForTimeOut>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d124      	bne.n	8003c14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bcc:	f000 faa6 	bl	800411c <prvIsQueueFull>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	3310      	adds	r3, #16
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 ff52 	bl	8004a88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003be6:	f000 fa31 	bl	800404c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bea:	f000 fd7f 	bl	80046ec <xTaskResumeAll>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f af7c 	bne.w	8003aee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <xQueueGenericSend+0x200>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	e772      	b.n	8003aee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c0a:	f000 fa1f 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c0e:	f000 fd6d 	bl	80046ec <xTaskResumeAll>
 8003c12:	e76c      	b.n	8003aee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c16:	f000 fa19 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c1a:	f000 fd67 	bl	80046ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3738      	adds	r7, #56	@ 0x38
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b090      	sub	sp, #64	@ 0x40
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c56:	bf00      	nop
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <xQueueGenericSendFromISR+0x3e>
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <xQueueGenericSendFromISR+0x42>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <xQueueGenericSendFromISR+0x44>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d103      	bne.n	8003c9a <xQueueGenericSendFromISR+0x6e>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <xQueueGenericSendFromISR+0x72>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueGenericSendFromISR+0x74>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	623b      	str	r3, [r7, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cbc:	f001 ff4c 	bl	8005b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	61fa      	str	r2, [r7, #28]
 8003cd6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <xQueueGenericSendFromISR+0xc2>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d12f      	bne.n	8003d4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d04:	f000 f912 	bl	8003f2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d10:	d112      	bne.n	8003d38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	3324      	adds	r3, #36	@ 0x24
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ff04 	bl	8004b2c <xTaskRemoveFromEventList>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00e      	beq.n	8003d48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	b25a      	sxtb	r2, r3
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d4c:	e001      	b.n	8003d52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3740      	adds	r7, #64	@ 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	@ 0x30
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <xQueueReceive+0x32>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	623b      	str	r3, [r7, #32]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <xQueueReceive+0x40>
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueReceive+0x44>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueReceive+0x46>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xQueueReceive+0x62>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61fb      	str	r3, [r7, #28]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dca:	f001 f875 	bl	8004eb8 <xTaskGetSchedulerState>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <xQueueReceive+0x72>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <xQueueReceive+0x76>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueReceive+0x78>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueReceive+0x94>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	61bb      	str	r3, [r7, #24]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dfc:	f001 fdcc 	bl	8005998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01f      	beq.n	8003e4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e10:	f000 f8f6 	bl	8004000 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00f      	beq.n	8003e44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	3310      	adds	r3, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fe7f 	bl	8004b2c <xTaskRemoveFromEventList>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e34:	4b3c      	ldr	r3, [pc, #240]	@ (8003f28 <xQueueReceive+0x1c0>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e44:	f001 fdda 	bl	80059fc <vPortExitCritical>
				return pdPASS;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e069      	b.n	8003f20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e52:	f001 fdd3 	bl	80059fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e062      	b.n	8003f20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e60:	f107 0310 	add.w	r3, r7, #16
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fec5 	bl	8004bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e6e:	f001 fdc5 	bl	80059fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e72:	f000 fc2d 	bl	80046d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e76:	f001 fd8f 	bl	8005998 <vPortEnterCritical>
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e80:	b25b      	sxtb	r3, r3
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e86:	d103      	bne.n	8003e90 <xQueueReceive+0x128>
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	d103      	bne.n	8003ea6 <xQueueReceive+0x13e>
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ea6:	f001 fda9 	bl	80059fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003eaa:	1d3a      	adds	r2, r7, #4
 8003eac:	f107 0310 	add.w	r3, r7, #16
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 feb4 	bl	8004c20 <xTaskCheckForTimeOut>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d123      	bne.n	8003f06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ec0:	f000 f916 	bl	80040f0 <prvIsQueueEmpty>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d017      	beq.n	8003efa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	3324      	adds	r3, #36	@ 0x24
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fdd8 	bl	8004a88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eda:	f000 f8b7 	bl	800404c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ede:	f000 fc05 	bl	80046ec <xTaskResumeAll>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d189      	bne.n	8003dfc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <xQueueReceive+0x1c0>)
 8003eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	e780      	b.n	8003dfc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003efa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003efc:	f000 f8a6 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f00:	f000 fbf4 	bl	80046ec <xTaskResumeAll>
 8003f04:	e77a      	b.n	8003dfc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f08:	f000 f8a0 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f0c:	f000 fbee 	bl	80046ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f12:	f000 f8ed 	bl	80040f0 <prvIsQueueEmpty>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f43f af6f 	beq.w	8003dfc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3730      	adds	r7, #48	@ 0x30
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d14d      	bne.n	8003fee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 ffcc 	bl	8004ef4 <xTaskPriorityDisinherit>
 8003f5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e043      	b.n	8003fee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d119      	bne.n	8003fa0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6858      	ldr	r0, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	461a      	mov	r2, r3
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	f002 f8aa 	bl	80060d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	441a      	add	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d32b      	bcc.n	8003fee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	e026      	b.n	8003fee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68d8      	ldr	r0, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	f002 f890 	bl	80060d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	425b      	negs	r3, r3
 8003fba:	441a      	add	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d207      	bcs.n	8003fdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d105      	bne.n	8003fee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	441a      	add	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d303      	bcc.n	8004034 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68d9      	ldr	r1, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	461a      	mov	r2, r3
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	f002 f846 	bl	80060d0 <memcpy>
	}
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 fca0 	bl	8005998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800405e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004060:	e011      	b.n	8004086 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	@ 0x24
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fd5c 	bl	8004b2c <xTaskRemoveFromEventList>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800407a:	f000 fe35 	bl	8004ce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3b01      	subs	r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	dce9      	bgt.n	8004062 <prvUnlockQueue+0x16>
 800408e:	e000      	b.n	8004092 <prvUnlockQueue+0x46>
					break;
 8004090:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800409a:	f001 fcaf 	bl	80059fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800409e:	f001 fc7b 	bl	8005998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040aa:	e011      	b.n	80040d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3310      	adds	r3, #16
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fd37 	bl	8004b2c <xTaskRemoveFromEventList>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040c4:	f000 fe10 	bl	8004ce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dce9      	bgt.n	80040ac <prvUnlockQueue+0x60>
 80040d8:	e000      	b.n	80040dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	22ff      	movs	r2, #255	@ 0xff
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040e4:	f001 fc8a 	bl	80059fc <vPortExitCritical>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f8:	f001 fc4e 	bl	8005998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e001      	b.n	800410e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800410e:	f001 fc75 	bl	80059fc <vPortExitCritical>

	return xReturn;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004124:	f001 fc38 	bl	8005998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	429a      	cmp	r2, r3
 8004132:	d102      	bne.n	800413a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 fc5d 	bl	80059fc <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e014      	b.n	8004186 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800415c:	4a0f      	ldr	r2, [pc, #60]	@ (800419c <vQueueAddToRegistry+0x50>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004168:	490c      	ldr	r1, [pc, #48]	@ (800419c <vQueueAddToRegistry+0x50>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004172:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <vQueueAddToRegistry+0x50>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800417e:	e006      	b.n	800418e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b07      	cmp	r3, #7
 800418a:	d9e7      	bls.n	800415c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000874 	.word	0x20000874

080041a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041b0:	f001 fbf2 	bl	8005998 <vPortEnterCritical>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ba:	b25b      	sxtb	r3, r3
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c0:	d103      	bne.n	80041ca <vQueueWaitForMessageRestricted+0x2a>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d6:	d103      	bne.n	80041e0 <vQueueWaitForMessageRestricted+0x40>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041e0:	f001 fc0c 	bl	80059fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3324      	adds	r3, #36	@ 0x24
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fc6d 	bl	8004ad4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ff26 	bl	800404c <prvUnlockQueue>
	}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	@ 0x38
 800420c:	af04      	add	r7, sp, #16
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xTaskCreateStatic+0x2c>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	623b      	str	r3, [r7, #32]
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10b      	bne.n	8004252 <xTaskCreateStatic+0x4a>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	61fb      	str	r3, [r7, #28]
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004252:	23a8      	movs	r3, #168	@ 0xa8
 8004254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2ba8      	cmp	r3, #168	@ 0xa8
 800425a:	d00b      	beq.n	8004274 <xTaskCreateStatic+0x6c>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	61bb      	str	r3, [r7, #24]
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004274:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01e      	beq.n	80042ba <xTaskCreateStatic+0xb2>
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	2202      	movs	r2, #2
 8004290:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004294:	2300      	movs	r3, #0
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	9302      	str	r3, [sp, #8]
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f851 	bl	8004354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042b4:	f000 f8f6 	bl	80044a4 <prvAddNewTaskToReadyList>
 80042b8:	e001      	b.n	80042be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042be:	697b      	ldr	r3, [r7, #20]
	}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3728      	adds	r7, #40	@ 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	@ 0x30
 80042cc:	af04      	add	r7, sp, #16
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fc7d 	bl	8005bdc <pvPortMalloc>
 80042e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00e      	beq.n	8004308 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042ea:	20a8      	movs	r0, #168	@ 0xa8
 80042ec:	f001 fc76 	bl	8005bdc <pvPortMalloc>
 80042f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80042fe:	e005      	b.n	800430c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f001 fd39 	bl	8005d78 <vPortFree>
 8004306:	e001      	b.n	800430c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	2300      	movs	r3, #0
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9302      	str	r3, [sp, #8]
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f80f 	bl	8004354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004336:	69f8      	ldr	r0, [r7, #28]
 8004338:	f000 f8b4 	bl	80044a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800433c:	2301      	movs	r3, #1
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	e002      	b.n	8004348 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004346:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004348:	69bb      	ldr	r3, [r7, #24]
	}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	461a      	mov	r2, r3
 800436c:	21a5      	movs	r1, #165	@ 0xa5
 800436e:	f001 fe23 	bl	8005fb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800437c:	3b01      	subs	r3, #1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f023 0307 	bic.w	r3, r3, #7
 800438a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	617b      	str	r3, [r7, #20]
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	e7fd      	b.n	80043aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01f      	beq.n	80043f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e012      	b.n	80043e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	7819      	ldrb	r1, [r3, #0]
 80043c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	3334      	adds	r3, #52	@ 0x34
 80043ca:	460a      	mov	r2, r1
 80043cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	d9e9      	bls.n	80043ba <prvInitialiseNewTask+0x66>
 80043e6:	e000      	b.n	80043ea <prvInitialiseNewTask+0x96>
			{
				break;
 80043e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043f2:	e003      	b.n	80043fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2b37      	cmp	r3, #55	@ 0x37
 8004400:	d901      	bls.n	8004406 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004402:	2337      	movs	r3, #55	@ 0x37
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800440a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004410:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	3304      	adds	r3, #4
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f965 	bl	80036ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	3318      	adds	r3, #24
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff f960 	bl	80036ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004430:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	2200      	movs	r2, #0
 8004446:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	2200      	movs	r2, #0
 800444e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	3354      	adds	r3, #84	@ 0x54
 8004456:	224c      	movs	r2, #76	@ 0x4c
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fdac 	bl	8005fb8 <memset>
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	4a0d      	ldr	r2, [pc, #52]	@ (8004498 <prvInitialiseNewTask+0x144>)
 8004464:	659a      	str	r2, [r3, #88]	@ 0x58
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	4a0c      	ldr	r2, [pc, #48]	@ (800449c <prvInitialiseNewTask+0x148>)
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800446c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446e:	4a0c      	ldr	r2, [pc, #48]	@ (80044a0 <prvInitialiseNewTask+0x14c>)
 8004470:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	69b8      	ldr	r0, [r7, #24]
 8004478:	f001 f95a 	bl	8005730 <pxPortInitialiseStack>
 800447c:	4602      	mov	r2, r0
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448e:	bf00      	nop
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20004b08 	.word	0x20004b08
 800449c:	20004b70 	.word	0x20004b70
 80044a0:	20004bd8 	.word	0x20004bd8

080044a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044ac:	f001 fa74 	bl	8005998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <prvAddNewTaskToReadyList+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <prvAddNewTaskToReadyList+0xc4>)
 80044b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044ba:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <prvAddNewTaskToReadyList+0xc8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044c2:	4a2a      	ldr	r2, [pc, #168]	@ (800456c <prvAddNewTaskToReadyList+0xc8>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <prvAddNewTaskToReadyList+0xc4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d110      	bne.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044d0:	f000 fc2e 	bl	8004d30 <prvInitialiseTaskLists>
 80044d4:	e00d      	b.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044d6:	4b26      	ldr	r3, [pc, #152]	@ (8004570 <prvAddNewTaskToReadyList+0xcc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044de:	4b23      	ldr	r3, [pc, #140]	@ (800456c <prvAddNewTaskToReadyList+0xc8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d802      	bhi.n	80044f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044ec:	4a1f      	ldr	r2, [pc, #124]	@ (800456c <prvAddNewTaskToReadyList+0xc8>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044f2:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <prvAddNewTaskToReadyList+0xd0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <prvAddNewTaskToReadyList+0xd0>)
 80044fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <prvAddNewTaskToReadyList+0xd0>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <prvAddNewTaskToReadyList+0xd4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d903      	bls.n	8004518 <prvAddNewTaskToReadyList+0x74>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	4a18      	ldr	r2, [pc, #96]	@ (8004578 <prvAddNewTaskToReadyList+0xd4>)
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4a15      	ldr	r2, [pc, #84]	@ (800457c <prvAddNewTaskToReadyList+0xd8>)
 8004526:	441a      	add	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f7ff f8e9 	bl	8003706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004534:	f001 fa62 	bl	80059fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004538:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <prvAddNewTaskToReadyList+0xcc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00e      	beq.n	800455e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004540:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <prvAddNewTaskToReadyList+0xc8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	429a      	cmp	r2, r3
 800454c:	d207      	bcs.n	800455e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800454e:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <prvAddNewTaskToReadyList+0xdc>)
 8004550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000d88 	.word	0x20000d88
 800456c:	200008b4 	.word	0x200008b4
 8004570:	20000d94 	.word	0x20000d94
 8004574:	20000da4 	.word	0x20000da4
 8004578:	20000d90 	.word	0x20000d90
 800457c:	200008b8 	.word	0x200008b8
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d018      	beq.n	80045c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004596:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <vTaskDelay+0x64>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <vTaskDelay+0x32>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	60bb      	str	r3, [r7, #8]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045b6:	f000 f88b 	bl	80046d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045ba:	2100      	movs	r1, #0
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fd09 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045c2:	f000 f893 	bl	80046ec <xTaskResumeAll>
 80045c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045ce:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <vTaskDelay+0x68>)
 80045d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000db0 	.word	0x20000db0
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	@ 0x28
 80045f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045fe:	463a      	mov	r2, r7
 8004600:	1d39      	adds	r1, r7, #4
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f81c 	bl	8003644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800460c:	6839      	ldr	r1, [r7, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	9202      	str	r2, [sp, #8]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	460a      	mov	r2, r1
 800461e:	4924      	ldr	r1, [pc, #144]	@ (80046b0 <vTaskStartScheduler+0xc0>)
 8004620:	4824      	ldr	r0, [pc, #144]	@ (80046b4 <vTaskStartScheduler+0xc4>)
 8004622:	f7ff fdf1 	bl	8004208 <xTaskCreateStatic>
 8004626:	4603      	mov	r3, r0
 8004628:	4a23      	ldr	r2, [pc, #140]	@ (80046b8 <vTaskStartScheduler+0xc8>)
 800462a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800462c:	4b22      	ldr	r3, [pc, #136]	@ (80046b8 <vTaskStartScheduler+0xc8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004634:	2301      	movs	r3, #1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e001      	b.n	800463e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d102      	bne.n	800464a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004644:	f000 fd1a 	bl	800507c <xTimerCreateTimerTask>
 8004648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d11b      	bne.n	8004688 <vTaskStartScheduler+0x98>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004664:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <vTaskStartScheduler+0xcc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3354      	adds	r3, #84	@ 0x54
 800466a:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <vTaskStartScheduler+0xd0>)
 800466c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800466e:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <vTaskStartScheduler+0xd4>)
 8004670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <vTaskStartScheduler+0xd8>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800467c:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <vTaskStartScheduler+0xdc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004682:	f001 f8e5 	bl	8005850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004686:	e00f      	b.n	80046a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800468e:	d10b      	bne.n	80046a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	60fb      	str	r3, [r7, #12]
}
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <vTaskStartScheduler+0xb4>
}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	080061cc 	.word	0x080061cc
 80046b4:	08004d01 	.word	0x08004d01
 80046b8:	20000dac 	.word	0x20000dac
 80046bc:	200008b4 	.word	0x200008b4
 80046c0:	20000010 	.word	0x20000010
 80046c4:	20000da8 	.word	0x20000da8
 80046c8:	20000d94 	.word	0x20000d94
 80046cc:	20000d8c 	.word	0x20000d8c

080046d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046d4:	4b04      	ldr	r3, [pc, #16]	@ (80046e8 <vTaskSuspendAll+0x18>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	4a03      	ldr	r2, [pc, #12]	@ (80046e8 <vTaskSuspendAll+0x18>)
 80046dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046de:	bf00      	nop
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	20000db0 	.word	0x20000db0

080046ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046fa:	4b42      	ldr	r3, [pc, #264]	@ (8004804 <xTaskResumeAll+0x118>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <xTaskResumeAll+0x2e>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	603b      	str	r3, [r7, #0]
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	e7fd      	b.n	8004716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800471a:	f001 f93d 	bl	8005998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800471e:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <xTaskResumeAll+0x118>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a37      	ldr	r2, [pc, #220]	@ (8004804 <xTaskResumeAll+0x118>)
 8004726:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004728:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <xTaskResumeAll+0x118>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d162      	bne.n	80047f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004730:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <xTaskResumeAll+0x11c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05e      	beq.n	80047f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004738:	e02f      	b.n	800479a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800473a:	4b34      	ldr	r3, [pc, #208]	@ (800480c <xTaskResumeAll+0x120>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3318      	adds	r3, #24
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f83a 	bl	80037c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f835 	bl	80037c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	4b2d      	ldr	r3, [pc, #180]	@ (8004810 <xTaskResumeAll+0x124>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d903      	bls.n	800476a <xTaskResumeAll+0x7e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <xTaskResumeAll+0x124>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4a27      	ldr	r2, [pc, #156]	@ (8004814 <xTaskResumeAll+0x128>)
 8004778:	441a      	add	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe ffc0 	bl	8003706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4b23      	ldr	r3, [pc, #140]	@ (8004818 <xTaskResumeAll+0x12c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <xTaskResumeAll+0x130>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479a:	4b1c      	ldr	r3, [pc, #112]	@ (800480c <xTaskResumeAll+0x120>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1cb      	bne.n	800473a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047a8:	f000 fb66 	bl	8004e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004820 <xTaskResumeAll+0x134>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047b8:	f000 f846 	bl	8004848 <xTaskIncrementTick>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <xTaskResumeAll+0x130>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f1      	bne.n	80047b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80047d4:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <xTaskResumeAll+0x134>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <xTaskResumeAll+0x130>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047e2:	2301      	movs	r3, #1
 80047e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <xTaskResumeAll+0x138>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047f6:	f001 f901 	bl	80059fc <vPortExitCritical>

	return xAlreadyYielded;
 80047fa:	68bb      	ldr	r3, [r7, #8]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000db0 	.word	0x20000db0
 8004808:	20000d88 	.word	0x20000d88
 800480c:	20000d48 	.word	0x20000d48
 8004810:	20000d90 	.word	0x20000d90
 8004814:	200008b8 	.word	0x200008b8
 8004818:	200008b4 	.word	0x200008b4
 800481c:	20000d9c 	.word	0x20000d9c
 8004820:	20000d98 	.word	0x20000d98
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800482e:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <xTaskGetTickCount+0x1c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004834:	687b      	ldr	r3, [r7, #4]
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000d8c 	.word	0x20000d8c

08004848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004852:	4b4f      	ldr	r3, [pc, #316]	@ (8004990 <xTaskIncrementTick+0x148>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8090 	bne.w	800497c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800485c:	4b4d      	ldr	r3, [pc, #308]	@ (8004994 <xTaskIncrementTick+0x14c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004864:	4a4b      	ldr	r2, [pc, #300]	@ (8004994 <xTaskIncrementTick+0x14c>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d121      	bne.n	80048b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004870:	4b49      	ldr	r3, [pc, #292]	@ (8004998 <xTaskIncrementTick+0x150>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <xTaskIncrementTick+0x4a>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	603b      	str	r3, [r7, #0]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <xTaskIncrementTick+0x46>
 8004892:	4b41      	ldr	r3, [pc, #260]	@ (8004998 <xTaskIncrementTick+0x150>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4b40      	ldr	r3, [pc, #256]	@ (800499c <xTaskIncrementTick+0x154>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a3e      	ldr	r2, [pc, #248]	@ (8004998 <xTaskIncrementTick+0x150>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4a3e      	ldr	r2, [pc, #248]	@ (800499c <xTaskIncrementTick+0x154>)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b3e      	ldr	r3, [pc, #248]	@ (80049a0 <xTaskIncrementTick+0x158>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a3c      	ldr	r2, [pc, #240]	@ (80049a0 <xTaskIncrementTick+0x158>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	f000 fae2 	bl	8004e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048b4:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <xTaskIncrementTick+0x15c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d349      	bcc.n	8004952 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048be:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <xTaskIncrementTick+0x150>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c8:	4b36      	ldr	r3, [pc, #216]	@ (80049a4 <xTaskIncrementTick+0x15c>)
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048ce:	601a      	str	r2, [r3, #0]
					break;
 80048d0:	e03f      	b.n	8004952 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d2:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <xTaskIncrementTick+0x150>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d203      	bcs.n	80048f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048ea:	4a2e      	ldr	r2, [pc, #184]	@ (80049a4 <xTaskIncrementTick+0x15c>)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048f0:	e02f      	b.n	8004952 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe ff62 	bl	80037c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	3318      	adds	r3, #24
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe ff59 	bl	80037c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004912:	4b25      	ldr	r3, [pc, #148]	@ (80049a8 <xTaskIncrementTick+0x160>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d903      	bls.n	8004922 <xTaskIncrementTick+0xda>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	4a22      	ldr	r2, [pc, #136]	@ (80049a8 <xTaskIncrementTick+0x160>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <xTaskIncrementTick+0x164>)
 8004930:	441a      	add	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fe fee4 	bl	8003706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <xTaskIncrementTick+0x168>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	429a      	cmp	r2, r3
 800494a:	d3b8      	bcc.n	80048be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004950:	e7b5      	b.n	80048be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <xTaskIncrementTick+0x168>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004958:	4914      	ldr	r1, [pc, #80]	@ (80049ac <xTaskIncrementTick+0x164>)
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d901      	bls.n	800496e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800496a:	2301      	movs	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800496e:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <xTaskIncrementTick+0x16c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004976:	2301      	movs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e004      	b.n	8004986 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800497c:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <xTaskIncrementTick+0x170>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a0d      	ldr	r2, [pc, #52]	@ (80049b8 <xTaskIncrementTick+0x170>)
 8004984:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000db0 	.word	0x20000db0
 8004994:	20000d8c 	.word	0x20000d8c
 8004998:	20000d40 	.word	0x20000d40
 800499c:	20000d44 	.word	0x20000d44
 80049a0:	20000da0 	.word	0x20000da0
 80049a4:	20000da8 	.word	0x20000da8
 80049a8:	20000d90 	.word	0x20000d90
 80049ac:	200008b8 	.word	0x200008b8
 80049b0:	200008b4 	.word	0x200008b4
 80049b4:	20000d9c 	.word	0x20000d9c
 80049b8:	20000d98 	.word	0x20000d98

080049bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a70 <vTaskSwitchContext+0xb4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004a74 <vTaskSwitchContext+0xb8>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049d0:	e047      	b.n	8004a62 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80049d2:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <vTaskSwitchContext+0xb8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d8:	4b27      	ldr	r3, [pc, #156]	@ (8004a78 <vTaskSwitchContext+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e011      	b.n	8004a04 <vTaskSwitchContext+0x48>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <vTaskSwitchContext+0x42>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	607b      	str	r3, [r7, #4]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <vTaskSwitchContext+0x3e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	491d      	ldr	r1, [pc, #116]	@ (8004a7c <vTaskSwitchContext+0xc0>)
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0e3      	beq.n	80049e0 <vTaskSwitchContext+0x24>
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <vTaskSwitchContext+0xc0>)
 8004a24:	4413      	add	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d104      	bne.n	8004a48 <vTaskSwitchContext+0x8c>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a80 <vTaskSwitchContext+0xc4>)
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <vTaskSwitchContext+0xbc>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <vTaskSwitchContext+0xc4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3354      	adds	r3, #84	@ 0x54
 8004a5e:	4a09      	ldr	r2, [pc, #36]	@ (8004a84 <vTaskSwitchContext+0xc8>)
 8004a60:	6013      	str	r3, [r2, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000db0 	.word	0x20000db0
 8004a74:	20000d9c 	.word	0x20000d9c
 8004a78:	20000d90 	.word	0x20000d90
 8004a7c:	200008b8 	.word	0x200008b8
 8004a80:	200008b4 	.word	0x200008b4
 8004a84:	20000010 	.word	0x20000010

08004a88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab0:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <vTaskPlaceOnEventList+0x48>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fe fe48 	bl	800374e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004abe:	2101      	movs	r1, #1
 8004ac0:	6838      	ldr	r0, [r7, #0]
 8004ac2:	f000 fa87 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200008b4 	.word	0x200008b4

08004ad4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	617b      	str	r3, [r7, #20]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <vTaskPlaceOnEventListRestricted+0x54>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3318      	adds	r3, #24
 8004b04:	4619      	mov	r1, r3
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7fe fdfd 	bl	8003706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f000 fa5a 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
	}
 8004b20:	bf00      	nop
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200008b4 	.word	0x200008b4

08004b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	e7fd      	b.n	8004b56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3318      	adds	r3, #24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fe2e 	bl	80037c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b64:	4b1d      	ldr	r3, [pc, #116]	@ (8004bdc <xTaskRemoveFromEventList+0xb0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11d      	bne.n	8004ba8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fe25 	bl	80037c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b19      	ldr	r3, [pc, #100]	@ (8004be0 <xTaskRemoveFromEventList+0xb4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <xTaskRemoveFromEventList+0x5e>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a16      	ldr	r2, [pc, #88]	@ (8004be0 <xTaskRemoveFromEventList+0xb4>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a13      	ldr	r2, [pc, #76]	@ (8004be4 <xTaskRemoveFromEventList+0xb8>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fdb0 	bl	8003706 <vListInsertEnd>
 8004ba6:	e005      	b.n	8004bb4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3318      	adds	r3, #24
 8004bac:	4619      	mov	r1, r3
 8004bae:	480e      	ldr	r0, [pc, #56]	@ (8004be8 <xTaskRemoveFromEventList+0xbc>)
 8004bb0:	f7fe fda9 	bl	8003706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <xTaskRemoveFromEventList+0xc0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d905      	bls.n	8004bce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <xTaskRemoveFromEventList+0xc4>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e001      	b.n	8004bd2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000db0 	.word	0x20000db0
 8004be0:	20000d90 	.word	0x20000d90
 8004be4:	200008b8 	.word	0x200008b8
 8004be8:	20000d48 	.word	0x20000d48
 8004bec:	200008b4 	.word	0x200008b4
 8004bf0:	20000d9c 	.word	0x20000d9c

08004bf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <vTaskInternalSetTimeOutState+0x24>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <vTaskInternalSetTimeOutState+0x28>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20000da0 	.word	0x20000da0
 8004c1c:	20000d8c 	.word	0x20000d8c

08004c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c66:	f000 fe97 	bl	8005998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <xTaskCheckForTimeOut+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c82:	d102      	bne.n	8004c8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e023      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <xTaskCheckForTimeOut+0xc4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d007      	beq.n	8004ca6 <xTaskCheckForTimeOut+0x86>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	e015      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d20b      	bcs.n	8004cc8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff99 	bl	8004bf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e004      	b.n	8004cd2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cd2:	f000 fe93 	bl	80059fc <vPortExitCritical>

	return xReturn;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000d8c 	.word	0x20000d8c
 8004ce4:	20000da0 	.word	0x20000da0

08004ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cec:	4b03      	ldr	r3, [pc, #12]	@ (8004cfc <vTaskMissedYield+0x14>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	20000d9c 	.word	0x20000d9c

08004d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d08:	f000 f852 	bl	8004db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <prvIdleTask+0x28>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d9f9      	bls.n	8004d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <prvIdleTask+0x2c>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d24:	e7f0      	b.n	8004d08 <prvIdleTask+0x8>
 8004d26:	bf00      	nop
 8004d28:	200008b8 	.word	0x200008b8
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	e00c      	b.n	8004d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a12      	ldr	r2, [pc, #72]	@ (8004d90 <prvInitialiseTaskLists+0x60>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fcae 	bl	80036ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3301      	adds	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b37      	cmp	r3, #55	@ 0x37
 8004d5a:	d9ef      	bls.n	8004d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d5c:	480d      	ldr	r0, [pc, #52]	@ (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d5e:	f7fe fca5 	bl	80036ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d62:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d64:	f7fe fca2 	bl	80036ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d68:	480c      	ldr	r0, [pc, #48]	@ (8004d9c <prvInitialiseTaskLists+0x6c>)
 8004d6a:	f7fe fc9f 	bl	80036ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d6e:	480c      	ldr	r0, [pc, #48]	@ (8004da0 <prvInitialiseTaskLists+0x70>)
 8004d70:	f7fe fc9c 	bl	80036ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d74:	480b      	ldr	r0, [pc, #44]	@ (8004da4 <prvInitialiseTaskLists+0x74>)
 8004d76:	f7fe fc99 	bl	80036ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <prvInitialiseTaskLists+0x78>)
 8004d7c:	4a05      	ldr	r2, [pc, #20]	@ (8004d94 <prvInitialiseTaskLists+0x64>)
 8004d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <prvInitialiseTaskLists+0x7c>)
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <prvInitialiseTaskLists+0x68>)
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	200008b8 	.word	0x200008b8
 8004d94:	20000d18 	.word	0x20000d18
 8004d98:	20000d2c 	.word	0x20000d2c
 8004d9c:	20000d48 	.word	0x20000d48
 8004da0:	20000d5c 	.word	0x20000d5c
 8004da4:	20000d74 	.word	0x20000d74
 8004da8:	20000d40 	.word	0x20000d40
 8004dac:	20000d44 	.word	0x20000d44

08004db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004db6:	e019      	b.n	8004dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004db8:	f000 fdee 	bl	8005998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbc:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <prvCheckTasksWaitingTermination+0x50>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fe fcf9 	bl	80037c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004e04 <prvCheckTasksWaitingTermination+0x54>)
 8004dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a0a      	ldr	r2, [pc, #40]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004de2:	f000 fe0b 	bl	80059fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f810 	bl	8004e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dec:	4b06      	ldr	r3, [pc, #24]	@ (8004e08 <prvCheckTasksWaitingTermination+0x58>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e1      	bne.n	8004db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000d5c 	.word	0x20000d5c
 8004e04:	20000d88 	.word	0x20000d88
 8004e08:	20000d70 	.word	0x20000d70

08004e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3354      	adds	r3, #84	@ 0x54
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 f8d5 	bl	8005fc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 ffa3 	bl	8005d78 <vPortFree>
				vPortFree( pxTCB );
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 ffa0 	bl	8005d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e38:	e019      	b.n	8004e6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d103      	bne.n	8004e4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 ff97 	bl	8005d78 <vPortFree>
	}
 8004e4a:	e010      	b.n	8004e6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d00b      	beq.n	8004e6e <prvDeleteTCB+0x62>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60fb      	str	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	e7fd      	b.n	8004e6a <prvDeleteTCB+0x5e>
	}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <prvResetNextTaskUnblockTime+0x38>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e88:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e90:	e008      	b.n	8004ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <prvResetNextTaskUnblockTime+0x38>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a04      	ldr	r2, [pc, #16]	@ (8004eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	20000d40 	.word	0x20000d40
 8004eb4:	20000da8 	.word	0x20000da8

08004eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <xTaskGetSchedulerState+0x34>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e008      	b.n	8004ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ecc:	4b08      	ldr	r3, [pc, #32]	@ (8004ef0 <xTaskGetSchedulerState+0x38>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	e001      	b.n	8004ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eda:	2300      	movs	r3, #0
 8004edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ede:	687b      	ldr	r3, [r7, #4]
	}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	20000d94 	.word	0x20000d94
 8004ef0:	20000db0 	.word	0x20000db0

08004ef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d058      	beq.n	8004fbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <xTaskPriorityDisinherit+0xd4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d00b      	beq.n	8004f2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	60fb      	str	r3, [r7, #12]
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	60bb      	str	r3, [r7, #8]
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d02c      	beq.n	8004fbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d128      	bne.n	8004fbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fc26 	bl	80037c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <xTaskPriorityDisinherit+0xd8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <xTaskPriorityDisinherit+0xa8>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	4a0c      	ldr	r2, [pc, #48]	@ (8004fcc <xTaskPriorityDisinherit+0xd8>)
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4a09      	ldr	r2, [pc, #36]	@ (8004fd0 <xTaskPriorityDisinherit+0xdc>)
 8004faa:	441a      	add	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7fe fba7 	bl	8003706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fbc:	697b      	ldr	r3, [r7, #20]
	}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200008b4 	.word	0x200008b4
 8004fcc:	20000d90 	.word	0x20000d90
 8004fd0:	200008b8 	.word	0x200008b8

08004fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	4b20      	ldr	r3, [pc, #128]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fbe8 	bl	80037c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff6:	d10a      	bne.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4819      	ldr	r0, [pc, #100]	@ (800506c <prvAddCurrentTaskToDelayedList+0x98>)
 8005008:	f7fe fb7d 	bl	8003706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800500c:	e026      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005016:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	d209      	bcs.n	800503a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005026:	4b12      	ldr	r3, [pc, #72]	@ (8005070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b0f      	ldr	r3, [pc, #60]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe fb8b 	bl	800374e <vListInsert>
}
 8005038:	e010      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe fb81 	bl	800374e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800504c:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d202      	bcs.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000d8c 	.word	0x20000d8c
 8005068:	200008b4 	.word	0x200008b4
 800506c:	20000d74 	.word	0x20000d74
 8005070:	20000d44 	.word	0x20000d44
 8005074:	20000d40 	.word	0x20000d40
 8005078:	20000da8 	.word	0x20000da8

0800507c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	@ 0x28
 8005080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005086:	f000 fb13 	bl	80056b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <xTimerCreateTimerTask+0x84>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d021      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800509a:	1d3a      	adds	r2, r7, #4
 800509c:	f107 0108 	add.w	r1, r7, #8
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe fae7 	bl	8003678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	9202      	str	r2, [sp, #8]
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2302      	movs	r3, #2
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	460a      	mov	r2, r1
 80050bc:	4911      	ldr	r1, [pc, #68]	@ (8005104 <xTimerCreateTimerTask+0x88>)
 80050be:	4812      	ldr	r0, [pc, #72]	@ (8005108 <xTimerCreateTimerTask+0x8c>)
 80050c0:	f7ff f8a2 	bl	8004208 <xTaskCreateStatic>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a11      	ldr	r2, [pc, #68]	@ (800510c <xTimerCreateTimerTask+0x90>)
 80050c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <xTimerCreateTimerTask+0x90>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050d2:	2301      	movs	r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050f4:	697b      	ldr	r3, [r7, #20]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000de4 	.word	0x20000de4
 8005104:	080061d4 	.word	0x080061d4
 8005108:	08005249 	.word	0x08005249
 800510c:	20000de8 	.word	0x20000de8

08005110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	@ 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800511e:	2300      	movs	r3, #0
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <xTimerGenericCommand+0x30>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	623b      	str	r3, [r7, #32]
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005140:	4b19      	ldr	r3, [pc, #100]	@ (80051a8 <xTimerGenericCommand+0x98>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02a      	beq.n	800519e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b05      	cmp	r3, #5
 8005158:	dc18      	bgt.n	800518c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800515a:	f7ff fead 	bl	8004eb8 <xTaskGetSchedulerState>
 800515e:	4603      	mov	r3, r0
 8005160:	2b02      	cmp	r3, #2
 8005162:	d109      	bne.n	8005178 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005164:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <xTimerGenericCommand+0x98>)
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	f107 0110 	add.w	r1, r7, #16
 800516c:	2300      	movs	r3, #0
 800516e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005170:	f7fe fc5a 	bl	8003a28 <xQueueGenericSend>
 8005174:	6278      	str	r0, [r7, #36]	@ 0x24
 8005176:	e012      	b.n	800519e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005178:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <xTimerGenericCommand+0x98>)
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	f107 0110 	add.w	r1, r7, #16
 8005180:	2300      	movs	r3, #0
 8005182:	2200      	movs	r2, #0
 8005184:	f7fe fc50 	bl	8003a28 <xQueueGenericSend>
 8005188:	6278      	str	r0, [r7, #36]	@ 0x24
 800518a:	e008      	b.n	800519e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <xTimerGenericCommand+0x98>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	f107 0110 	add.w	r1, r7, #16
 8005194:	2300      	movs	r3, #0
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f7fe fd48 	bl	8003c2c <xQueueGenericSendFromISR>
 800519c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3728      	adds	r7, #40	@ 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000de4 	.word	0x20000de4

080051ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b6:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <prvProcessExpiredTimer+0x98>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fe fafb 	bl	80037c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d023      	beq.n	8005220 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	18d1      	adds	r1, r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	6978      	ldr	r0, [r7, #20]
 80051e6:	f000 f8d5 	bl	8005394 <prvInsertTimerInActiveList>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	2100      	movs	r1, #0
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f7ff ff88 	bl	8005110 <xTimerGenericCommand>
 8005200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d114      	bne.n	8005232 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60fb      	str	r3, [r7, #12]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	4798      	blx	r3
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000ddc 	.word	0x20000ddc

08005248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f859 	bl	800530c <prvGetNextExpireTime>
 800525a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4619      	mov	r1, r3
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f805 	bl	8005270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005266:	f000 f8d7 	bl	8005418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800526a:	bf00      	nop
 800526c:	e7f0      	b.n	8005250 <prvTimerTask+0x8>
	...

08005270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800527a:	f7ff fa29 	bl	80046d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f866 	bl	8005354 <prvSampleTimeNow>
 8005288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d130      	bne.n	80052f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <prvProcessTimerOrBlockTask+0x3c>
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	429a      	cmp	r2, r3
 800529c:	d806      	bhi.n	80052ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800529e:	f7ff fa25 	bl	80046ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff81 	bl	80051ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052aa:	e024      	b.n	80052f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052b2:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <prvProcessTimerOrBlockTask+0x90>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <prvProcessTimerOrBlockTask+0x50>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <prvProcessTimerOrBlockTask+0x52>
 80052c0:	2300      	movs	r3, #0
 80052c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <prvProcessTimerOrBlockTask+0x94>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f7fe ff65 	bl	80041a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052d6:	f7ff fa09 	bl	80046ec <xTaskResumeAll>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052e0:	4b09      	ldr	r3, [pc, #36]	@ (8005308 <prvProcessTimerOrBlockTask+0x98>)
 80052e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	f3bf 8f6f 	isb	sy
}
 80052f0:	e001      	b.n	80052f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052f2:	f7ff f9fb 	bl	80046ec <xTaskResumeAll>
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000de0 	.word	0x20000de0
 8005304:	20000de4 	.word	0x20000de4
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005314:	4b0e      	ldr	r3, [pc, #56]	@ (8005350 <prvGetNextExpireTime+0x44>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <prvGetNextExpireTime+0x16>
 800531e:	2201      	movs	r2, #1
 8005320:	e000      	b.n	8005324 <prvGetNextExpireTime+0x18>
 8005322:	2200      	movs	r2, #0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005330:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <prvGetNextExpireTime+0x44>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e001      	b.n	8005340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005340:	68fb      	ldr	r3, [r7, #12]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000ddc 	.word	0x20000ddc

08005354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800535c:	f7ff fa64 	bl	8004828 <xTaskGetTickCount>
 8005360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005362:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <prvSampleTimeNow+0x3c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	429a      	cmp	r2, r3
 800536a:	d205      	bcs.n	8005378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800536c:	f000 f93a 	bl	80055e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e002      	b.n	800537e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800537e:	4a04      	ldr	r2, [pc, #16]	@ (8005390 <prvSampleTimeNow+0x3c>)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000dec 	.word	0x20000dec

08005394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d812      	bhi.n	80053e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d302      	bcc.n	80053ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e01b      	b.n	8005406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <prvInsertTimerInActiveList+0x7c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe f9b8 	bl	800374e <vListInsert>
 80053de:	e012      	b.n	8005406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d206      	bcs.n	80053f6 <prvInsertTimerInActiveList+0x62>
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d302      	bcc.n	80053f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e007      	b.n	8005406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053f6:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <prvInsertTimerInActiveList+0x80>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fe f9a4 	bl	800374e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005406:	697b      	ldr	r3, [r7, #20]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000de0 	.word	0x20000de0
 8005414:	20000ddc 	.word	0x20000ddc

08005418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08e      	sub	sp, #56	@ 0x38
 800541c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800541e:	e0ce      	b.n	80055be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da19      	bge.n	800545a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	3304      	adds	r3, #4
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800542c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	61fb      	str	r3, [r7, #28]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005450:	6850      	ldr	r0, [r2, #4]
 8005452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	4611      	mov	r1, r2
 8005458:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f2c0 80ae 	blt.w	80055be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	3304      	adds	r3, #4
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe f9a4 	bl	80037c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005478:	463b      	mov	r3, r7
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff ff6a 	bl	8005354 <prvSampleTimeNow>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b09      	cmp	r3, #9
 8005486:	f200 8097 	bhi.w	80055b8 <prvProcessReceivedCommands+0x1a0>
 800548a:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <prvProcessReceivedCommands+0x78>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054b9 	.word	0x080054b9
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054b9 	.word	0x080054b9
 800549c:	0800552f 	.word	0x0800552f
 80054a0:	08005543 	.word	0x08005543
 80054a4:	0800558f 	.word	0x0800558f
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054b9 	.word	0x080054b9
 80054b0:	0800552f 	.word	0x0800552f
 80054b4:	08005543 	.word	0x08005543
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	18d1      	adds	r1, r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	f7ff ff5c 	bl	8005394 <prvInsertTimerInActiveList>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d06c      	beq.n	80055bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d061      	beq.n	80055bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	441a      	add	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	2100      	movs	r1, #0
 8005508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800550a:	f7ff fe01 	bl	8005110 <xTimerGenericCommand>
 800550e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d152      	bne.n	80055bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61bb      	str	r3, [r7, #24]
}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	e7fd      	b.n	800552a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005540:	e03d      	b.n	80055be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	617b      	str	r3, [r7, #20]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800557a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	18d1      	adds	r1, r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005588:	f7ff ff04 	bl	8005394 <prvInsertTimerInActiveList>
					break;
 800558c:	e017      	b.n	80055be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800559c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800559e:	f000 fbeb 	bl	8005d78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055a2:	e00c      	b.n	80055be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055b6:	e002      	b.n	80055be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80055b8:	bf00      	nop
 80055ba:	e000      	b.n	80055be <prvProcessReceivedCommands+0x1a6>
					break;
 80055bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055be:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <prvProcessReceivedCommands+0x1c8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	1d39      	adds	r1, r7, #4
 80055c4:	2200      	movs	r2, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fbce 	bl	8003d68 <xQueueReceive>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f47f af26 	bne.w	8005420 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	3730      	adds	r7, #48	@ 0x30
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000de4 	.word	0x20000de4

080055e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055ea:	e049      	b.n	8005680 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ec:	4b2e      	ldr	r3, [pc, #184]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f6:	4b2c      	ldr	r3, [pc, #176]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe f8db 	bl	80037c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02f      	beq.n	8005680 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d90e      	bls.n	8005650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800563e:	4b1a      	ldr	r3, [pc, #104]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f7fe f880 	bl	800374e <vListInsert>
 800564e:	e017      	b.n	8005680 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005650:	2300      	movs	r3, #0
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	2100      	movs	r1, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fd58 	bl	8005110 <xTimerGenericCommand>
 8005660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	603b      	str	r3, [r7, #0]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005680:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1b0      	bne.n	80055ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800568a:	4b07      	ldr	r3, [pc, #28]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <prvSwitchTimerLists+0xc8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a04      	ldr	r2, [pc, #16]	@ (80056a8 <prvSwitchTimerLists+0xc4>)
 8005696:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005698:	4a04      	ldr	r2, [pc, #16]	@ (80056ac <prvSwitchTimerLists+0xc8>)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6013      	str	r3, [r2, #0]
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000ddc 	.word	0x20000ddc
 80056ac:	20000de0 	.word	0x20000de0

080056b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056b6:	f000 f96f 	bl	8005998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056ba:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <prvCheckForValidListAndQueue+0x60>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d120      	bne.n	8005704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056c2:	4814      	ldr	r0, [pc, #80]	@ (8005714 <prvCheckForValidListAndQueue+0x64>)
 80056c4:	f7fd fff2 	bl	80036ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056c8:	4813      	ldr	r0, [pc, #76]	@ (8005718 <prvCheckForValidListAndQueue+0x68>)
 80056ca:	f7fd ffef 	bl	80036ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <prvCheckForValidListAndQueue+0x6c>)
 80056d0:	4a10      	ldr	r2, [pc, #64]	@ (8005714 <prvCheckForValidListAndQueue+0x64>)
 80056d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056d4:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <prvCheckForValidListAndQueue+0x70>)
 80056d6:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <prvCheckForValidListAndQueue+0x68>)
 80056d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056da:	2300      	movs	r3, #0
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <prvCheckForValidListAndQueue+0x74>)
 80056e0:	4a11      	ldr	r2, [pc, #68]	@ (8005728 <prvCheckForValidListAndQueue+0x78>)
 80056e2:	2110      	movs	r1, #16
 80056e4:	200a      	movs	r0, #10
 80056e6:	f7fe f8ff 	bl	80038e8 <xQueueGenericCreateStatic>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4a08      	ldr	r2, [pc, #32]	@ (8005710 <prvCheckForValidListAndQueue+0x60>)
 80056ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056f0:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <prvCheckForValidListAndQueue+0x60>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056f8:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <prvCheckForValidListAndQueue+0x60>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	490b      	ldr	r1, [pc, #44]	@ (800572c <prvCheckForValidListAndQueue+0x7c>)
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fd24 	bl	800414c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005704:	f000 f97a 	bl	80059fc <vPortExitCritical>
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000de4 	.word	0x20000de4
 8005714:	20000db4 	.word	0x20000db4
 8005718:	20000dc8 	.word	0x20000dc8
 800571c:	20000ddc 	.word	0x20000ddc
 8005720:	20000de0 	.word	0x20000de0
 8005724:	20000e90 	.word	0x20000e90
 8005728:	20000df0 	.word	0x20000df0
 800572c:	080061dc 	.word	0x080061dc

08005730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b04      	subs	r3, #4
 8005740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b04      	subs	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3b04      	subs	r3, #4
 800575e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005760:	4a0c      	ldr	r2, [pc, #48]	@ (8005794 <pxPortInitialiseStack+0x64>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3b14      	subs	r3, #20
 800576a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3b04      	subs	r3, #4
 8005776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f06f 0202 	mvn.w	r2, #2
 800577e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b20      	subs	r3, #32
 8005784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	08005799 	.word	0x08005799

08005798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057a2:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <prvTaskExitError+0x58>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057aa:	d00b      	beq.n	80057c4 <prvTaskExitError+0x2c>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60fb      	str	r3, [r7, #12]
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <prvTaskExitError+0x28>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60bb      	str	r3, [r7, #8]
}
 80057d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057d8:	bf00      	nop
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0fc      	beq.n	80057da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	2000000c 	.word	0x2000000c
	...

08005800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005800:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <pxCurrentTCBConst2>)
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	6808      	ldr	r0, [r1, #0]
 8005806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	f380 8809 	msr	PSP, r0
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8811 	msr	BASEPRI, r0
 800581a:	4770      	bx	lr
 800581c:	f3af 8000 	nop.w

08005820 <pxCurrentTCBConst2>:
 8005820:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005828:	4808      	ldr	r0, [pc, #32]	@ (800584c <prvPortStartFirstTask+0x24>)
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	6800      	ldr	r0, [r0, #0]
 800582e:	f380 8808 	msr	MSP, r0
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8814 	msr	CONTROL, r0
 800583a:	b662      	cpsie	i
 800583c:	b661      	cpsie	f
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	df00      	svc	0
 8005848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800584a:	bf00      	nop
 800584c:	e000ed08 	.word	0xe000ed08

08005850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005856:	4b47      	ldr	r3, [pc, #284]	@ (8005974 <xPortStartScheduler+0x124>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a47      	ldr	r2, [pc, #284]	@ (8005978 <xPortStartScheduler+0x128>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10b      	bne.n	8005878 <xPortStartScheduler+0x28>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005878:	4b3e      	ldr	r3, [pc, #248]	@ (8005974 <xPortStartScheduler+0x124>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a3f      	ldr	r2, [pc, #252]	@ (800597c <xPortStartScheduler+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10b      	bne.n	800589a <xPortStartScheduler+0x4a>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	613b      	str	r3, [r7, #16]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800589a:	4b39      	ldr	r3, [pc, #228]	@ (8005980 <xPortStartScheduler+0x130>)
 800589c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	22ff      	movs	r2, #255	@ 0xff
 80058aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b31      	ldr	r3, [pc, #196]	@ (8005984 <xPortStartScheduler+0x134>)
 80058c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <xPortStartScheduler+0x138>)
 80058c4:	2207      	movs	r2, #7
 80058c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058c8:	e009      	b.n	80058de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80058ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005988 <xPortStartScheduler+0x138>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005988 <xPortStartScheduler+0x138>)
 80058d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b80      	cmp	r3, #128	@ 0x80
 80058e8:	d0ef      	beq.n	80058ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058ea:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <xPortStartScheduler+0x138>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1c3 0307 	rsb	r3, r3, #7
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d00b      	beq.n	800590e <xPortStartScheduler+0xbe>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	60bb      	str	r3, [r7, #8]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800590e:	4b1e      	ldr	r3, [pc, #120]	@ (8005988 <xPortStartScheduler+0x138>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <xPortStartScheduler+0x138>)
 8005916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005918:	4b1b      	ldr	r3, [pc, #108]	@ (8005988 <xPortStartScheduler+0x138>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <xPortStartScheduler+0x138>)
 8005922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800592c:	4b17      	ldr	r3, [pc, #92]	@ (800598c <xPortStartScheduler+0x13c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a16      	ldr	r2, [pc, #88]	@ (800598c <xPortStartScheduler+0x13c>)
 8005932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005938:	4b14      	ldr	r3, [pc, #80]	@ (800598c <xPortStartScheduler+0x13c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a13      	ldr	r2, [pc, #76]	@ (800598c <xPortStartScheduler+0x13c>)
 800593e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005944:	f000 f8da 	bl	8005afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <xPortStartScheduler+0x140>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800594e:	f000 f8f9 	bl	8005b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <xPortStartScheduler+0x144>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a0f      	ldr	r2, [pc, #60]	@ (8005994 <xPortStartScheduler+0x144>)
 8005958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800595c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800595e:	f7ff ff63 	bl	8005828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005962:	f7ff f82b 	bl	80049bc <vTaskSwitchContext>
	prvTaskExitError();
 8005966:	f7ff ff17 	bl	8005798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	e000ed00 	.word	0xe000ed00
 8005978:	410fc271 	.word	0x410fc271
 800597c:	410fc270 	.word	0x410fc270
 8005980:	e000e400 	.word	0xe000e400
 8005984:	20000ee0 	.word	0x20000ee0
 8005988:	20000ee4 	.word	0x20000ee4
 800598c:	e000ed20 	.word	0xe000ed20
 8005990:	2000000c 	.word	0x2000000c
 8005994:	e000ef34 	.word	0xe000ef34

08005998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059b2:	4b10      	ldr	r3, [pc, #64]	@ (80059f4 <vPortEnterCritical+0x5c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	4a0e      	ldr	r2, [pc, #56]	@ (80059f4 <vPortEnterCritical+0x5c>)
 80059ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059bc:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <vPortEnterCritical+0x5c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d110      	bne.n	80059e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <vPortEnterCritical+0x60>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	603b      	str	r3, [r7, #0]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <vPortEnterCritical+0x4a>
	}
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	2000000c 	.word	0x2000000c
 80059f8:	e000ed04 	.word	0xe000ed04

080059fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a02:	4b12      	ldr	r3, [pc, #72]	@ (8005a4c <vPortExitCritical+0x50>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <vPortExitCritical+0x26>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	607b      	str	r3, [r7, #4]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a22:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <vPortExitCritical+0x50>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	4a08      	ldr	r2, [pc, #32]	@ (8005a4c <vPortExitCritical+0x50>)
 8005a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a2c:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <vPortExitCritical+0x50>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <vPortExitCritical+0x44>
 8005a34:	2300      	movs	r3, #0
 8005a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	2000000c 	.word	0x2000000c

08005a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a50:	f3ef 8009 	mrs	r0, PSP
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4b15      	ldr	r3, [pc, #84]	@ (8005ab0 <pxCurrentTCBConst>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	f01e 0f10 	tst.w	lr, #16
 8005a60:	bf08      	it	eq
 8005a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a74:	f380 8811 	msr	BASEPRI, r0
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f7fe ff9c 	bl	80049bc <vTaskSwitchContext>
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f380 8811 	msr	BASEPRI, r0
 8005a8c:	bc09      	pop	{r0, r3}
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	6808      	ldr	r0, [r1, #0]
 8005a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a96:	f01e 0f10 	tst.w	lr, #16
 8005a9a:	bf08      	it	eq
 8005a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005aa0:	f380 8809 	msr	PSP, r0
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst>:
 8005ab0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
}
 8005ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ad2:	f7fe feb9 	bl	8004848 <xTaskIncrementTick>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <xPortSysTickHandler+0x40>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b00:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <vPortSetupTimerInterrupt+0x34>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <vPortSetupTimerInterrupt+0x38>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <vPortSetupTimerInterrupt+0x3c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	@ (8005b3c <vPortSetupTimerInterrupt+0x40>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <vPortSetupTimerInterrupt+0x44>)
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b1e:	4b04      	ldr	r3, [pc, #16]	@ (8005b30 <vPortSetupTimerInterrupt+0x34>)
 8005b20:	2207      	movs	r2, #7
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e010 	.word	0xe000e010
 8005b34:	e000e018 	.word	0xe000e018
 8005b38:	20000000 	.word	0x20000000
 8005b3c:	10624dd3 	.word	0x10624dd3
 8005b40:	e000e014 	.word	0xe000e014

08005b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b54 <vPortEnableVFP+0x10>
 8005b48:	6801      	ldr	r1, [r0, #0]
 8005b4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b4e:	6001      	str	r1, [r0, #0]
 8005b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b52:	bf00      	nop
 8005b54:	e000ed88 	.word	0xe000ed88

08005b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b5e:	f3ef 8305 	mrs	r3, IPSR
 8005b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d915      	bls.n	8005b96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <vPortValidateInterruptPriority+0x74>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b74:	4b16      	ldr	r3, [pc, #88]	@ (8005bd0 <vPortValidateInterruptPriority+0x78>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	7afa      	ldrb	r2, [r7, #11]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20b      	bcs.n	8005b96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <vPortValidateInterruptPriority+0x7c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd8 <vPortValidateInterruptPriority+0x80>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d90b      	bls.n	8005bbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	603b      	str	r3, [r7, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	e7fd      	b.n	8005bba <vPortValidateInterruptPriority+0x62>
	}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	e000e3f0 	.word	0xe000e3f0
 8005bd0:	20000ee0 	.word	0x20000ee0
 8005bd4:	e000ed0c 	.word	0xe000ed0c
 8005bd8:	20000ee4 	.word	0x20000ee4

08005bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	@ 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005be8:	f7fe fd72 	bl	80046d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bec:	4b5c      	ldr	r3, [pc, #368]	@ (8005d60 <pvPortMalloc+0x184>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bf4:	f000 f924 	bl	8005e40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d64 <pvPortMalloc+0x188>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 8095 	bne.w	8005d30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d015      	beq.n	8005c4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f023 0307 	bic.w	r3, r3, #7
 8005c24:	3308      	adds	r3, #8
 8005c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <pvPortMalloc+0x6e>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	617b      	str	r3, [r7, #20]
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop
 8005c48:	e7fd      	b.n	8005c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d06f      	beq.n	8005d30 <pvPortMalloc+0x154>
 8005c50:	4b45      	ldr	r3, [pc, #276]	@ (8005d68 <pvPortMalloc+0x18c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d86a      	bhi.n	8005d30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c5a:	4b44      	ldr	r3, [pc, #272]	@ (8005d6c <pvPortMalloc+0x190>)
 8005c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c5e:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <pvPortMalloc+0x190>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c64:	e004      	b.n	8005c70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d903      	bls.n	8005c82 <pvPortMalloc+0xa6>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f1      	bne.n	8005c66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c82:	4b37      	ldr	r3, [pc, #220]	@ (8005d60 <pvPortMalloc+0x184>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d051      	beq.n	8005d30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2208      	movs	r2, #8
 8005c92:	4413      	add	r3, r2
 8005c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	1ad2      	subs	r2, r2, r3
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d920      	bls.n	8005cf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <pvPortMalloc+0xfc>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	613b      	str	r3, [r7, #16]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cea:	69b8      	ldr	r0, [r7, #24]
 8005cec:	f000 f90a 	bl	8005f04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <pvPortMalloc+0x18c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d68 <pvPortMalloc+0x18c>)
 8005cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <pvPortMalloc+0x18c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <pvPortMalloc+0x194>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d203      	bcs.n	8005d12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d0a:	4b17      	ldr	r3, [pc, #92]	@ (8005d68 <pvPortMalloc+0x18c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <pvPortMalloc+0x194>)
 8005d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4b13      	ldr	r3, [pc, #76]	@ (8005d64 <pvPortMalloc+0x188>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <pvPortMalloc+0x198>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	4a11      	ldr	r2, [pc, #68]	@ (8005d74 <pvPortMalloc+0x198>)
 8005d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d30:	f7fe fcdc 	bl	80046ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <pvPortMalloc+0x17a>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60fb      	str	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <pvPortMalloc+0x176>
	return pvReturn;
 8005d56:	69fb      	ldr	r3, [r7, #28]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3728      	adds	r7, #40	@ 0x28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20004af0 	.word	0x20004af0
 8005d64:	20004b04 	.word	0x20004b04
 8005d68:	20004af4 	.word	0x20004af4
 8005d6c:	20004ae8 	.word	0x20004ae8
 8005d70:	20004af8 	.word	0x20004af8
 8005d74:	20004afc 	.word	0x20004afc

08005d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d04f      	beq.n	8005e2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d8a:	2308      	movs	r3, #8
 8005d8c:	425b      	negs	r3, r3
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	4b25      	ldr	r3, [pc, #148]	@ (8005e34 <vPortFree+0xbc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <vPortFree+0x46>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <vPortFree+0x66>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60bb      	str	r3, [r7, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	e7fd      	b.n	8005dda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	4b14      	ldr	r3, [pc, #80]	@ (8005e34 <vPortFree+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11a      	bne.n	8005e2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <vPortFree+0xbc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	401a      	ands	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e04:	f7fe fc64 	bl	80046d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <vPortFree+0xc0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	4a09      	ldr	r2, [pc, #36]	@ (8005e38 <vPortFree+0xc0>)
 8005e14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e16:	6938      	ldr	r0, [r7, #16]
 8005e18:	f000 f874 	bl	8005f04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e1c:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <vPortFree+0xc4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	4a06      	ldr	r2, [pc, #24]	@ (8005e3c <vPortFree+0xc4>)
 8005e24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e26:	f7fe fc61 	bl	80046ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20004b04 	.word	0x20004b04
 8005e38:	20004af4 	.word	0x20004af4
 8005e3c:	20004b00 	.word	0x20004b00

08005e40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005e4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e4c:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <prvHeapInit+0xac>)
 8005e4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3307      	adds	r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0307 	bic.w	r3, r3, #7
 8005e66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eec <prvHeapInit+0xac>)
 8005e70:	4413      	add	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e78:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef0 <prvHeapInit+0xb0>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef0 <prvHeapInit+0xb0>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <prvHeapInit+0xb4>)
 8005ea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ea2:	4b14      	ldr	r3, [pc, #80]	@ (8005ef4 <prvHeapInit+0xb4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eaa:	4b12      	ldr	r3, [pc, #72]	@ (8005ef4 <prvHeapInit+0xb4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef4 <prvHeapInit+0xb4>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef8 <prvHeapInit+0xb8>)
 8005ece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4a09      	ldr	r2, [pc, #36]	@ (8005efc <prvHeapInit+0xbc>)
 8005ed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ed8:	4b09      	ldr	r3, [pc, #36]	@ (8005f00 <prvHeapInit+0xc0>)
 8005eda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ede:	601a      	str	r2, [r3, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000ee8 	.word	0x20000ee8
 8005ef0:	20004ae8 	.word	0x20004ae8
 8005ef4:	20004af0 	.word	0x20004af0
 8005ef8:	20004af8 	.word	0x20004af8
 8005efc:	20004af4 	.word	0x20004af4
 8005f00:	20004b04 	.word	0x20004b04

08005f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <prvInsertBlockIntoFreeList+0xac>)
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	e002      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x14>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d8f7      	bhi.n	8005f12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d108      	bne.n	8005f46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d118      	bne.n	8005f8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b15      	ldr	r3, [pc, #84]	@ (8005fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d00d      	beq.n	8005f82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e008      	b.n	8005f94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f82:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e003      	b.n	8005f94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d002      	beq.n	8005fa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20004ae8 	.word	0x20004ae8
 8005fb4:	20004af0 	.word	0x20004af0

08005fb8 <memset>:
 8005fb8:	4402      	add	r2, r0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <memset+0xa>
 8005fc0:	4770      	bx	lr
 8005fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc6:	e7f9      	b.n	8005fbc <memset+0x4>

08005fc8 <_reclaim_reent>:
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <_reclaim_reent+0xb8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4283      	cmp	r3, r0
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	d053      	beq.n	800607c <_reclaim_reent+0xb4>
 8005fd4:	69c3      	ldr	r3, [r0, #28]
 8005fd6:	b31b      	cbz	r3, 8006020 <_reclaim_reent+0x58>
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	b163      	cbz	r3, 8005ff6 <_reclaim_reent+0x2e>
 8005fdc:	2500      	movs	r5, #0
 8005fde:	69e3      	ldr	r3, [r4, #28]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	5959      	ldr	r1, [r3, r5]
 8005fe4:	b9b1      	cbnz	r1, 8006014 <_reclaim_reent+0x4c>
 8005fe6:	3504      	adds	r5, #4
 8005fe8:	2d80      	cmp	r5, #128	@ 0x80
 8005fea:	d1f8      	bne.n	8005fde <_reclaim_reent+0x16>
 8005fec:	69e3      	ldr	r3, [r4, #28]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	68d9      	ldr	r1, [r3, #12]
 8005ff2:	f000 f87b 	bl	80060ec <_free_r>
 8005ff6:	69e3      	ldr	r3, [r4, #28]
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	b111      	cbz	r1, 8006002 <_reclaim_reent+0x3a>
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f875 	bl	80060ec <_free_r>
 8006002:	69e3      	ldr	r3, [r4, #28]
 8006004:	689d      	ldr	r5, [r3, #8]
 8006006:	b15d      	cbz	r5, 8006020 <_reclaim_reent+0x58>
 8006008:	4629      	mov	r1, r5
 800600a:	4620      	mov	r0, r4
 800600c:	682d      	ldr	r5, [r5, #0]
 800600e:	f000 f86d 	bl	80060ec <_free_r>
 8006012:	e7f8      	b.n	8006006 <_reclaim_reent+0x3e>
 8006014:	680e      	ldr	r6, [r1, #0]
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f868 	bl	80060ec <_free_r>
 800601c:	4631      	mov	r1, r6
 800601e:	e7e1      	b.n	8005fe4 <_reclaim_reent+0x1c>
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	b111      	cbz	r1, 800602a <_reclaim_reent+0x62>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f861 	bl	80060ec <_free_r>
 800602a:	69e1      	ldr	r1, [r4, #28]
 800602c:	b111      	cbz	r1, 8006034 <_reclaim_reent+0x6c>
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f85c 	bl	80060ec <_free_r>
 8006034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006036:	b111      	cbz	r1, 800603e <_reclaim_reent+0x76>
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f857 	bl	80060ec <_free_r>
 800603e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006040:	b111      	cbz	r1, 8006048 <_reclaim_reent+0x80>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f852 	bl	80060ec <_free_r>
 8006048:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800604a:	b111      	cbz	r1, 8006052 <_reclaim_reent+0x8a>
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f84d 	bl	80060ec <_free_r>
 8006052:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006054:	b111      	cbz	r1, 800605c <_reclaim_reent+0x94>
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f848 	bl	80060ec <_free_r>
 800605c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800605e:	b111      	cbz	r1, 8006066 <_reclaim_reent+0x9e>
 8006060:	4620      	mov	r0, r4
 8006062:	f000 f843 	bl	80060ec <_free_r>
 8006066:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006068:	b111      	cbz	r1, 8006070 <_reclaim_reent+0xa8>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f83e 	bl	80060ec <_free_r>
 8006070:	6a23      	ldr	r3, [r4, #32]
 8006072:	b11b      	cbz	r3, 800607c <_reclaim_reent+0xb4>
 8006074:	4620      	mov	r0, r4
 8006076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800607a:	4718      	bx	r3
 800607c:	bd70      	pop	{r4, r5, r6, pc}
 800607e:	bf00      	nop
 8006080:	20000010 	.word	0x20000010

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4d0d      	ldr	r5, [pc, #52]	@ (80060bc <__libc_init_array+0x38>)
 8006088:	4c0d      	ldr	r4, [pc, #52]	@ (80060c0 <__libc_init_array+0x3c>)
 800608a:	1b64      	subs	r4, r4, r5
 800608c:	10a4      	asrs	r4, r4, #2
 800608e:	2600      	movs	r6, #0
 8006090:	42a6      	cmp	r6, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	4d0b      	ldr	r5, [pc, #44]	@ (80060c4 <__libc_init_array+0x40>)
 8006096:	4c0c      	ldr	r4, [pc, #48]	@ (80060c8 <__libc_init_array+0x44>)
 8006098:	f000 f87e 	bl	8006198 <_init>
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	2600      	movs	r6, #0
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ac:	4798      	blx	r3
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b6:	4798      	blx	r3
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	0800627c 	.word	0x0800627c
 80060c0:	0800627c 	.word	0x0800627c
 80060c4:	0800627c 	.word	0x0800627c
 80060c8:	08006280 	.word	0x08006280

080060cc <__retarget_lock_acquire_recursive>:
 80060cc:	4770      	bx	lr

080060ce <__retarget_lock_release_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <memcpy>:
 80060d0:	440a      	add	r2, r1
 80060d2:	4291      	cmp	r1, r2
 80060d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80060d8:	d100      	bne.n	80060dc <memcpy+0xc>
 80060da:	4770      	bx	lr
 80060dc:	b510      	push	{r4, lr}
 80060de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e6:	4291      	cmp	r1, r2
 80060e8:	d1f9      	bne.n	80060de <memcpy+0xe>
 80060ea:	bd10      	pop	{r4, pc}

080060ec <_free_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4605      	mov	r5, r0
 80060f0:	2900      	cmp	r1, #0
 80060f2:	d041      	beq.n	8006178 <_free_r+0x8c>
 80060f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f8:	1f0c      	subs	r4, r1, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfb8      	it	lt
 80060fe:	18e4      	addlt	r4, r4, r3
 8006100:	f000 f83e 	bl	8006180 <__malloc_lock>
 8006104:	4a1d      	ldr	r2, [pc, #116]	@ (800617c <_free_r+0x90>)
 8006106:	6813      	ldr	r3, [r2, #0]
 8006108:	b933      	cbnz	r3, 8006118 <_free_r+0x2c>
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	6014      	str	r4, [r2, #0]
 800610e:	4628      	mov	r0, r5
 8006110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006114:	f000 b83a 	b.w	800618c <__malloc_unlock>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d908      	bls.n	800612e <_free_r+0x42>
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	1821      	adds	r1, r4, r0
 8006120:	428b      	cmp	r3, r1
 8006122:	bf01      	itttt	eq
 8006124:	6819      	ldreq	r1, [r3, #0]
 8006126:	685b      	ldreq	r3, [r3, #4]
 8006128:	1809      	addeq	r1, r1, r0
 800612a:	6021      	streq	r1, [r4, #0]
 800612c:	e7ed      	b.n	800610a <_free_r+0x1e>
 800612e:	461a      	mov	r2, r3
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b10b      	cbz	r3, 8006138 <_free_r+0x4c>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d9fa      	bls.n	800612e <_free_r+0x42>
 8006138:	6811      	ldr	r1, [r2, #0]
 800613a:	1850      	adds	r0, r2, r1
 800613c:	42a0      	cmp	r0, r4
 800613e:	d10b      	bne.n	8006158 <_free_r+0x6c>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	4401      	add	r1, r0
 8006144:	1850      	adds	r0, r2, r1
 8006146:	4283      	cmp	r3, r0
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	d1e0      	bne.n	800610e <_free_r+0x22>
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	4408      	add	r0, r1
 8006154:	6010      	str	r0, [r2, #0]
 8006156:	e7da      	b.n	800610e <_free_r+0x22>
 8006158:	d902      	bls.n	8006160 <_free_r+0x74>
 800615a:	230c      	movs	r3, #12
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	e7d6      	b.n	800610e <_free_r+0x22>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	1821      	adds	r1, r4, r0
 8006164:	428b      	cmp	r3, r1
 8006166:	bf04      	itt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	bf04      	itt	eq
 8006170:	1809      	addeq	r1, r1, r0
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	6054      	str	r4, [r2, #4]
 8006176:	e7ca      	b.n	800610e <_free_r+0x22>
 8006178:	bd38      	pop	{r3, r4, r5, pc}
 800617a:	bf00      	nop
 800617c:	20004c44 	.word	0x20004c44

08006180 <__malloc_lock>:
 8006180:	4801      	ldr	r0, [pc, #4]	@ (8006188 <__malloc_lock+0x8>)
 8006182:	f7ff bfa3 	b.w	80060cc <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	20004c40 	.word	0x20004c40

0800618c <__malloc_unlock>:
 800618c:	4801      	ldr	r0, [pc, #4]	@ (8006194 <__malloc_unlock+0x8>)
 800618e:	f7ff bf9e 	b.w	80060ce <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	20004c40 	.word	0x20004c40

08006198 <_init>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr

080061a4 <_fini>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr
