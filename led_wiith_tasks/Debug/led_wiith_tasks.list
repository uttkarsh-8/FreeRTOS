
led_wiith_tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc0  08005fc0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fc8  08005fc8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc8  08005fc8  00006fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005fd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb0  2000006c  0800603c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  0800603c  00007c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155d0  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e7  00000000  00000000  0001c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0001f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7d  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040f0  00000000  00000000  000219b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001454a  00000000  00000000  00025aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae8e  00000000  00000000  00039fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  00114ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005edc 	.word	0x08005edc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005edc 	.word	0x08005edc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb3f 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f853 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8bf 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_toggleLED, "task1", 100, NULL, 2, &task1_handle);
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <main+0x84>)
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2264      	movs	r2, #100	@ 0x64
 80005fa:	491a      	ldr	r1, [pc, #104]	@ (8000664 <main+0x88>)
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <main+0x8c>)
 80005fe:	f002 fe61 	bl	80032c4 <xTaskCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a19      	ldr	r2, [pc, #100]	@ (800066c <main+0x90>)
 8000606:	6013      	str	r3, [r2, #0]

  if(status != pdPASS){
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <main+0x90>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d002      	beq.n	8000616 <main+0x3a>
	  printf("Task1 did not run");
 8000610:	4817      	ldr	r0, [pc, #92]	@ (8000670 <main+0x94>)
 8000612:	f004 fd8b 	bl	800512c <iprintf>
  }

  status = xTaskCreate(task2_toggleLED, "task2", 100, NULL, 2, &task2_handle);
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <main+0x98>)
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2302      	movs	r3, #2
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2264      	movs	r2, #100	@ 0x64
 8000622:	4915      	ldr	r1, [pc, #84]	@ (8000678 <main+0x9c>)
 8000624:	4815      	ldr	r0, [pc, #84]	@ (800067c <main+0xa0>)
 8000626:	f002 fe4d 	bl	80032c4 <xTaskCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0f      	ldr	r2, [pc, #60]	@ (800066c <main+0x90>)
 800062e:	6013      	str	r3, [r2, #0]

  if(status != pdPASS){
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <main+0x90>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d002      	beq.n	800063e <main+0x62>
	  printf("task2 did not run");
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0xa4>)
 800063a:	f004 fd77 	bl	800512c <iprintf>
  }

  vTaskStartScheduler();
 800063e:	f002 ffd5 	bl	80035ec <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000642:	f001 ff05 	bl	8002450 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000646:	4a0f      	ldr	r2, [pc, #60]	@ (8000684 <main+0xa8>)
 8000648:	2100      	movs	r1, #0
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0xac>)
 800064c:	f001 ff4a 	bl	80024e4 <osThreadNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <main+0xb0>)
 8000654:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f001 ff1f 	bl	8002498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0x7e>
 800065e:	bf00      	nop
 8000660:	20000090 	.word	0x20000090
 8000664:	08005f00 	.word	0x08005f00
 8000668:	08000879 	.word	0x08000879
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08005f08 	.word	0x08005f08
 8000674:	20000094 	.word	0x20000094
 8000678:	08005f1c 	.word	0x08005f1c
 800067c:	08000899 	.word	0x08000899
 8000680:	08005f24 	.word	0x08005f24
 8000684:	08005f50 	.word	0x08005f50
 8000688:	080008b9 	.word	0x080008b9
 800068c:	20000088 	.word	0x20000088

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fd99 	bl	80051d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a29      	ldr	r2, [pc, #164]	@ (8000764 <SystemClock_Config+0xd4>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <SystemClock_Config+0xd4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <SystemClock_Config+0xd8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006dc:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <SystemClock_Config+0xd8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800070c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f918 	bl	8001954 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072a:	f000 f8df 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fd9a 	bl	8001284 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000756:	f000 f8c9 	bl	80008ec <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b39      	ldr	r3, [pc, #228]	@ (800086c <MX_GPIO_Init+0x100>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a38      	ldr	r2, [pc, #224]	@ (800086c <MX_GPIO_Init+0x100>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b36      	ldr	r3, [pc, #216]	@ (800086c <MX_GPIO_Init+0x100>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b32      	ldr	r3, [pc, #200]	@ (800086c <MX_GPIO_Init+0x100>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a31      	ldr	r2, [pc, #196]	@ (800086c <MX_GPIO_Init+0x100>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <MX_GPIO_Init+0x100>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0x100>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <MX_GPIO_Init+0x100>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_GPIO_Init+0x100>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_GPIO_Init+0x100>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <MX_GPIO_Init+0x100>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_GPIO_Init+0x100>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	481e      	ldr	r0, [pc, #120]	@ (8000870 <MX_GPIO_Init+0x104>)
 80007f8:	f000 fcec 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4818      	ldr	r0, [pc, #96]	@ (8000874 <MX_GPIO_Init+0x108>)
 8000814:	f000 fb4a 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000818:	230c      	movs	r3, #12
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480f      	ldr	r0, [pc, #60]	@ (8000870 <MX_GPIO_Init+0x104>)
 8000834:	f000 fb3a 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4808      	ldr	r0, [pc, #32]	@ (8000870 <MX_GPIO_Init+0x104>)
 8000850:	f000 fb2c 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2105      	movs	r1, #5
 8000858:	2028      	movs	r0, #40	@ 0x28
 800085a:	f000 fafd 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800085e:	2028      	movs	r0, #40	@ 0x28
 8000860:	f000 fb16 	bl	8000e90 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800

08000878 <task1_toggleLED>:

/* USER CODE BEGIN 4 */

void task1_toggleLED(void* pvParameters){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000880:	2120      	movs	r1, #32
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <task1_toggleLED+0x1c>)
 8000884:	f000 fcbf 	bl	8001206 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000888:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088c:	f002 fe78 	bl	8003580 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000890:	bf00      	nop
 8000892:	e7f5      	b.n	8000880 <task1_toggleLED+0x8>
 8000894:	40020000 	.word	0x40020000

08000898 <task2_toggleLED>:
	}
	vTaskDelete(NULL);
}

void task2_toggleLED(void* pvParameters){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008a0:	2120      	movs	r1, #32
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <task2_toggleLED+0x1c>)
 80008a4:	f000 fcaf 	bl	8001206 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(700));
 80008a8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80008ac:	f002 fe68 	bl	8003580 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008b0:	bf00      	nop
 80008b2:	e7f5      	b.n	80008a0 <task2_toggleLED+0x8>
 80008b4:	40020000 	.word	0x40020000

080008b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f001 fea1 	bl	8002608 <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <StartDefaultTask+0x8>

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008da:	f000 f9e5 	bl	8000ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40001000 	.word	0x40001000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fa8b 	bl	8000e58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <HAL_InitTick+0xe4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	4a32      	ldr	r2, [pc, #200]	@ (8000a34 <HAL_InitTick+0xe4>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000970:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <HAL_InitTick+0xe4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fd82 	bl	8001490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000996:	f000 fd67 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 800099a:	6378      	str	r0, [r7, #52]	@ 0x34
 800099c:	e004      	b.n	80009a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099e:	f000 fd63 	bl	8001468 <HAL_RCC_GetPCLK1Freq>
 80009a2:	4603      	mov	r3, r0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	0c9b      	lsrs	r3, r3, #18
 80009b2:	3b01      	subs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_InitTick+0xec>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <HAL_InitTick+0xf0>)
 80009ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <HAL_InitTick+0xec>)
 80009be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009c4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <HAL_InitTick+0xec>)
 80009c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <HAL_InitTick+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <HAL_InitTick+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_InitTick+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009dc:	4817      	ldr	r0, [pc, #92]	@ (8000a3c <HAL_InitTick+0xec>)
 80009de:	f001 fa57 	bl	8001e90 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11b      	bne.n	8000a28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <HAL_InitTick+0xec>)
 80009f2:	f001 faa7 	bl	8001f44 <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d111      	bne.n	8000a28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a04:	2036      	movs	r0, #54	@ 0x36
 8000a06:	f000 fa43 	bl	8000e90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d808      	bhi.n	8000a22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	2036      	movs	r0, #54	@ 0x36
 8000a16:	f000 fa1f 	bl	8000e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <HAL_InitTick+0xf4>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e002      	b.n	8000a28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3738      	adds	r7, #56	@ 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	20000098 	.word	0x20000098
 8000a40:	40001000 	.word	0x40001000
 8000a44:	20000004 	.word	0x20000004

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a82:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a86:	f000 fbd9 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM6_DAC_IRQHandler+0x10>)
 8000a96:	f001 fac5 	bl	8002024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000098 	.word	0x20000098

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e009      	b.n	8000b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf1      	blt.n	8000af0 <_write+0x12>
  }
  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_isatty>:

int _isatty(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f004 fbbe 	bl	8005330 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200000e0 	.word	0x200000e0
 8000be8:	20004c20 	.word	0x20004c20

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f004 fb7d 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fccb 	bl	80005dc <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c54:	08005fd0 	.word	0x08005fd0
  ldr r2, =_sbss
 8000c58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c5c:	20004c1c 	.word	0x20004c1c

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f8d8 	bl	8000e42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	200f      	movs	r0, #15
 8000c94:	f7ff fe5c 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe2e 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	200000e4 	.word	0x200000e4

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200000e4 	.word	0x200000e4

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	@ (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff4c 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6a:	f7ff ff61 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f7ff ffb1 	bl	8000ddc <NVIC_EncodePriority>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff80 	bl	8000d88 <__NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e165      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8154 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d017      	beq.n	8000f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80ae 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b5d      	ldr	r3, [pc, #372]	@ (80011ac <HAL_GPIO_Init+0x300>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a5c      	ldr	r2, [pc, #368]	@ (80011ac <HAL_GPIO_Init+0x300>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b5a      	ldr	r3, [pc, #360]	@ (80011ac <HAL_GPIO_Init+0x300>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a58      	ldr	r2, [pc, #352]	@ (80011b0 <HAL_GPIO_Init+0x304>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <HAL_GPIO_Init+0x308>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x21a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_GPIO_Init+0x30c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x216>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4d      	ldr	r2, [pc, #308]	@ (80011bc <HAL_GPIO_Init+0x310>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x212>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4c      	ldr	r2, [pc, #304]	@ (80011c0 <HAL_GPIO_Init+0x314>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x20e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4b      	ldr	r2, [pc, #300]	@ (80011c4 <HAL_GPIO_Init+0x318>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x20a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4a      	ldr	r2, [pc, #296]	@ (80011c8 <HAL_GPIO_Init+0x31c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x206>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a49      	ldr	r2, [pc, #292]	@ (80011cc <HAL_GPIO_Init+0x320>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x202>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00c      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00a      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010b6:	2304      	movs	r3, #4
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x21c>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4935      	ldr	r1, [pc, #212]	@ (80011b0 <HAL_GPIO_Init+0x304>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b3a      	ldr	r3, [pc, #232]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a31      	ldr	r2, [pc, #196]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a26      	ldr	r2, [pc, #152]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113a:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001188:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <HAL_GPIO_Init+0x324>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f ae96 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3724      	adds	r7, #36	@ 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40013800 	.word	0x40013800
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021400 	.word	0x40021400
 80011cc:	40021800 	.word	0x40021800
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0cc      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001298:	4b68      	ldr	r3, [pc, #416]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d90c      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b65      	ldr	r3, [pc, #404]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a58      	ldr	r2, [pc, #352]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a52      	ldr	r2, [pc, #328]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	4313      	orrs	r3, r2
 800130c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d044      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d119      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d003      	beq.n	8001342 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800133e:	2b03      	cmp	r3, #3
 8001340:	d107      	bne.n	8001352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e06f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e067      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001362:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 0203 	bic.w	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4934      	ldr	r1, [pc, #208]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001374:	f7ff fcac 	bl	8000cd0 <HAL_GetTick>
 8001378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	e00a      	b.n	8001392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800137c:	f7ff fca8 	bl	8000cd0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e04f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 020c 	and.w	r2, r3, #12
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d1eb      	bne.n	800137c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d20c      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b22      	ldr	r3, [pc, #136]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	4313      	orrs	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f873 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	@ (8001444 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_RCC_ClockConfig+0x1c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa90 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00
 8001440:	40023800 	.word	0x40023800
 8001444:	08005f74 	.word	0x08005f74
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_RCC_GetHCLKFreq+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000

08001468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800146c:	f7ff fff0 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	0a9b      	lsrs	r3, r3, #10
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	08005f84 	.word	0x08005f84

08001490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220f      	movs	r2, #15
 800149e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_RCC_GetClockConfig+0x60>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 020f 	and.w	r2, r3, #15
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014f8:	b0ae      	sub	sp, #184	@ 0xb8
 80014fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800151a:	4bcb      	ldr	r3, [pc, #812]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b0c      	cmp	r3, #12
 8001524:	f200 8206 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x440>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001565 	.word	0x08001565
 8001534:	08001935 	.word	0x08001935
 8001538:	08001935 	.word	0x08001935
 800153c:	08001935 	.word	0x08001935
 8001540:	0800156d 	.word	0x0800156d
 8001544:	08001935 	.word	0x08001935
 8001548:	08001935 	.word	0x08001935
 800154c:	08001935 	.word	0x08001935
 8001550:	08001575 	.word	0x08001575
 8001554:	08001935 	.word	0x08001935
 8001558:	08001935 	.word	0x08001935
 800155c:	08001935 	.word	0x08001935
 8001560:	08001765 	.word	0x08001765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4bb9      	ldr	r3, [pc, #740]	@ (800184c <HAL_RCC_GetSysClockFreq+0x358>)
 8001566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800156a:	e1e7      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156c:	4bb8      	ldr	r3, [pc, #736]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001572:	e1e3      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001574:	4bb4      	ldr	r3, [pc, #720]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800157c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001580:	4bb1      	ldr	r3, [pc, #708]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d071      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158c:	4bae      	ldr	r3, [pc, #696]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	099b      	lsrs	r3, r3, #6
 8001592:	2200      	movs	r2, #0
 8001594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001598:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800159c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015b2:	4622      	mov	r2, r4
 80015b4:	462b      	mov	r3, r5
 80015b6:	f04f 0000 	mov.w	r0, #0
 80015ba:	f04f 0100 	mov.w	r1, #0
 80015be:	0159      	lsls	r1, r3, #5
 80015c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c4:	0150      	lsls	r0, r2, #5
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4621      	mov	r1, r4
 80015cc:	1a51      	subs	r1, r2, r1
 80015ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80015d0:	4629      	mov	r1, r5
 80015d2:	eb63 0301 	sbc.w	r3, r3, r1
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80015e4:	4649      	mov	r1, r9
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	4641      	mov	r1, r8
 80015ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ee:	4641      	mov	r1, r8
 80015f0:	018a      	lsls	r2, r1, #6
 80015f2:	4641      	mov	r1, r8
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015f8:	4649      	mov	r1, r9
 80015fa:	eb63 0301 	sbc.w	r3, r3, r1
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800160c:	4649      	mov	r1, r9
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4641      	mov	r1, r8
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4641      	mov	r1, r8
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4622      	mov	r2, r4
 8001622:	189b      	adds	r3, r3, r2
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
 8001626:	462b      	mov	r3, r5
 8001628:	460a      	mov	r2, r1
 800162a:	eb42 0303 	adc.w	r3, r2, r3
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800163c:	4629      	mov	r1, r5
 800163e:	024b      	lsls	r3, r1, #9
 8001640:	4621      	mov	r1, r4
 8001642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001646:	4621      	mov	r1, r4
 8001648:	024a      	lsls	r2, r1, #9
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001652:	2200      	movs	r2, #0
 8001654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800165c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001660:	f7fe fe26 	bl	80002b0 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	e067      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b75      	ldr	r3, [pc, #468]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800167c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800168e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0b01 	sbc.w	fp, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80016f2:	4692      	mov	sl, r2
 80016f4:	469b      	mov	fp, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb1a 0303 	adds.w	r3, sl, r3
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb4b 0303 	adc.w	r3, fp, r3
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001712:	4629      	mov	r1, r5
 8001714:	028b      	lsls	r3, r1, #10
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800171c:	4621      	mov	r1, r4
 800171e:	028a      	lsls	r2, r1, #10
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001728:	2200      	movs	r2, #0
 800172a:	673b      	str	r3, [r7, #112]	@ 0x70
 800172c:	677a      	str	r2, [r7, #116]	@ 0x74
 800172e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001732:	f7fe fdbd 	bl	80002b0 <__aeabi_uldivmod>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4613      	mov	r3, r2
 800173c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001740:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	3301      	adds	r3, #1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	e0eb      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b38      	ldr	r3, [pc, #224]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800176c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001770:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d06b      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001790:	2300      	movs	r3, #0
 8001792:	667b      	str	r3, [r7, #100]	@ 0x64
 8001794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	61b9      	str	r1, [r7, #24]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	024b      	lsls	r3, r1, #9
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001822:	4621      	mov	r1, r4
 8001824:	024a      	lsls	r2, r1, #9
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800182e:	2200      	movs	r2, #0
 8001830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001832:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001838:	f7fe fd3a 	bl	80002b0 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001846:	e065      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x420>
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400
 8001850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	4618      	mov	r0, r3
 800185e:	4611      	mov	r1, r2
 8001860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001864:	653b      	str	r3, [r7, #80]	@ 0x50
 8001866:	2300      	movs	r3, #0
 8001868:	657b      	str	r3, [r7, #84]	@ 0x54
 800186a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800186e:	4642      	mov	r2, r8
 8001870:	464b      	mov	r3, r9
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	0159      	lsls	r1, r3, #5
 800187c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001880:	0150      	lsls	r0, r2, #5
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4641      	mov	r1, r8
 8001888:	1a51      	subs	r1, r2, r1
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4649      	mov	r1, r9
 800188e:	eb63 0301 	sbc.w	r3, r3, r1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018a0:	4659      	mov	r1, fp
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	4651      	mov	r1, sl
 80018a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018aa:	4651      	mov	r1, sl
 80018ac:	018a      	lsls	r2, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	1a54      	subs	r4, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0501 	sbc.w	r5, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018fc:	2200      	movs	r2, #0
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001900:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001906:	f7fe fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4613      	mov	r3, r2
 8001910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_GetSysClockFreq+0x458>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0f1b      	lsrs	r3, r3, #28
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001932:	e003      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800193a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001940:	4618      	mov	r0, r3
 8001942:	37b8      	adds	r7, #184	@ 0xb8
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400

08001954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e28d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8083 	beq.w	8001a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001974:	4b94      	ldr	r3, [pc, #592]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b04      	cmp	r3, #4
 800197e:	d019      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001980:	4b91      	ldr	r3, [pc, #580]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
        || \
 8001988:	2b08      	cmp	r3, #8
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800198c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001998:	d00c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d112      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b84      	ldr	r3, [pc, #528]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d05b      	beq.n	8001a78 <HAL_RCC_OscConfig+0x124>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d157      	bne.n	8001a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e25a      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x90>
 80019d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7b      	ldr	r2, [pc, #492]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0xb4>
 80019ee:	4b76      	ldr	r3, [pc, #472]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a75      	ldr	r2, [pc, #468]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xcc>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6b      	ldr	r2, [pc, #428]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f952 	bl	8000cd0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f94e 	bl	8000cd0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	@ 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e21f      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b61      	ldr	r3, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xdc>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f93e 	bl	8000cd0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f93a 	bl	8000cd0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e20b      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x104>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d06f      	beq.n	8001b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a86:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d017      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a92:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b47      	ldr	r3, [pc, #284]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1d3      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4937      	ldr	r1, [pc, #220]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff f8e7 	bl	8000cd0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff f8e3 	bl	8000cd0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1b4      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4925      	ldr	r1, [pc, #148]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_RCC_OscConfig+0x278>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8c6 	bl	8000cd0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff f8c2 	bl	8000cd0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e193      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d036      	beq.n	8001be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f8a6 	bl	8000cd0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f8a2 	bl	8000cd0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e173      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x234>
 8001ba6:	e01b      	b.n	8001be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f88f 	bl	8000cd0 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e00e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff f88b 	bl	8000cd0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d907      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e15c      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470000 	.word	0x42470000
 8001bd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ea      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8097 	beq.w	8001d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b83      	ldr	r3, [pc, #524]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b7f      	ldr	r3, [pc, #508]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a7e      	ldr	r2, [pc, #504]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b79      	ldr	r3, [pc, #484]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b76      	ldr	r3, [pc, #472]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f84b 	bl	8000cd0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f847 	bl	8000cd0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e118      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b6c      	ldr	r3, [pc, #432]	@ (8001e04 <HAL_RCC_OscConfig+0x4b0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x31e>
 8001c64:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c68:	4a65      	ldr	r2, [pc, #404]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x340>
 8001c7a:	4b61      	ldr	r3, [pc, #388]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	4a60      	ldr	r2, [pc, #384]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c86:	4b5e      	ldr	r3, [pc, #376]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0x358>
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca0:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca4:	4a56      	ldr	r2, [pc, #344]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f80c 	bl	8000cd0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f808 	bl	8000cd0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0d7      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0ee      	beq.n	8001cbc <HAL_RCC_OscConfig+0x368>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fff6 	bl	8000cd0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fff2 	bl	8000cd0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0c1      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a3a      	ldr	r2, [pc, #232]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ad 	beq.w	8001e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d145      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffc6 	bl	8000cd0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ffc2 	bl	8000cd0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e093      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7c:	085b      	lsrs	r3, r3, #1
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	071b      	lsls	r3, r3, #28
 8001d92:	491b      	ldr	r1, [pc, #108]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff97 	bl	8000cd0 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff93 	bl	8000cd0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e064      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x452>
 8001dc4:	e05c      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_RCC_OscConfig+0x4b4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff80 	bl	8000cd0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff7c 	bl	8000cd0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e04d      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x480>
 8001df2:	e045      	b.n	8001e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <HAL_RCC_OscConfig+0x538>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d030      	beq.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d129      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d122      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d119      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10f      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e041      	b.n	8001f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f839 	bl	8001f2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	f000 f9c0 	bl	8002254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d001      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e04e      	b.n	8001ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f86:	d01d      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800200c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	@ (800201c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a18      	ldr	r2, [pc, #96]	@ (8002020 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d010      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe6:	e007      	b.n	8001ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40010400 	.word	0x40010400
 800201c:	40014000 	.word	0x40014000
 8002020:	40001800 	.word	0x40001800

08002024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0202 	mvn.w	r2, #2
 8002058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8d2 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8c4 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8d5 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0204 	mvn.w	r2, #4
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8ac 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f89e 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8af 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0208 	mvn.w	r2, #8
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f886 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f878 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f889 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d020      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f860 	bl	8002218 <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f852 	bl	8002204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f863 	bl	800222c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fb9c 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f900 	bl	80023b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f834 	bl	8002240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0220 	mvn.w	r2, #32
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8d2 	bl	80023a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a43      	ldr	r2, [pc, #268]	@ (8002374 <TIM_Base_SetConfig+0x120>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002272:	d00f      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	@ (8002378 <TIM_Base_SetConfig+0x124>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <TIM_Base_SetConfig+0x128>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <TIM_Base_SetConfig+0x12c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	@ (8002384 <TIM_Base_SetConfig+0x130>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a32      	ldr	r2, [pc, #200]	@ (8002374 <TIM_Base_SetConfig+0x120>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d027      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002378 <TIM_Base_SetConfig+0x124>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d023      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <TIM_Base_SetConfig+0x128>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002380 <TIM_Base_SetConfig+0x12c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002384 <TIM_Base_SetConfig+0x130>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d017      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <TIM_Base_SetConfig+0x134>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2a      	ldr	r2, [pc, #168]	@ (800238c <TIM_Base_SetConfig+0x138>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <TIM_Base_SetConfig+0x13c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a28      	ldr	r2, [pc, #160]	@ (8002394 <TIM_Base_SetConfig+0x140>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <TIM_Base_SetConfig+0x144>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a26      	ldr	r2, [pc, #152]	@ (800239c <TIM_Base_SetConfig+0x148>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0e      	ldr	r2, [pc, #56]	@ (8002374 <TIM_Base_SetConfig+0x120>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d003      	beq.n	8002346 <TIM_Base_SetConfig+0xf2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <TIM_Base_SetConfig+0x130>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d103      	bne.n	800234e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40010000 	.word	0x40010000
 8002378:	40000400 	.word	0x40000400
 800237c:	40000800 	.word	0x40000800
 8002380:	40000c00 	.word	0x40000c00
 8002384:	40010400 	.word	0x40010400
 8002388:	40014000 	.word	0x40014000
 800238c:	40014400 	.word	0x40014400
 8002390:	40014800 	.word	0x40014800
 8002394:	40001800 	.word	0x40001800
 8002398:	40001c00 	.word	0x40001c00
 800239c:	40002000 	.word	0x40002000

080023a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <__NVIC_SetPriority>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	@ (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	@ (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <SysTick_Handler+0x1c>)
 8002422:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002424:	f001 fd46 	bl	8003eb4 <xTaskGetSchedulerState>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800242e:	f002 fb3b 	bl	8004aa8 <xPortSysTickHandler>
  }
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002440:	2100      	movs	r1, #0
 8002442:	f06f 0004 	mvn.w	r0, #4
 8002446:	f7ff ffbf 	bl	80023c8 <__NVIC_SetPriority>
#endif
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002456:	f3ef 8305 	mrs	r3, IPSR
 800245a:	603b      	str	r3, [r7, #0]
  return(result);
 800245c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002462:	f06f 0305 	mvn.w	r3, #5
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	e00c      	b.n	8002484 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <osKernelInitialize+0x44>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <osKernelInitialize+0x44>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	e002      	b.n	8002484 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002484:	687b      	ldr	r3, [r7, #4]
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	200000e8 	.word	0x200000e8

08002498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800249e:	f3ef 8305 	mrs	r3, IPSR
 80024a2:	603b      	str	r3, [r7, #0]
  return(result);
 80024a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80024aa:	f06f 0305 	mvn.w	r3, #5
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	e010      	b.n	80024d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <osKernelStart+0x48>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d109      	bne.n	80024ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80024ba:	f7ff ffbf 	bl	800243c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <osKernelStart+0x48>)
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80024c4:	f001 f892 	bl	80035ec <vTaskStartScheduler>
      stat = osOK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	e002      	b.n	80024d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200000e8 	.word	0x200000e8

080024e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	@ 0x38
 80024e8:	af04      	add	r7, sp, #16
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024f4:	f3ef 8305 	mrs	r3, IPSR
 80024f8:	617b      	str	r3, [r7, #20]
  return(result);
 80024fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d17e      	bne.n	80025fe <osThreadNew+0x11a>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d07b      	beq.n	80025fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800250a:	2318      	movs	r3, #24
 800250c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002516:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d045      	beq.n	80025aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <osThreadNew+0x48>
        name = attr->name;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <osThreadNew+0x6e>
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b38      	cmp	r3, #56	@ 0x38
 8002544:	d805      	bhi.n	8002552 <osThreadNew+0x6e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <osThreadNew+0x72>
        return (NULL);
 8002552:	2300      	movs	r3, #0
 8002554:	e054      	b.n	8002600 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <osThreadNew+0xa8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2ba7      	cmp	r3, #167	@ 0xa7
 8002574:	d90a      	bls.n	800258c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <osThreadNew+0xa8>
        mem = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e010      	b.n	80025ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10c      	bne.n	80025ae <osThreadNew+0xca>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <osThreadNew+0xca>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <osThreadNew+0xca>
          mem = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e001      	b.n	80025ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d110      	bne.n	80025d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025bc:	9202      	str	r2, [sp, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6a3a      	ldr	r2, [r7, #32]
 80025c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fe1a 	bl	8003204 <xTaskCreateStatic>
 80025d0:	4603      	mov	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e013      	b.n	80025fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d110      	bne.n	80025fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fe68 	bl	80032c4 <xTaskCreate>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <osThreadNew+0x11a>
            hTask = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025fe:	693b      	ldr	r3, [r7, #16]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3728      	adds	r7, #40	@ 0x28
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002610:	f3ef 8305 	mrs	r3, IPSR
 8002614:	60bb      	str	r3, [r7, #8]
  return(result);
 8002616:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <osDelay+0x1c>
    stat = osErrorISR;
 800261c:	f06f 0305 	mvn.w	r3, #5
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e007      	b.n	8002634 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <osDelay+0x2c>
      vTaskDelay(ticks);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 ffa6 	bl	8003580 <vTaskDelay>
    }
  }

  return (stat);
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a07      	ldr	r2, [pc, #28]	@ (800266c <vApplicationGetIdleTaskMemory+0x2c>)
 8002650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a06      	ldr	r2, [pc, #24]	@ (8002670 <vApplicationGetIdleTaskMemory+0x30>)
 8002656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200000ec 	.word	0x200000ec
 8002670:	20000194 	.word	0x20000194

08002674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <vApplicationGetTimerTaskMemory+0x30>)
 800268a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000394 	.word	0x20000394
 80026a4:	2000043c 	.word	0x2000043c

080026a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0208 	add.w	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002760:	d103      	bne.n	800276a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e00c      	b.n	8002784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3308      	adds	r3, #8
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e002      	b.n	8002778 <vListInsert+0x2e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d2f6      	bcs.n	8002772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d103      	bne.n	80027f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800283c:	f002 f8a4 	bl	8004988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	3b01      	subs	r3, #1
 800286e:	68f9      	ldr	r1, [r7, #12]
 8002870:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	441a      	add	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	22ff      	movs	r2, #255	@ 0xff
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d114      	bne.n	80028bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3310      	adds	r3, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f942 	bl	8003b28 <xTaskRemoveFromEventList>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <xQueueGenericReset+0xd0>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	e009      	b.n	80028d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fef1 	bl	80026a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff feec 	bl	80026a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028d0:	f002 f88c 	bl	80049ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08e      	sub	sp, #56	@ 0x38
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	e7fd      	b.n	800292a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <xQueueGenericCreateStatic+0x56>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <xQueueGenericCreateStatic+0x5a>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericCreateStatic+0x5c>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	623b      	str	r3, [r7, #32]
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <xQueueGenericCreateStatic+0x84>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <xQueueGenericCreateStatic+0x88>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <xQueueGenericCreateStatic+0x8a>
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	61fb      	str	r3, [r7, #28]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800298a:	2350      	movs	r3, #80	@ 0x50
 800298c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d00b      	beq.n	80029ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	61bb      	str	r3, [r7, #24]
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f805 	bl	80029de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	@ 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e002      	b.n	8002a00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	69b8      	ldr	r0, [r7, #24]
 8002a10:	f7ff fefe 	bl	8002810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <xQueueGenericSend+0x34>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <xQueueGenericSend+0x42>
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueGenericSend+0x46>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueGenericSend+0x48>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <xQueueGenericSend+0x64>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d103      	bne.n	8002a96 <xQueueGenericSend+0x72>
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <xQueueGenericSend+0x76>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <xQueueGenericSend+0x78>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <xQueueGenericSend+0x94>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	623b      	str	r3, [r7, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab8:	f001 f9fc 	bl	8003eb4 <xTaskGetSchedulerState>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <xQueueGenericSend+0xa4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <xQueueGenericSend+0xa8>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <xQueueGenericSend+0xaa>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <xQueueGenericSend+0xc6>
	__asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	61fb      	str	r3, [r7, #28]
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002aea:	f001 ff4d 	bl	8004988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d302      	bcc.n	8002b00 <xQueueGenericSend+0xdc>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d129      	bne.n	8002b54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b06:	f000 fa0f 	bl	8002f28 <prvCopyDataToQueue>
 8002b0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	3324      	adds	r3, #36	@ 0x24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 f805 	bl	8003b28 <xTaskRemoveFromEventList>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b24:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <xQueueGenericSend+0x200>)
 8002b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	e00a      	b.n	8002b4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <xQueueGenericSend+0x200>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b4c:	f001 ff4e 	bl	80049ec <vPortExitCritical>
				return pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e063      	b.n	8002c1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d103      	bne.n	8002b62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b5a:	f001 ff47 	bl	80049ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e05c      	b.n	8002c1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f83f 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b76:	f001 ff39 	bl	80049ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b7a:	f000 fda7 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b7e:	f001 ff03 	bl	8004988 <vPortEnterCritical>
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b8e:	d103      	bne.n	8002b98 <xQueueGenericSend+0x174>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ba4:	d103      	bne.n	8002bae <xQueueGenericSend+0x18a>
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bae:	f001 ff1d 	bl	80049ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb2:	1d3a      	adds	r2, r7, #4
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f82e 	bl	8003c1c <xTaskCheckForTimeOut>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d124      	bne.n	8002c10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bc8:	f000 faa6 	bl	8003118 <prvIsQueueFull>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd4:	3310      	adds	r3, #16
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 ff52 	bl	8003a84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002be0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002be2:	f000 fa31 	bl	8003048 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002be6:	f000 fd7f 	bl	80036e8 <xTaskResumeAll>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f af7c 	bne.w	8002aea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <xQueueGenericSend+0x200>)
 8002bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	e772      	b.n	8002aea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c06:	f000 fa1f 	bl	8003048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c0a:	f000 fd6d 	bl	80036e8 <xTaskResumeAll>
 8002c0e:	e76c      	b.n	8002aea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c12:	f000 fa19 	bl	8003048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c16:	f000 fd67 	bl	80036e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3738      	adds	r7, #56	@ 0x38
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b090      	sub	sp, #64	@ 0x40
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <xQueueGenericSendFromISR+0x3e>
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericSendFromISR+0x42>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericSendFromISR+0x44>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c82:	bf00      	nop
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d103      	bne.n	8002c96 <xQueueGenericSendFromISR+0x6e>
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <xQueueGenericSendFromISR+0x72>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueGenericSendFromISR+0x74>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	623b      	str	r3, [r7, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cb8:	f001 ff46 	bl	8004b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cbc:	f3ef 8211 	mrs	r2, BASEPRI
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <xQueueGenericSendFromISR+0xc2>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d12f      	bne.n	8002d4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d00:	f000 f912 	bl	8002f28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d0c:	d112      	bne.n	8002d34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	3324      	adds	r3, #36	@ 0x24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 ff04 	bl	8003b28 <xTaskRemoveFromEventList>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00e      	beq.n	8002d44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00b      	beq.n	8002d44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d44:	2301      	movs	r3, #1
 8002d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002d48:	e001      	b.n	8002d4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3740      	adds	r7, #64	@ 0x40
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	@ 0x30
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <xQueueReceive+0x32>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	623b      	str	r3, [r7, #32]
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	e7fd      	b.n	8002d92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <xQueueReceive+0x40>
 8002d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <xQueueReceive+0x44>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <xQueueReceive+0x46>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <xQueueReceive+0x62>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	61fb      	str	r3, [r7, #28]
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc6:	f001 f875 	bl	8003eb4 <xTaskGetSchedulerState>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <xQueueReceive+0x72>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xQueueReceive+0x76>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xQueueReceive+0x78>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <xQueueReceive+0x94>
	__asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	61bb      	str	r3, [r7, #24]
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df8:	f001 fdc6 	bl	8004988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01f      	beq.n	8002e48 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e0c:	f000 f8f6 	bl	8002ffc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00f      	beq.n	8002e40 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	3310      	adds	r3, #16
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fe7f 	bl	8003b28 <xTaskRemoveFromEventList>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <xQueueReceive+0x1c0>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e40:	f001 fdd4 	bl	80049ec <vPortExitCritical>
				return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e069      	b.n	8002f1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4e:	f001 fdcd 	bl	80049ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e062      	b.n	8002f1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fec5 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6a:	f001 fdbf 	bl	80049ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6e:	f000 fc2d 	bl	80036cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e72:	f001 fd89 	bl	8004988 <vPortEnterCritical>
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e82:	d103      	bne.n	8002e8c <xQueueReceive+0x128>
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e98:	d103      	bne.n	8002ea2 <xQueueReceive+0x13e>
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ea2:	f001 fda3 	bl	80049ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea6:	1d3a      	adds	r2, r7, #4
 8002ea8:	f107 0310 	add.w	r3, r7, #16
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 feb4 	bl	8003c1c <xTaskCheckForTimeOut>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d123      	bne.n	8002f02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ebc:	f000 f916 	bl	80030ec <prvIsQueueEmpty>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d017      	beq.n	8002ef6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	3324      	adds	r3, #36	@ 0x24
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fdd8 	bl	8003a84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ed6:	f000 f8b7 	bl	8003048 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002eda:	f000 fc05 	bl	80036e8 <xTaskResumeAll>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d189      	bne.n	8002df8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <xQueueReceive+0x1c0>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	e780      	b.n	8002df8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ef8:	f000 f8a6 	bl	8003048 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efc:	f000 fbf4 	bl	80036e8 <xTaskResumeAll>
 8002f00:	e77a      	b.n	8002df8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f04:	f000 f8a0 	bl	8003048 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f08:	f000 fbee 	bl	80036e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f0e:	f000 f8ed 	bl	80030ec <prvIsQueueEmpty>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f43f af6f 	beq.w	8002df8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3730      	adds	r7, #48	@ 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d14d      	bne.n	8002fea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 ffcc 	bl	8003ef0 <xTaskPriorityDisinherit>
 8002f58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e043      	b.n	8002fea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d119      	bne.n	8002f9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	461a      	mov	r2, r3
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	f002 fa09 	bl	800538a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	441a      	add	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d32b      	bcc.n	8002fea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	e026      	b.n	8002fea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68d8      	ldr	r0, [r3, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	f002 f9ef 	bl	800538a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	425b      	negs	r3, r3
 8002fb6:	441a      	add	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	425b      	negs	r3, r3
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d105      	bne.n	8002fea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002ff2:	697b      	ldr	r3, [r7, #20]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	441a      	add	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d303      	bcc.n	8003030 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68d9      	ldr	r1, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	461a      	mov	r2, r3
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f002 f9a5 	bl	800538a <memcpy>
	}
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003050:	f001 fc9a 	bl	8004988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800305a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800305c:	e011      	b.n	8003082 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	@ 0x24
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fd5c 	bl	8003b28 <xTaskRemoveFromEventList>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003076:	f000 fe35 	bl	8003ce4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3b01      	subs	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	dce9      	bgt.n	800305e <prvUnlockQueue+0x16>
 800308a:	e000      	b.n	800308e <prvUnlockQueue+0x46>
					break;
 800308c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	22ff      	movs	r2, #255	@ 0xff
 8003092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003096:	f001 fca9 	bl	80049ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800309a:	f001 fc75 	bl	8004988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030a6:	e011      	b.n	80030cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d012      	beq.n	80030d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3310      	adds	r3, #16
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fd37 	bl	8003b28 <xTaskRemoveFromEventList>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030c0:	f000 fe10 	bl	8003ce4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	dce9      	bgt.n	80030a8 <prvUnlockQueue+0x60>
 80030d4:	e000      	b.n	80030d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	22ff      	movs	r2, #255	@ 0xff
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80030e0:	f001 fc84 	bl	80049ec <vPortExitCritical>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030f4:	f001 fc48 	bl	8004988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e001      	b.n	800310a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800310a:	f001 fc6f 	bl	80049ec <vPortExitCritical>

	return xReturn;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003120:	f001 fc32 	bl	8004988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	429a      	cmp	r2, r3
 800312e:	d102      	bne.n	8003136 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e001      	b.n	800313a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fc57 	bl	80049ec <vPortExitCritical>

	return xReturn;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e014      	b.n	8003182 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003158:	4a0f      	ldr	r2, [pc, #60]	@ (8003198 <vQueueAddToRegistry+0x50>)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003164:	490c      	ldr	r1, [pc, #48]	@ (8003198 <vQueueAddToRegistry+0x50>)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <vQueueAddToRegistry+0x50>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800317a:	e006      	b.n	800318a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b07      	cmp	r3, #7
 8003186:	d9e7      	bls.n	8003158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	2000083c 	.word	0x2000083c

0800319c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031ac:	f001 fbec 	bl	8004988 <vPortEnterCritical>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031b6:	b25b      	sxtb	r3, r3
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031bc:	d103      	bne.n	80031c6 <vQueueWaitForMessageRestricted+0x2a>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d2:	d103      	bne.n	80031dc <vQueueWaitForMessageRestricted+0x40>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031dc:	f001 fc06 	bl	80049ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3324      	adds	r3, #36	@ 0x24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fc6d 	bl	8003ad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff26 	bl	8003048 <prvUnlockQueue>
	}
 80031fc:	bf00      	nop
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	@ 0x38
 8003208:	af04      	add	r7, sp, #16
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	61fb      	str	r3, [r7, #28]
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	e7fd      	b.n	800324a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800324e:	23a8      	movs	r3, #168	@ 0xa8
 8003250:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2ba8      	cmp	r3, #168	@ 0xa8
 8003256:	d00b      	beq.n	8003270 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61bb      	str	r3, [r7, #24]
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003270:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01e      	beq.n	80032b6 <xTaskCreateStatic+0xb2>
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01b      	beq.n	80032b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	2202      	movs	r2, #2
 800328c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003290:	2300      	movs	r3, #0
 8003292:	9303      	str	r3, [sp, #12]
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	9302      	str	r3, [sp, #8]
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f851 	bl	8003350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032b0:	f000 f8f6 	bl	80034a0 <prvAddNewTaskToReadyList>
 80032b4:	e001      	b.n	80032ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032ba:	697b      	ldr	r3, [r7, #20]
	}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	@ 0x30
 80032c8:	af04      	add	r7, sp, #16
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc77 	bl	8004bcc <pvPortMalloc>
 80032de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032e6:	20a8      	movs	r0, #168	@ 0xa8
 80032e8:	f001 fc70 	bl	8004bcc <pvPortMalloc>
 80032ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032fa:	e005      	b.n	8003308 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032fc:	6978      	ldr	r0, [r7, #20]
 80032fe:	f001 fd33 	bl	8004d68 <vPortFree>
 8003302:	e001      	b.n	8003308 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	2300      	movs	r3, #0
 800331a:	9303      	str	r3, [sp, #12]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f80f 	bl	8003350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003332:	69f8      	ldr	r0, [r7, #28]
 8003334:	f000 f8b4 	bl	80034a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003338:	2301      	movs	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e002      	b.n	8003344 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003342:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003344:	69bb      	ldr	r3, [r7, #24]
	}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	461a      	mov	r2, r3
 8003368:	21a5      	movs	r1, #165	@ 0xa5
 800336a:	f001 ff34 	bl	80051d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003378:	3b01      	subs	r3, #1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f023 0307 	bic.w	r3, r3, #7
 8003386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	617b      	str	r3, [r7, #20]
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	e7fd      	b.n	80033a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01f      	beq.n	80033f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	e012      	b.n	80033dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	7819      	ldrb	r1, [r3, #0]
 80033be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	4413      	add	r3, r2
 80033c4:	3334      	adds	r3, #52	@ 0x34
 80033c6:	460a      	mov	r2, r1
 80033c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d006      	beq.n	80033e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	d9e9      	bls.n	80033b6 <prvInitialiseNewTask+0x66>
 80033e2:	e000      	b.n	80033e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80033e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033ee:	e003      	b.n	80033f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	2b37      	cmp	r3, #55	@ 0x37
 80033fc:	d901      	bls.n	8003402 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033fe:	2337      	movs	r3, #55	@ 0x37
 8003400:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003406:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	2200      	movs	r2, #0
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	3304      	adds	r3, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f965 	bl	80026e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff f960 	bl	80026e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800342c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003436:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	2200      	movs	r2, #0
 8003442:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003448:	2200      	movs	r2, #0
 800344a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	3354      	adds	r3, #84	@ 0x54
 8003452:	224c      	movs	r2, #76	@ 0x4c
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f001 febd 	bl	80051d6 <memset>
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <prvInitialiseNewTask+0x144>)
 8003460:	659a      	str	r2, [r3, #88]	@ 0x58
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <prvInitialiseNewTask+0x148>)
 8003466:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <prvInitialiseNewTask+0x14c>)
 800346c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	69b8      	ldr	r0, [r7, #24]
 8003474:	f001 f95a 	bl	800472c <pxPortInitialiseStack>
 8003478:	4602      	mov	r2, r0
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800348a:	bf00      	nop
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20004ad0 	.word	0x20004ad0
 8003498:	20004b38 	.word	0x20004b38
 800349c:	20004ba0 	.word	0x20004ba0

080034a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034a8:	f001 fa6e 	bl	8004988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003568 <prvAddNewTaskToReadyList+0xc8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034be:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <prvAddNewTaskToReadyList+0xc8>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034c4:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <prvAddNewTaskToReadyList+0xc4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d110      	bne.n	80034ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034cc:	f000 fc2e 	bl	8003d2c <prvInitialiseTaskLists>
 80034d0:	e00d      	b.n	80034ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034d2:	4b26      	ldr	r3, [pc, #152]	@ (800356c <prvAddNewTaskToReadyList+0xcc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <prvAddNewTaskToReadyList+0xc8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d802      	bhi.n	80034ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003568 <prvAddNewTaskToReadyList+0xc8>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <prvAddNewTaskToReadyList+0xd0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <prvAddNewTaskToReadyList+0xd0>)
 80034f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <prvAddNewTaskToReadyList+0xd0>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <prvAddNewTaskToReadyList+0xd4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d903      	bls.n	8003514 <prvAddNewTaskToReadyList+0x74>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <prvAddNewTaskToReadyList+0xd4>)
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <prvAddNewTaskToReadyList+0xd8>)
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7ff f8e9 	bl	8002702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003530:	f001 fa5c 	bl	80049ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <prvAddNewTaskToReadyList+0xcc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353c:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <prvAddNewTaskToReadyList+0xc8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	429a      	cmp	r2, r3
 8003548:	d207      	bcs.n	800355a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <prvAddNewTaskToReadyList+0xdc>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000d50 	.word	0x20000d50
 8003568:	2000087c 	.word	0x2000087c
 800356c:	20000d5c 	.word	0x20000d5c
 8003570:	20000d6c 	.word	0x20000d6c
 8003574:	20000d58 	.word	0x20000d58
 8003578:	20000880 	.word	0x20000880
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003592:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <vTaskDelay+0x64>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <vTaskDelay+0x32>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	60bb      	str	r3, [r7, #8]
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	e7fd      	b.n	80035ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035b2:	f000 f88b 	bl	80036cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b6:	2100      	movs	r1, #0
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fd09 	bl	8003fd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035be:	f000 f893 	bl	80036e8 <xTaskResumeAll>
 80035c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <vTaskDelay+0x68>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000d78 	.word	0x20000d78
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035fa:	463a      	mov	r2, r7
 80035fc:	1d39      	adds	r1, r7, #4
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f81c 	bl	8002640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	9202      	str	r2, [sp, #8]
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	460a      	mov	r2, r1
 800361a:	4924      	ldr	r1, [pc, #144]	@ (80036ac <vTaskStartScheduler+0xc0>)
 800361c:	4824      	ldr	r0, [pc, #144]	@ (80036b0 <vTaskStartScheduler+0xc4>)
 800361e:	f7ff fdf1 	bl	8003204 <xTaskCreateStatic>
 8003622:	4603      	mov	r3, r0
 8003624:	4a23      	ldr	r2, [pc, #140]	@ (80036b4 <vTaskStartScheduler+0xc8>)
 8003626:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003628:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <vTaskStartScheduler+0xc8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e001      	b.n	800363a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003640:	f000 fd1a 	bl	8004078 <xTimerCreateTimerTask>
 8003644:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d11b      	bne.n	8003684 <vTaskStartScheduler+0x98>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	613b      	str	r3, [r7, #16]
}
 800365e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003660:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <vTaskStartScheduler+0xcc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3354      	adds	r3, #84	@ 0x54
 8003666:	4a15      	ldr	r2, [pc, #84]	@ (80036bc <vTaskStartScheduler+0xd0>)
 8003668:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <vTaskStartScheduler+0xd4>)
 800366c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003670:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003672:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <vTaskStartScheduler+0xd8>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003678:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <vTaskStartScheduler+0xdc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800367e:	f001 f8df 	bl	8004840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003682:	e00f      	b.n	80036a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368a:	d10b      	bne.n	80036a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60fb      	str	r3, [r7, #12]
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <vTaskStartScheduler+0xb4>
}
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08005f38 	.word	0x08005f38
 80036b0:	08003cfd 	.word	0x08003cfd
 80036b4:	20000d74 	.word	0x20000d74
 80036b8:	2000087c 	.word	0x2000087c
 80036bc:	2000001c 	.word	0x2000001c
 80036c0:	20000d70 	.word	0x20000d70
 80036c4:	20000d5c 	.word	0x20000d5c
 80036c8:	20000d54 	.word	0x20000d54

080036cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <vTaskSuspendAll+0x18>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a03      	ldr	r2, [pc, #12]	@ (80036e4 <vTaskSuspendAll+0x18>)
 80036d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20000d78 	.word	0x20000d78

080036e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036f6:	4b42      	ldr	r3, [pc, #264]	@ (8003800 <xTaskResumeAll+0x118>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <xTaskResumeAll+0x2e>
	__asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	603b      	str	r3, [r7, #0]
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	e7fd      	b.n	8003712 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003716:	f001 f937 	bl	8004988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800371a:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <xTaskResumeAll+0x118>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3b01      	subs	r3, #1
 8003720:	4a37      	ldr	r2, [pc, #220]	@ (8003800 <xTaskResumeAll+0x118>)
 8003722:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003724:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <xTaskResumeAll+0x118>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d162      	bne.n	80037f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800372c:	4b35      	ldr	r3, [pc, #212]	@ (8003804 <xTaskResumeAll+0x11c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05e      	beq.n	80037f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003734:	e02f      	b.n	8003796 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003736:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <xTaskResumeAll+0x120>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3318      	adds	r3, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f83a 	bl	80027bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f835 	bl	80027bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003756:	4b2d      	ldr	r3, [pc, #180]	@ (800380c <xTaskResumeAll+0x124>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d903      	bls.n	8003766 <xTaskResumeAll+0x7e>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <xTaskResumeAll+0x124>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <xTaskResumeAll+0x128>)
 8003774:	441a      	add	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe ffc0 	bl	8002702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <xTaskResumeAll+0x12c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003790:	4b21      	ldr	r3, [pc, #132]	@ (8003818 <xTaskResumeAll+0x130>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003796:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <xTaskResumeAll+0x120>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1cb      	bne.n	8003736 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037a4:	f000 fb66 	bl	8003e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037a8:	4b1c      	ldr	r3, [pc, #112]	@ (800381c <xTaskResumeAll+0x134>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d010      	beq.n	80037d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037b4:	f000 f846 	bl	8003844 <xTaskIncrementTick>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80037be:	4b16      	ldr	r3, [pc, #88]	@ (8003818 <xTaskResumeAll+0x130>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f1      	bne.n	80037b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80037d0:	4b12      	ldr	r3, [pc, #72]	@ (800381c <xTaskResumeAll+0x134>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <xTaskResumeAll+0x130>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <xTaskResumeAll+0x138>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037f2:	f001 f8fb 	bl	80049ec <vPortExitCritical>

	return xAlreadyYielded;
 80037f6:	68bb      	ldr	r3, [r7, #8]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000d78 	.word	0x20000d78
 8003804:	20000d50 	.word	0x20000d50
 8003808:	20000d10 	.word	0x20000d10
 800380c:	20000d58 	.word	0x20000d58
 8003810:	20000880 	.word	0x20000880
 8003814:	2000087c 	.word	0x2000087c
 8003818:	20000d64 	.word	0x20000d64
 800381c:	20000d60 	.word	0x20000d60
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <xTaskGetTickCount+0x1c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003830:	687b      	ldr	r3, [r7, #4]
}
 8003832:	4618      	mov	r0, r3
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000d54 	.word	0x20000d54

08003844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384e:	4b4f      	ldr	r3, [pc, #316]	@ (800398c <xTaskIncrementTick+0x148>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 8090 	bne.w	8003978 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003858:	4b4d      	ldr	r3, [pc, #308]	@ (8003990 <xTaskIncrementTick+0x14c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003860:	4a4b      	ldr	r2, [pc, #300]	@ (8003990 <xTaskIncrementTick+0x14c>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d121      	bne.n	80038b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800386c:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <xTaskIncrementTick+0x150>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	603b      	str	r3, [r7, #0]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <xTaskIncrementTick+0x46>
 800388e:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <xTaskIncrementTick+0x150>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	4b40      	ldr	r3, [pc, #256]	@ (8003998 <xTaskIncrementTick+0x154>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3e      	ldr	r2, [pc, #248]	@ (8003994 <xTaskIncrementTick+0x150>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4a3e      	ldr	r2, [pc, #248]	@ (8003998 <xTaskIncrementTick+0x154>)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b3e      	ldr	r3, [pc, #248]	@ (800399c <xTaskIncrementTick+0x158>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a3c      	ldr	r2, [pc, #240]	@ (800399c <xTaskIncrementTick+0x158>)
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	f000 fae2 	bl	8003e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038b0:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <xTaskIncrementTick+0x15c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d349      	bcc.n	800394e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ba:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <xTaskIncrementTick+0x150>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c4:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <xTaskIncrementTick+0x15c>)
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038ca:	601a      	str	r2, [r3, #0]
					break;
 80038cc:	e03f      	b.n	800394e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ce:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <xTaskIncrementTick+0x150>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d203      	bcs.n	80038ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038e6:	4a2e      	ldr	r2, [pc, #184]	@ (80039a0 <xTaskIncrementTick+0x15c>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ec:	e02f      	b.n	800394e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe ff62 	bl	80027bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	3318      	adds	r3, #24
 8003904:	4618      	mov	r0, r3
 8003906:	f7fe ff59 	bl	80027bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390e:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <xTaskIncrementTick+0x160>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d903      	bls.n	800391e <xTaskIncrementTick+0xda>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	4a22      	ldr	r2, [pc, #136]	@ (80039a4 <xTaskIncrementTick+0x160>)
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <xTaskIncrementTick+0x164>)
 800392c:	441a      	add	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3304      	adds	r3, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4610      	mov	r0, r2
 8003936:	f7fe fee4 	bl	8002702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <xTaskIncrementTick+0x168>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d3b8      	bcc.n	80038ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800394c:	e7b5      	b.n	80038ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800394e:	4b17      	ldr	r3, [pc, #92]	@ (80039ac <xTaskIncrementTick+0x168>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003954:	4914      	ldr	r1, [pc, #80]	@ (80039a8 <xTaskIncrementTick+0x164>)
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d901      	bls.n	800396a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <xTaskIncrementTick+0x16c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e004      	b.n	8003982 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003978:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <xTaskIncrementTick+0x170>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a0d      	ldr	r2, [pc, #52]	@ (80039b4 <xTaskIncrementTick+0x170>)
 8003980:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003982:	697b      	ldr	r3, [r7, #20]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000d78 	.word	0x20000d78
 8003990:	20000d54 	.word	0x20000d54
 8003994:	20000d08 	.word	0x20000d08
 8003998:	20000d0c 	.word	0x20000d0c
 800399c:	20000d68 	.word	0x20000d68
 80039a0:	20000d70 	.word	0x20000d70
 80039a4:	20000d58 	.word	0x20000d58
 80039a8:	20000880 	.word	0x20000880
 80039ac:	2000087c 	.word	0x2000087c
 80039b0:	20000d64 	.word	0x20000d64
 80039b4:	20000d60 	.word	0x20000d60

080039b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039be:	4b2b      	ldr	r3, [pc, #172]	@ (8003a6c <vTaskSwitchContext+0xb4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <vTaskSwitchContext+0xb8>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039cc:	e047      	b.n	8003a5e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80039ce:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <vTaskSwitchContext+0xb8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <vTaskSwitchContext+0xbc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e011      	b.n	8003a00 <vTaskSwitchContext+0x48>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <vTaskSwitchContext+0x42>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	607b      	str	r3, [r7, #4]
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <vTaskSwitchContext+0x3e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	491d      	ldr	r1, [pc, #116]	@ (8003a78 <vTaskSwitchContext+0xc0>)
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0e3      	beq.n	80039dc <vTaskSwitchContext+0x24>
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <vTaskSwitchContext+0xc0>)
 8003a20:	4413      	add	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3308      	adds	r3, #8
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d104      	bne.n	8003a44 <vTaskSwitchContext+0x8c>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a7c <vTaskSwitchContext+0xc4>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4a09      	ldr	r2, [pc, #36]	@ (8003a74 <vTaskSwitchContext+0xbc>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <vTaskSwitchContext+0xc4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3354      	adds	r3, #84	@ 0x54
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <vTaskSwitchContext+0xc8>)
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000d78 	.word	0x20000d78
 8003a70:	20000d64 	.word	0x20000d64
 8003a74:	20000d58 	.word	0x20000d58
 8003a78:	20000880 	.word	0x20000880
 8003a7c:	2000087c 	.word	0x2000087c
 8003a80:	2000001c 	.word	0x2000001c

08003a84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	60fb      	str	r3, [r7, #12]
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aac:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <vTaskPlaceOnEventList+0x48>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fe fe48 	bl	800274a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003aba:	2101      	movs	r1, #1
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	f000 fa87 	bl	8003fd0 <prvAddCurrentTaskToDelayedList>
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	2000087c 	.word	0x2000087c

08003ad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10b      	bne.n	8003afa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	617b      	str	r3, [r7, #20]
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	e7fd      	b.n	8003af6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <vTaskPlaceOnEventListRestricted+0x54>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3318      	adds	r3, #24
 8003b00:	4619      	mov	r1, r3
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7fe fdfd 	bl	8002702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	68b8      	ldr	r0, [r7, #8]
 8003b18:	f000 fa5a 	bl	8003fd0 <prvAddCurrentTaskToDelayedList>
	}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	2000087c 	.word	0x2000087c

08003b28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60fb      	str	r3, [r7, #12]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3318      	adds	r3, #24
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fe2e 	bl	80027bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b60:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd8 <xTaskRemoveFromEventList+0xb0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d11d      	bne.n	8003ba4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fe25 	bl	80027bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <xTaskRemoveFromEventList+0xb4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d903      	bls.n	8003b86 <xTaskRemoveFromEventList+0x5e>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <xTaskRemoveFromEventList+0xb4>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a13      	ldr	r2, [pc, #76]	@ (8003be0 <xTaskRemoveFromEventList+0xb8>)
 8003b94:	441a      	add	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe fdb0 	bl	8002702 <vListInsertEnd>
 8003ba2:	e005      	b.n	8003bb0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	480e      	ldr	r0, [pc, #56]	@ (8003be4 <xTaskRemoveFromEventList+0xbc>)
 8003bac:	f7fe fda9 	bl	8002702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <xTaskRemoveFromEventList+0xc0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d905      	bls.n	8003bca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <xTaskRemoveFromEventList+0xc4>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e001      	b.n	8003bce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000d78 	.word	0x20000d78
 8003bdc:	20000d58 	.word	0x20000d58
 8003be0:	20000880 	.word	0x20000880
 8003be4:	20000d10 	.word	0x20000d10
 8003be8:	2000087c 	.word	0x2000087c
 8003bec:	20000d64 	.word	0x20000d64

08003bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <vTaskInternalSetTimeOutState+0x24>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <vTaskInternalSetTimeOutState+0x28>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000d68 	.word	0x20000d68
 8003c18:	20000d54 	.word	0x20000d54

08003c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	bf00      	nop
 8003c60:	e7fd      	b.n	8003c5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003c62:	f000 fe91 	bl	8004988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c66:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <xTaskCheckForTimeOut+0xc0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c7e:	d102      	bne.n	8003c86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e023      	b.n	8003cce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <xTaskCheckForTimeOut+0xc4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d007      	beq.n	8003ca2 <xTaskCheckForTimeOut+0x86>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e015      	b.n	8003cce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d20b      	bcs.n	8003cc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff99 	bl	8003bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e004      	b.n	8003cce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f000 fe8d 	bl	80049ec <vPortExitCritical>

	return xReturn;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000d54 	.word	0x20000d54
 8003ce0:	20000d68 	.word	0x20000d68

08003ce4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <vTaskMissedYield+0x14>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000d64 	.word	0x20000d64

08003cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d04:	f000 f852 	bl	8003dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <prvIdleTask+0x28>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d9f9      	bls.n	8003d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <prvIdleTask+0x2c>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d20:	e7f0      	b.n	8003d04 <prvIdleTask+0x8>
 8003d22:	bf00      	nop
 8003d24:	20000880 	.word	0x20000880
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e00c      	b.n	8003d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a12      	ldr	r2, [pc, #72]	@ (8003d8c <prvInitialiseTaskLists+0x60>)
 8003d44:	4413      	add	r3, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fcae 	bl	80026a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b37      	cmp	r3, #55	@ 0x37
 8003d56:	d9ef      	bls.n	8003d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d58:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d5a:	f7fe fca5 	bl	80026a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5e:	480d      	ldr	r0, [pc, #52]	@ (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d60:	f7fe fca2 	bl	80026a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d64:	480c      	ldr	r0, [pc, #48]	@ (8003d98 <prvInitialiseTaskLists+0x6c>)
 8003d66:	f7fe fc9f 	bl	80026a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d6a:	480c      	ldr	r0, [pc, #48]	@ (8003d9c <prvInitialiseTaskLists+0x70>)
 8003d6c:	f7fe fc9c 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d70:	480b      	ldr	r0, [pc, #44]	@ (8003da0 <prvInitialiseTaskLists+0x74>)
 8003d72:	f7fe fc99 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <prvInitialiseTaskLists+0x78>)
 8003d78:	4a05      	ldr	r2, [pc, #20]	@ (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <prvInitialiseTaskLists+0x7c>)
 8003d7e:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000880 	.word	0x20000880
 8003d90:	20000ce0 	.word	0x20000ce0
 8003d94:	20000cf4 	.word	0x20000cf4
 8003d98:	20000d10 	.word	0x20000d10
 8003d9c:	20000d24 	.word	0x20000d24
 8003da0:	20000d3c 	.word	0x20000d3c
 8003da4:	20000d08 	.word	0x20000d08
 8003da8:	20000d0c 	.word	0x20000d0c

08003dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db2:	e019      	b.n	8003de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db4:	f000 fde8 	bl	8004988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <prvCheckTasksWaitingTermination+0x50>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fcf9 	bl	80027bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dde:	f000 fe05 	bl	80049ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f810 	bl	8003e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e1      	bne.n	8003db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000d24 	.word	0x20000d24
 8003e00:	20000d50 	.word	0x20000d50
 8003e04:	20000d38 	.word	0x20000d38

08003e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3354      	adds	r3, #84	@ 0x54
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 f9f7 	bl	8005208 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff9d 	bl	8004d68 <vPortFree>
				vPortFree( pxTCB );
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ff9a 	bl	8004d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e34:	e019      	b.n	8003e6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d103      	bne.n	8003e48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 ff91 	bl	8004d68 <vPortFree>
	}
 8003e46:	e010      	b.n	8003e6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d00b      	beq.n	8003e6a <prvDeleteTCB+0x62>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <prvDeleteTCB+0x5e>
	}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e8c:	e008      	b.n	8003ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000d08 	.word	0x20000d08
 8003eb0:	20000d70 	.word	0x20000d70

08003eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <xTaskGetSchedulerState+0x34>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	e008      	b.n	8003eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <xTaskGetSchedulerState+0x38>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e001      	b.n	8003eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eda:	687b      	ldr	r3, [r7, #4]
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000d5c 	.word	0x20000d5c
 8003eec:	20000d78 	.word	0x20000d78

08003ef0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d058      	beq.n	8003fb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f06:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc4 <xTaskPriorityDisinherit+0xd4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d00b      	beq.n	8003f28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60bb      	str	r3, [r7, #8]
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d02c      	beq.n	8003fb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d128      	bne.n	8003fb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fc26 	bl	80027bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <xTaskPriorityDisinherit+0xd8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d903      	bls.n	8003f98 <xTaskPriorityDisinherit+0xa8>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc8 <xTaskPriorityDisinherit+0xd8>)
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <xTaskPriorityDisinherit+0xdc>)
 8003fa6:	441a      	add	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7fe fba7 	bl	8002702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fb8:	697b      	ldr	r3, [r7, #20]
	}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000087c 	.word	0x2000087c
 8003fc8:	20000d58 	.word	0x20000d58
 8003fcc:	20000880 	.word	0x20000880

08003fd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fda:	4b21      	ldr	r3, [pc, #132]	@ (8004060 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe0:	4b20      	ldr	r3, [pc, #128]	@ (8004064 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fbe8 	bl	80027bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ff2:	d10a      	bne.n	800400a <prvAddCurrentTaskToDelayedList+0x3a>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8004064 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4819      	ldr	r0, [pc, #100]	@ (8004068 <prvAddCurrentTaskToDelayedList+0x98>)
 8004004:	f7fe fb7d 	bl	8002702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004008:	e026      	b.n	8004058 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004012:	4b14      	ldr	r3, [pc, #80]	@ (8004064 <prvAddCurrentTaskToDelayedList+0x94>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d209      	bcs.n	8004036 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004022:	4b12      	ldr	r3, [pc, #72]	@ (800406c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <prvAddCurrentTaskToDelayedList+0x94>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7fe fb8b 	bl	800274a <vListInsert>
}
 8004034:	e010      	b.n	8004058 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004036:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <prvAddCurrentTaskToDelayedList+0x94>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fe fb81 	bl	800274a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <prvAddCurrentTaskToDelayedList+0xa4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	d202      	bcs.n	8004058 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004052:	4a08      	ldr	r2, [pc, #32]	@ (8004074 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000d54 	.word	0x20000d54
 8004064:	2000087c 	.word	0x2000087c
 8004068:	20000d3c 	.word	0x20000d3c
 800406c:	20000d0c 	.word	0x20000d0c
 8004070:	20000d08 	.word	0x20000d08
 8004074:	20000d70 	.word	0x20000d70

08004078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	@ 0x28
 800407c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004082:	f000 fb13 	bl	80046ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <xTimerCreateTimerTask+0x84>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d021      	beq.n	80040d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004096:	1d3a      	adds	r2, r7, #4
 8004098:	f107 0108 	add.w	r1, r7, #8
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fae7 	bl	8002674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	9202      	str	r2, [sp, #8]
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	2302      	movs	r3, #2
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	460a      	mov	r2, r1
 80040b8:	4911      	ldr	r1, [pc, #68]	@ (8004100 <xTimerCreateTimerTask+0x88>)
 80040ba:	4812      	ldr	r0, [pc, #72]	@ (8004104 <xTimerCreateTimerTask+0x8c>)
 80040bc:	f7ff f8a2 	bl	8003204 <xTaskCreateStatic>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <xTimerCreateTimerTask+0x90>)
 80040c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040c6:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <xTimerCreateTimerTask+0x90>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	613b      	str	r3, [r7, #16]
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040f0:	697b      	ldr	r3, [r7, #20]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000dac 	.word	0x20000dac
 8004100:	08005f40 	.word	0x08005f40
 8004104:	08004245 	.word	0x08004245
 8004108:	20000db0 	.word	0x20000db0

0800410c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	@ 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <xTimerGenericCommand+0x30>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	623b      	str	r3, [r7, #32]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800413c:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <xTimerGenericCommand+0x98>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02a      	beq.n	800419a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b05      	cmp	r3, #5
 8004154:	dc18      	bgt.n	8004188 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004156:	f7ff fead 	bl	8003eb4 <xTaskGetSchedulerState>
 800415a:	4603      	mov	r3, r0
 800415c:	2b02      	cmp	r3, #2
 800415e:	d109      	bne.n	8004174 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004160:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <xTimerGenericCommand+0x98>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	f107 0110 	add.w	r1, r7, #16
 8004168:	2300      	movs	r3, #0
 800416a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416c:	f7fe fc5a 	bl	8002a24 <xQueueGenericSend>
 8004170:	6278      	str	r0, [r7, #36]	@ 0x24
 8004172:	e012      	b.n	800419a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <xTimerGenericCommand+0x98>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	f107 0110 	add.w	r1, r7, #16
 800417c:	2300      	movs	r3, #0
 800417e:	2200      	movs	r2, #0
 8004180:	f7fe fc50 	bl	8002a24 <xQueueGenericSend>
 8004184:	6278      	str	r0, [r7, #36]	@ 0x24
 8004186:	e008      	b.n	800419a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <xTimerGenericCommand+0x98>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	f107 0110 	add.w	r1, r7, #16
 8004190:	2300      	movs	r3, #0
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	f7fe fd48 	bl	8002c28 <xQueueGenericSendFromISR>
 8004198:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800419c:	4618      	mov	r0, r3
 800419e:	3728      	adds	r7, #40	@ 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000dac 	.word	0x20000dac

080041a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b2:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <prvProcessExpiredTimer+0x98>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fafb 	bl	80027bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d023      	beq.n	800421c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	18d1      	adds	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f000 f8d5 	bl	8004390 <prvInsertTimerInActiveList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	2100      	movs	r1, #0
 80041f6:	6978      	ldr	r0, [r7, #20]
 80041f8:	f7ff ff88 	bl	800410c <xTimerGenericCommand>
 80041fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d114      	bne.n	800422e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	4798      	blx	r3
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000da4 	.word	0x20000da4

08004244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800424c:	f107 0308 	add.w	r3, r7, #8
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f859 	bl	8004308 <prvGetNextExpireTime>
 8004256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4619      	mov	r1, r3
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f805 	bl	800426c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004262:	f000 f8d7 	bl	8004414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004266:	bf00      	nop
 8004268:	e7f0      	b.n	800424c <prvTimerTask+0x8>
	...

0800426c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004276:	f7ff fa29 	bl	80036cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800427a:	f107 0308 	add.w	r3, r7, #8
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f866 	bl	8004350 <prvSampleTimeNow>
 8004284:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d130      	bne.n	80042ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <prvProcessTimerOrBlockTask+0x3c>
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	429a      	cmp	r2, r3
 8004298:	d806      	bhi.n	80042a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800429a:	f7ff fa25 	bl	80036e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff81 	bl	80041a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042a6:	e024      	b.n	80042f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <prvProcessTimerOrBlockTask+0x90>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <prvProcessTimerOrBlockTask+0x50>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <prvProcessTimerOrBlockTask+0x52>
 80042bc:	2300      	movs	r3, #0
 80042be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004300 <prvProcessTimerOrBlockTask+0x94>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fe ff65 	bl	800319c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042d2:	f7ff fa09 	bl	80036e8 <xTaskResumeAll>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <prvProcessTimerOrBlockTask+0x98>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
}
 80042ec:	e001      	b.n	80042f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042ee:	f7ff f9fb 	bl	80036e8 <xTaskResumeAll>
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000da8 	.word	0x20000da8
 8004300:	20000dac 	.word	0x20000dac
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004310:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <prvGetNextExpireTime+0x44>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <prvGetNextExpireTime+0x16>
 800431a:	2201      	movs	r2, #1
 800431c:	e000      	b.n	8004320 <prvGetNextExpireTime+0x18>
 800431e:	2200      	movs	r2, #0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800432c:	4b07      	ldr	r3, [pc, #28]	@ (800434c <prvGetNextExpireTime+0x44>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	e001      	b.n	800433c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800433c:	68fb      	ldr	r3, [r7, #12]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000da4 	.word	0x20000da4

08004350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004358:	f7ff fa64 	bl	8003824 <xTaskGetTickCount>
 800435c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <prvSampleTimeNow+0x3c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	429a      	cmp	r2, r3
 8004366:	d205      	bcs.n	8004374 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004368:	f000 f93a 	bl	80045e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e002      	b.n	800437a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800437a:	4a04      	ldr	r2, [pc, #16]	@ (800438c <prvSampleTimeNow+0x3c>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000db4 	.word	0x20000db4

08004390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d812      	bhi.n	80043dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e01b      	b.n	8004402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <prvInsertTimerInActiveList+0x7c>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe f9b8 	bl	800274a <vListInsert>
 80043da:	e012      	b.n	8004402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d206      	bcs.n	80043f2 <prvInsertTimerInActiveList+0x62>
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e007      	b.n	8004402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <prvInsertTimerInActiveList+0x80>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4619      	mov	r1, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f7fe f9a4 	bl	800274a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004402:	697b      	ldr	r3, [r7, #20]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000da8 	.word	0x20000da8
 8004410:	20000da4 	.word	0x20000da4

08004414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	@ 0x38
 8004418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800441a:	e0ce      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da19      	bge.n	8004456 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004422:	1d3b      	adds	r3, r7, #4
 8004424:	3304      	adds	r3, #4
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61fb      	str	r3, [r7, #28]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800444c:	6850      	ldr	r0, [r2, #4]
 800444e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004450:	6892      	ldr	r2, [r2, #8]
 8004452:	4611      	mov	r1, r2
 8004454:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f2c0 80ae 	blt.w	80045ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe f9a4 	bl	80027bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004474:	463b      	mov	r3, r7
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff6a 	bl	8004350 <prvSampleTimeNow>
 800447c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b09      	cmp	r3, #9
 8004482:	f200 8097 	bhi.w	80045b4 <prvProcessReceivedCommands+0x1a0>
 8004486:	a201      	add	r2, pc, #4	@ (adr r2, 800448c <prvProcessReceivedCommands+0x78>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044b5 	.word	0x080044b5
 8004498:	0800452b 	.word	0x0800452b
 800449c:	0800453f 	.word	0x0800453f
 80044a0:	0800458b 	.word	0x0800458b
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044b5 	.word	0x080044b5
 80044ac:	0800452b 	.word	0x0800452b
 80044b0:	0800453f 	.word	0x0800453f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	18d1      	adds	r1, r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044d4:	f7ff ff5c 	bl	8004390 <prvInsertTimerInActiveList>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06c      	beq.n	80045b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d061      	beq.n	80045b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	441a      	add	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	2100      	movs	r1, #0
 8004504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004506:	f7ff fe01 	bl	800410c <xTimerGenericCommand>
 800450a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d152      	bne.n	80045b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61bb      	str	r3, [r7, #24]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	b2da      	uxtb	r2, r3
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800453c:	e03d      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	617b      	str	r3, [r7, #20]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	18d1      	adds	r1, r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004584:	f7ff ff04 	bl	8004390 <prvInsertTimerInActiveList>
					break;
 8004588:	e017      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800459a:	f000 fbe5 	bl	8004d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800459e:	e00c      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80045b2:	e002      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <prvProcessReceivedCommands+0x1a6>
					break;
 80045b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045ba:	4b08      	ldr	r3, [pc, #32]	@ (80045dc <prvProcessReceivedCommands+0x1c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	1d39      	adds	r1, r7, #4
 80045c0:	2200      	movs	r2, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fbce 	bl	8002d64 <xQueueReceive>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f47f af26 	bne.w	800441c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	3730      	adds	r7, #48	@ 0x30
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000dac 	.word	0x20000dac

080045e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045e6:	e049      	b.n	800467c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045e8:	4b2e      	ldr	r3, [pc, #184]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f2:	4b2c      	ldr	r3, [pc, #176]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3304      	adds	r3, #4
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe f8db 	bl	80027bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02f      	beq.n	800467c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	d90e      	bls.n	800464c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800463a:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3304      	adds	r3, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f7fe f880 	bl	800274a <vListInsert>
 800464a:	e017      	b.n	800467c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800464c:	2300      	movs	r3, #0
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	2100      	movs	r1, #0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fd58 	bl	800410c <xTimerGenericCommand>
 800465c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	603b      	str	r3, [r7, #0]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800467c:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1b0      	bne.n	80045e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004686:	4b07      	ldr	r3, [pc, #28]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <prvSwitchTimerLists+0xc8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <prvSwitchTimerLists+0xc4>)
 8004692:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <prvSwitchTimerLists+0xc8>)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	6013      	str	r3, [r2, #0]
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000da4 	.word	0x20000da4
 80046a8:	20000da8 	.word	0x20000da8

080046ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80046b2:	f000 f969 	bl	8004988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80046b6:	4b15      	ldr	r3, [pc, #84]	@ (800470c <prvCheckForValidListAndQueue+0x60>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d120      	bne.n	8004700 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80046be:	4814      	ldr	r0, [pc, #80]	@ (8004710 <prvCheckForValidListAndQueue+0x64>)
 80046c0:	f7fd fff2 	bl	80026a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80046c4:	4813      	ldr	r0, [pc, #76]	@ (8004714 <prvCheckForValidListAndQueue+0x68>)
 80046c6:	f7fd ffef 	bl	80026a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <prvCheckForValidListAndQueue+0x6c>)
 80046cc:	4a10      	ldr	r2, [pc, #64]	@ (8004710 <prvCheckForValidListAndQueue+0x64>)
 80046ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80046d0:	4b12      	ldr	r3, [pc, #72]	@ (800471c <prvCheckForValidListAndQueue+0x70>)
 80046d2:	4a10      	ldr	r2, [pc, #64]	@ (8004714 <prvCheckForValidListAndQueue+0x68>)
 80046d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <prvCheckForValidListAndQueue+0x74>)
 80046dc:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <prvCheckForValidListAndQueue+0x78>)
 80046de:	2110      	movs	r1, #16
 80046e0:	200a      	movs	r0, #10
 80046e2:	f7fe f8ff 	bl	80028e4 <xQueueGenericCreateStatic>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a08      	ldr	r2, [pc, #32]	@ (800470c <prvCheckForValidListAndQueue+0x60>)
 80046ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046ec:	4b07      	ldr	r3, [pc, #28]	@ (800470c <prvCheckForValidListAndQueue+0x60>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <prvCheckForValidListAndQueue+0x60>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	490b      	ldr	r1, [pc, #44]	@ (8004728 <prvCheckForValidListAndQueue+0x7c>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fd24 	bl	8003148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004700:	f000 f974 	bl	80049ec <vPortExitCritical>
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000dac 	.word	0x20000dac
 8004710:	20000d7c 	.word	0x20000d7c
 8004714:	20000d90 	.word	0x20000d90
 8004718:	20000da4 	.word	0x20000da4
 800471c:	20000da8 	.word	0x20000da8
 8004720:	20000e58 	.word	0x20000e58
 8004724:	20000db8 	.word	0x20000db8
 8004728:	08005f48 	.word	0x08005f48

0800472c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b04      	subs	r3, #4
 800473c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b04      	subs	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3b04      	subs	r3, #4
 800475a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800475c:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <pxPortInitialiseStack+0x64>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b14      	subs	r3, #20
 8004766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b04      	subs	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f06f 0202 	mvn.w	r2, #2
 800477a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b20      	subs	r3, #32
 8004780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004782:	68fb      	ldr	r3, [r7, #12]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	08004795 	.word	0x08004795

08004794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800479e:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <prvTaskExitError+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a6:	d00b      	beq.n	80047c0 <prvTaskExitError+0x2c>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60fb      	str	r3, [r7, #12]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <prvTaskExitError+0x28>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	60bb      	str	r3, [r7, #8]
}
 80047d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047d4:	bf00      	nop
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0fc      	beq.n	80047d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000000c 	.word	0x2000000c

080047f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <pxCurrentTCBConst2>)
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6808      	ldr	r0, [r1, #0]
 80047f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fa:	f380 8809 	msr	PSP, r0
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f380 8811 	msr	BASEPRI, r0
 800480a:	4770      	bx	lr
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst2>:
 8004810:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004818:	4808      	ldr	r0, [pc, #32]	@ (800483c <prvPortStartFirstTask+0x24>)
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f380 8808 	msr	MSP, r0
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8814 	msr	CONTROL, r0
 800482a:	b662      	cpsie	i
 800482c:	b661      	cpsie	f
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	df00      	svc	0
 8004838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800483a:	bf00      	nop
 800483c:	e000ed08 	.word	0xe000ed08

08004840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004846:	4b47      	ldr	r3, [pc, #284]	@ (8004964 <xPortStartScheduler+0x124>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a47      	ldr	r2, [pc, #284]	@ (8004968 <xPortStartScheduler+0x128>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10b      	bne.n	8004868 <xPortStartScheduler+0x28>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004868:	4b3e      	ldr	r3, [pc, #248]	@ (8004964 <xPortStartScheduler+0x124>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a3f      	ldr	r2, [pc, #252]	@ (800496c <xPortStartScheduler+0x12c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10b      	bne.n	800488a <xPortStartScheduler+0x4a>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	613b      	str	r3, [r7, #16]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800488a:	4b39      	ldr	r3, [pc, #228]	@ (8004970 <xPortStartScheduler+0x130>)
 800488c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	22ff      	movs	r2, #255	@ 0xff
 800489a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4b31      	ldr	r3, [pc, #196]	@ (8004974 <xPortStartScheduler+0x134>)
 80048b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048b2:	4b31      	ldr	r3, [pc, #196]	@ (8004978 <xPortStartScheduler+0x138>)
 80048b4:	2207      	movs	r2, #7
 80048b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048b8:	e009      	b.n	80048ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80048ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004978 <xPortStartScheduler+0x138>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004978 <xPortStartScheduler+0x138>)
 80048c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d0ef      	beq.n	80048ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048da:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <xPortStartScheduler+0x138>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1c3 0307 	rsb	r3, r3, #7
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d00b      	beq.n	80048fe <xPortStartScheduler+0xbe>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60bb      	str	r3, [r7, #8]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004978 <xPortStartScheduler+0x138>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	4a1c      	ldr	r2, [pc, #112]	@ (8004978 <xPortStartScheduler+0x138>)
 8004906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004908:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <xPortStartScheduler+0x138>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004910:	4a19      	ldr	r2, [pc, #100]	@ (8004978 <xPortStartScheduler+0x138>)
 8004912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	b2da      	uxtb	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800491c:	4b17      	ldr	r3, [pc, #92]	@ (800497c <xPortStartScheduler+0x13c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a16      	ldr	r2, [pc, #88]	@ (800497c <xPortStartScheduler+0x13c>)
 8004922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004928:	4b14      	ldr	r3, [pc, #80]	@ (800497c <xPortStartScheduler+0x13c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a13      	ldr	r2, [pc, #76]	@ (800497c <xPortStartScheduler+0x13c>)
 800492e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004934:	f000 f8da 	bl	8004aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <xPortStartScheduler+0x140>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800493e:	f000 f8f9 	bl	8004b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004942:	4b10      	ldr	r3, [pc, #64]	@ (8004984 <xPortStartScheduler+0x144>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a0f      	ldr	r2, [pc, #60]	@ (8004984 <xPortStartScheduler+0x144>)
 8004948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800494c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800494e:	f7ff ff63 	bl	8004818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004952:	f7ff f831 	bl	80039b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004956:	f7ff ff1d 	bl	8004794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	e000ed00 	.word	0xe000ed00
 8004968:	410fc271 	.word	0x410fc271
 800496c:	410fc270 	.word	0x410fc270
 8004970:	e000e400 	.word	0xe000e400
 8004974:	20000ea8 	.word	0x20000ea8
 8004978:	20000eac 	.word	0x20000eac
 800497c:	e000ed20 	.word	0xe000ed20
 8004980:	2000000c 	.word	0x2000000c
 8004984:	e000ef34 	.word	0xe000ef34

08004988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
}
 80049a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <vPortEnterCritical+0x5c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	4a0e      	ldr	r2, [pc, #56]	@ (80049e4 <vPortEnterCritical+0x5c>)
 80049aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049ac:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <vPortEnterCritical+0x5c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d110      	bne.n	80049d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <vPortEnterCritical+0x60>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	603b      	str	r3, [r7, #0]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <vPortEnterCritical+0x4a>
	}
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80049f2:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <vPortExitCritical+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <vPortExitCritical+0x26>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	607b      	str	r3, [r7, #4]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a12:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <vPortExitCritical+0x50>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	4a08      	ldr	r2, [pc, #32]	@ (8004a3c <vPortExitCritical+0x50>)
 8004a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a1c:	4b07      	ldr	r3, [pc, #28]	@ (8004a3c <vPortExitCritical+0x50>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <vPortExitCritical+0x44>
 8004a24:	2300      	movs	r3, #0
 8004a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
}
 8004a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a40:	f3ef 8009 	mrs	r0, PSP
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <pxCurrentTCBConst>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	f01e 0f10 	tst.w	lr, #16
 8004a50:	bf08      	it	eq
 8004a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	6010      	str	r0, [r2, #0]
 8004a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a64:	f380 8811 	msr	BASEPRI, r0
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f7fe ffa2 	bl	80039b8 <vTaskSwitchContext>
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f380 8811 	msr	BASEPRI, r0
 8004a7c:	bc09      	pop	{r0, r3}
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	6808      	ldr	r0, [r1, #0]
 8004a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a86:	f01e 0f10 	tst.w	lr, #16
 8004a8a:	bf08      	it	eq
 8004a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a90:	f380 8809 	msr	PSP, r0
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst>:
 8004aa0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	607b      	str	r3, [r7, #4]
}
 8004ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ac2:	f7fe febf 	bl	8003844 <xTaskIncrementTick>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004acc:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <xPortSysTickHandler+0x40>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f383 8811 	msr	BASEPRI, r3
}
 8004ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <vPortSetupTimerInterrupt+0x34>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <vPortSetupTimerInterrupt+0x38>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004afc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <vPortSetupTimerInterrupt+0x3c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <vPortSetupTimerInterrupt+0x40>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <vPortSetupTimerInterrupt+0x44>)
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b0e:	4b04      	ldr	r3, [pc, #16]	@ (8004b20 <vPortSetupTimerInterrupt+0x34>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e010 	.word	0xe000e010
 8004b24:	e000e018 	.word	0xe000e018
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	10624dd3 	.word	0x10624dd3
 8004b30:	e000e014 	.word	0xe000e014

08004b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b44 <vPortEnableVFP+0x10>
 8004b38:	6801      	ldr	r1, [r0, #0]
 8004b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b3e:	6001      	str	r1, [r0, #0]
 8004b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b42:	bf00      	nop
 8004b44:	e000ed88 	.word	0xe000ed88

08004b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b4e:	f3ef 8305 	mrs	r3, IPSR
 8004b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d915      	bls.n	8004b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b5a:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <vPortValidateInterruptPriority+0x74>)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b64:	4b16      	ldr	r3, [pc, #88]	@ (8004bc0 <vPortValidateInterruptPriority+0x78>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	7afa      	ldrb	r2, [r7, #11]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20b      	bcs.n	8004b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	607b      	str	r3, [r7, #4]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <vPortValidateInterruptPriority+0x7c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <vPortValidateInterruptPriority+0x80>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d90b      	bls.n	8004bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	603b      	str	r3, [r7, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <vPortValidateInterruptPriority+0x62>
	}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000e3f0 	.word	0xe000e3f0
 8004bc0:	20000ea8 	.word	0x20000ea8
 8004bc4:	e000ed0c 	.word	0xe000ed0c
 8004bc8:	20000eac 	.word	0x20000eac

08004bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	@ 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bd8:	f7fe fd78 	bl	80036cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8004d50 <pvPortMalloc+0x184>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004be4:	f000 f924 	bl	8004e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004be8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d54 <pvPortMalloc+0x188>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 8095 	bne.w	8004d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01e      	beq.n	8004c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d015      	beq.n	8004c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f023 0307 	bic.w	r3, r3, #7
 8004c14:	3308      	adds	r3, #8
 8004c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <pvPortMalloc+0x6e>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	617b      	str	r3, [r7, #20]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d06f      	beq.n	8004d20 <pvPortMalloc+0x154>
 8004c40:	4b45      	ldr	r3, [pc, #276]	@ (8004d58 <pvPortMalloc+0x18c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d86a      	bhi.n	8004d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c4a:	4b44      	ldr	r3, [pc, #272]	@ (8004d5c <pvPortMalloc+0x190>)
 8004c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c4e:	4b43      	ldr	r3, [pc, #268]	@ (8004d5c <pvPortMalloc+0x190>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c54:	e004      	b.n	8004c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d903      	bls.n	8004c72 <pvPortMalloc+0xa6>
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f1      	bne.n	8004c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c72:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <pvPortMalloc+0x184>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d051      	beq.n	8004d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2208      	movs	r2, #8
 8004c82:	4413      	add	r3, r2
 8004c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	1ad2      	subs	r2, r2, r3
 8004c96:	2308      	movs	r3, #8
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d920      	bls.n	8004ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cda:	69b8      	ldr	r0, [r7, #24]
 8004cdc:	f000 f90a 	bl	8004ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <pvPortMalloc+0x18c>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	4a1b      	ldr	r2, [pc, #108]	@ (8004d58 <pvPortMalloc+0x18c>)
 8004cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cee:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <pvPortMalloc+0x18c>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <pvPortMalloc+0x194>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <pvPortMalloc+0x18c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <pvPortMalloc+0x194>)
 8004d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <pvPortMalloc+0x188>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d16:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <pvPortMalloc+0x198>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <pvPortMalloc+0x198>)
 8004d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d20:	f7fe fce2 	bl	80036e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <pvPortMalloc+0x17a>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60fb      	str	r3, [r7, #12]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <pvPortMalloc+0x176>
	return pvReturn;
 8004d46:	69fb      	ldr	r3, [r7, #28]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3728      	adds	r7, #40	@ 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20004ab8 	.word	0x20004ab8
 8004d54:	20004acc 	.word	0x20004acc
 8004d58:	20004abc 	.word	0x20004abc
 8004d5c:	20004ab0 	.word	0x20004ab0
 8004d60:	20004ac0 	.word	0x20004ac0
 8004d64:	20004ac4 	.word	0x20004ac4

08004d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d04f      	beq.n	8004e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <vPortFree+0xbc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <vPortFree+0x46>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60fb      	str	r3, [r7, #12]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <vPortFree+0x66>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <vPortFree+0xbc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01e      	beq.n	8004e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11a      	bne.n	8004e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <vPortFree+0xbc>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004df4:	f7fe fc6a 	bl	80036cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <vPortFree+0xc0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4413      	add	r3, r2
 8004e02:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <vPortFree+0xc0>)
 8004e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e06:	6938      	ldr	r0, [r7, #16]
 8004e08:	f000 f874 	bl	8004ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e0c:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <vPortFree+0xc4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3301      	adds	r3, #1
 8004e12:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <vPortFree+0xc4>)
 8004e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e16:	f7fe fc67 	bl	80036e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20004acc 	.word	0x20004acc
 8004e28:	20004abc 	.word	0x20004abc
 8004e2c:	20004ac8 	.word	0x20004ac8

08004e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e3c:	4b27      	ldr	r3, [pc, #156]	@ (8004edc <prvHeapInit+0xac>)
 8004e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00c      	beq.n	8004e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3307      	adds	r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <prvHeapInit+0xac>)
 8004e60:	4413      	add	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e68:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee0 <prvHeapInit+0xb0>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee0 <prvHeapInit+0xb0>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4413      	add	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	@ (8004ee4 <prvHeapInit+0xb4>)
 8004e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e92:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <prvHeapInit+0xb4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <prvHeapInit+0xb4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <prvHeapInit+0xb4>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <prvHeapInit+0xb8>)
 8004ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a09      	ldr	r2, [pc, #36]	@ (8004eec <prvHeapInit+0xbc>)
 8004ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ec8:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <prvHeapInit+0xc0>)
 8004eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004ece:	601a      	str	r2, [r3, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000eb0 	.word	0x20000eb0
 8004ee0:	20004ab0 	.word	0x20004ab0
 8004ee4:	20004ab8 	.word	0x20004ab8
 8004ee8:	20004ac0 	.word	0x20004ac0
 8004eec:	20004abc 	.word	0x20004abc
 8004ef0:	20004acc 	.word	0x20004acc

08004ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <prvInsertBlockIntoFreeList+0xac>)
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e002      	b.n	8004f08 <prvInsertBlockIntoFreeList+0x14>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d8f7      	bhi.n	8004f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d108      	bne.n	8004f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	441a      	add	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d118      	bne.n	8004f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d00d      	beq.n	8004f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e008      	b.n	8004f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f72:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e003      	b.n	8004f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d002      	beq.n	8004f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20004ab0 	.word	0x20004ab0
 8004fa4:	20004ab8 	.word	0x20004ab8

08004fa8 <std>:
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b510      	push	{r4, lr}
 8004fac:	4604      	mov	r4, r0
 8004fae:	e9c0 3300 	strd	r3, r3, [r0]
 8004fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fb6:	6083      	str	r3, [r0, #8]
 8004fb8:	8181      	strh	r1, [r0, #12]
 8004fba:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fbc:	81c2      	strh	r2, [r0, #14]
 8004fbe:	6183      	str	r3, [r0, #24]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	305c      	adds	r0, #92	@ 0x5c
 8004fc6:	f000 f906 	bl	80051d6 <memset>
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <std+0x58>)
 8004fcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <std+0x5c>)
 8004fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <std+0x60>)
 8004fd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <std+0x64>)
 8004fd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <std+0x68>)
 8004fdc:	6224      	str	r4, [r4, #32]
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d006      	beq.n	8004ff0 <std+0x48>
 8004fe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fe6:	4294      	cmp	r4, r2
 8004fe8:	d002      	beq.n	8004ff0 <std+0x48>
 8004fea:	33d0      	adds	r3, #208	@ 0xd0
 8004fec:	429c      	cmp	r4, r3
 8004fee:	d105      	bne.n	8004ffc <std+0x54>
 8004ff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff8:	f000 b9c4 	b.w	8005384 <__retarget_lock_init_recursive>
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	bf00      	nop
 8005000:	08005151 	.word	0x08005151
 8005004:	08005173 	.word	0x08005173
 8005008:	080051ab 	.word	0x080051ab
 800500c:	080051cf 	.word	0x080051cf
 8005010:	20004ad0 	.word	0x20004ad0

08005014 <stdio_exit_handler>:
 8005014:	4a02      	ldr	r2, [pc, #8]	@ (8005020 <stdio_exit_handler+0xc>)
 8005016:	4903      	ldr	r1, [pc, #12]	@ (8005024 <stdio_exit_handler+0x10>)
 8005018:	4803      	ldr	r0, [pc, #12]	@ (8005028 <stdio_exit_handler+0x14>)
 800501a:	f000 b869 	b.w	80050f0 <_fwalk_sglue>
 800501e:	bf00      	nop
 8005020:	20000010 	.word	0x20000010
 8005024:	08005c3d 	.word	0x08005c3d
 8005028:	20000020 	.word	0x20000020

0800502c <cleanup_stdio>:
 800502c:	6841      	ldr	r1, [r0, #4]
 800502e:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <cleanup_stdio+0x34>)
 8005030:	4299      	cmp	r1, r3
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	d001      	beq.n	800503c <cleanup_stdio+0x10>
 8005038:	f000 fe00 	bl	8005c3c <_fflush_r>
 800503c:	68a1      	ldr	r1, [r4, #8]
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <cleanup_stdio+0x38>)
 8005040:	4299      	cmp	r1, r3
 8005042:	d002      	beq.n	800504a <cleanup_stdio+0x1e>
 8005044:	4620      	mov	r0, r4
 8005046:	f000 fdf9 	bl	8005c3c <_fflush_r>
 800504a:	68e1      	ldr	r1, [r4, #12]
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <cleanup_stdio+0x3c>)
 800504e:	4299      	cmp	r1, r3
 8005050:	d004      	beq.n	800505c <cleanup_stdio+0x30>
 8005052:	4620      	mov	r0, r4
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005058:	f000 bdf0 	b.w	8005c3c <_fflush_r>
 800505c:	bd10      	pop	{r4, pc}
 800505e:	bf00      	nop
 8005060:	20004ad0 	.word	0x20004ad0
 8005064:	20004b38 	.word	0x20004b38
 8005068:	20004ba0 	.word	0x20004ba0

0800506c <global_stdio_init.part.0>:
 800506c:	b510      	push	{r4, lr}
 800506e:	4b0b      	ldr	r3, [pc, #44]	@ (800509c <global_stdio_init.part.0+0x30>)
 8005070:	4c0b      	ldr	r4, [pc, #44]	@ (80050a0 <global_stdio_init.part.0+0x34>)
 8005072:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <global_stdio_init.part.0+0x38>)
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	4620      	mov	r0, r4
 8005078:	2200      	movs	r2, #0
 800507a:	2104      	movs	r1, #4
 800507c:	f7ff ff94 	bl	8004fa8 <std>
 8005080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005084:	2201      	movs	r2, #1
 8005086:	2109      	movs	r1, #9
 8005088:	f7ff ff8e 	bl	8004fa8 <std>
 800508c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005090:	2202      	movs	r2, #2
 8005092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005096:	2112      	movs	r1, #18
 8005098:	f7ff bf86 	b.w	8004fa8 <std>
 800509c:	20004c08 	.word	0x20004c08
 80050a0:	20004ad0 	.word	0x20004ad0
 80050a4:	08005015 	.word	0x08005015

080050a8 <__sfp_lock_acquire>:
 80050a8:	4801      	ldr	r0, [pc, #4]	@ (80050b0 <__sfp_lock_acquire+0x8>)
 80050aa:	f000 b96c 	b.w	8005386 <__retarget_lock_acquire_recursive>
 80050ae:	bf00      	nop
 80050b0:	20004c11 	.word	0x20004c11

080050b4 <__sfp_lock_release>:
 80050b4:	4801      	ldr	r0, [pc, #4]	@ (80050bc <__sfp_lock_release+0x8>)
 80050b6:	f000 b967 	b.w	8005388 <__retarget_lock_release_recursive>
 80050ba:	bf00      	nop
 80050bc:	20004c11 	.word	0x20004c11

080050c0 <__sinit>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4604      	mov	r4, r0
 80050c4:	f7ff fff0 	bl	80050a8 <__sfp_lock_acquire>
 80050c8:	6a23      	ldr	r3, [r4, #32]
 80050ca:	b11b      	cbz	r3, 80050d4 <__sinit+0x14>
 80050cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d0:	f7ff bff0 	b.w	80050b4 <__sfp_lock_release>
 80050d4:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <__sinit+0x28>)
 80050d6:	6223      	str	r3, [r4, #32]
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <__sinit+0x2c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f5      	bne.n	80050cc <__sinit+0xc>
 80050e0:	f7ff ffc4 	bl	800506c <global_stdio_init.part.0>
 80050e4:	e7f2      	b.n	80050cc <__sinit+0xc>
 80050e6:	bf00      	nop
 80050e8:	0800502d 	.word	0x0800502d
 80050ec:	20004c08 	.word	0x20004c08

080050f0 <_fwalk_sglue>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	4607      	mov	r7, r0
 80050f6:	4688      	mov	r8, r1
 80050f8:	4614      	mov	r4, r2
 80050fa:	2600      	movs	r6, #0
 80050fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005100:	f1b9 0901 	subs.w	r9, r9, #1
 8005104:	d505      	bpl.n	8005112 <_fwalk_sglue+0x22>
 8005106:	6824      	ldr	r4, [r4, #0]
 8005108:	2c00      	cmp	r4, #0
 800510a:	d1f7      	bne.n	80050fc <_fwalk_sglue+0xc>
 800510c:	4630      	mov	r0, r6
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d907      	bls.n	8005128 <_fwalk_sglue+0x38>
 8005118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800511c:	3301      	adds	r3, #1
 800511e:	d003      	beq.n	8005128 <_fwalk_sglue+0x38>
 8005120:	4629      	mov	r1, r5
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	4306      	orrs	r6, r0
 8005128:	3568      	adds	r5, #104	@ 0x68
 800512a:	e7e9      	b.n	8005100 <_fwalk_sglue+0x10>

0800512c <iprintf>:
 800512c:	b40f      	push	{r0, r1, r2, r3}
 800512e:	b507      	push	{r0, r1, r2, lr}
 8005130:	4906      	ldr	r1, [pc, #24]	@ (800514c <iprintf+0x20>)
 8005132:	ab04      	add	r3, sp, #16
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	f853 2b04 	ldr.w	r2, [r3], #4
 800513a:	6881      	ldr	r1, [r0, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	f000 fa55 	bl	80055ec <_vfiprintf_r>
 8005142:	b003      	add	sp, #12
 8005144:	f85d eb04 	ldr.w	lr, [sp], #4
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr
 800514c:	2000001c 	.word	0x2000001c

08005150 <__sread>:
 8005150:	b510      	push	{r4, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005158:	f000 f8c6 	bl	80052e8 <_read_r>
 800515c:	2800      	cmp	r0, #0
 800515e:	bfab      	itete	ge
 8005160:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005162:	89a3      	ldrhlt	r3, [r4, #12]
 8005164:	181b      	addge	r3, r3, r0
 8005166:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800516a:	bfac      	ite	ge
 800516c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800516e:	81a3      	strhlt	r3, [r4, #12]
 8005170:	bd10      	pop	{r4, pc}

08005172 <__swrite>:
 8005172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005176:	461f      	mov	r7, r3
 8005178:	898b      	ldrh	r3, [r1, #12]
 800517a:	05db      	lsls	r3, r3, #23
 800517c:	4605      	mov	r5, r0
 800517e:	460c      	mov	r4, r1
 8005180:	4616      	mov	r6, r2
 8005182:	d505      	bpl.n	8005190 <__swrite+0x1e>
 8005184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005188:	2302      	movs	r3, #2
 800518a:	2200      	movs	r2, #0
 800518c:	f000 f89a 	bl	80052c4 <_lseek_r>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	4632      	mov	r2, r6
 800519e:	463b      	mov	r3, r7
 80051a0:	4628      	mov	r0, r5
 80051a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a6:	f000 b8b1 	b.w	800530c <_write_r>

080051aa <__sseek>:
 80051aa:	b510      	push	{r4, lr}
 80051ac:	460c      	mov	r4, r1
 80051ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b2:	f000 f887 	bl	80052c4 <_lseek_r>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	bf15      	itete	ne
 80051bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051c6:	81a3      	strheq	r3, [r4, #12]
 80051c8:	bf18      	it	ne
 80051ca:	81a3      	strhne	r3, [r4, #12]
 80051cc:	bd10      	pop	{r4, pc}

080051ce <__sclose>:
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 b809 	b.w	80051e8 <_close_r>

080051d6 <memset>:
 80051d6:	4402      	add	r2, r0
 80051d8:	4603      	mov	r3, r0
 80051da:	4293      	cmp	r3, r2
 80051dc:	d100      	bne.n	80051e0 <memset+0xa>
 80051de:	4770      	bx	lr
 80051e0:	f803 1b01 	strb.w	r1, [r3], #1
 80051e4:	e7f9      	b.n	80051da <memset+0x4>
	...

080051e8 <_close_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d06      	ldr	r5, [pc, #24]	@ (8005204 <_close_r+0x1c>)
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	f7fb fc8f 	bl	8000b16 <_close>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_close_r+0x1a>
 80051fc:	682b      	ldr	r3, [r5, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_close_r+0x1a>
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20004c0c 	.word	0x20004c0c

08005208 <_reclaim_reent>:
 8005208:	4b2d      	ldr	r3, [pc, #180]	@ (80052c0 <_reclaim_reent+0xb8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4283      	cmp	r3, r0
 800520e:	b570      	push	{r4, r5, r6, lr}
 8005210:	4604      	mov	r4, r0
 8005212:	d053      	beq.n	80052bc <_reclaim_reent+0xb4>
 8005214:	69c3      	ldr	r3, [r0, #28]
 8005216:	b31b      	cbz	r3, 8005260 <_reclaim_reent+0x58>
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	b163      	cbz	r3, 8005236 <_reclaim_reent+0x2e>
 800521c:	2500      	movs	r5, #0
 800521e:	69e3      	ldr	r3, [r4, #28]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	5959      	ldr	r1, [r3, r5]
 8005224:	b9b1      	cbnz	r1, 8005254 <_reclaim_reent+0x4c>
 8005226:	3504      	adds	r5, #4
 8005228:	2d80      	cmp	r5, #128	@ 0x80
 800522a:	d1f8      	bne.n	800521e <_reclaim_reent+0x16>
 800522c:	69e3      	ldr	r3, [r4, #28]
 800522e:	4620      	mov	r0, r4
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	f000 f8b9 	bl	80053a8 <_free_r>
 8005236:	69e3      	ldr	r3, [r4, #28]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	b111      	cbz	r1, 8005242 <_reclaim_reent+0x3a>
 800523c:	4620      	mov	r0, r4
 800523e:	f000 f8b3 	bl	80053a8 <_free_r>
 8005242:	69e3      	ldr	r3, [r4, #28]
 8005244:	689d      	ldr	r5, [r3, #8]
 8005246:	b15d      	cbz	r5, 8005260 <_reclaim_reent+0x58>
 8005248:	4629      	mov	r1, r5
 800524a:	4620      	mov	r0, r4
 800524c:	682d      	ldr	r5, [r5, #0]
 800524e:	f000 f8ab 	bl	80053a8 <_free_r>
 8005252:	e7f8      	b.n	8005246 <_reclaim_reent+0x3e>
 8005254:	680e      	ldr	r6, [r1, #0]
 8005256:	4620      	mov	r0, r4
 8005258:	f000 f8a6 	bl	80053a8 <_free_r>
 800525c:	4631      	mov	r1, r6
 800525e:	e7e1      	b.n	8005224 <_reclaim_reent+0x1c>
 8005260:	6961      	ldr	r1, [r4, #20]
 8005262:	b111      	cbz	r1, 800526a <_reclaim_reent+0x62>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 f89f 	bl	80053a8 <_free_r>
 800526a:	69e1      	ldr	r1, [r4, #28]
 800526c:	b111      	cbz	r1, 8005274 <_reclaim_reent+0x6c>
 800526e:	4620      	mov	r0, r4
 8005270:	f000 f89a 	bl	80053a8 <_free_r>
 8005274:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005276:	b111      	cbz	r1, 800527e <_reclaim_reent+0x76>
 8005278:	4620      	mov	r0, r4
 800527a:	f000 f895 	bl	80053a8 <_free_r>
 800527e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005280:	b111      	cbz	r1, 8005288 <_reclaim_reent+0x80>
 8005282:	4620      	mov	r0, r4
 8005284:	f000 f890 	bl	80053a8 <_free_r>
 8005288:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800528a:	b111      	cbz	r1, 8005292 <_reclaim_reent+0x8a>
 800528c:	4620      	mov	r0, r4
 800528e:	f000 f88b 	bl	80053a8 <_free_r>
 8005292:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005294:	b111      	cbz	r1, 800529c <_reclaim_reent+0x94>
 8005296:	4620      	mov	r0, r4
 8005298:	f000 f886 	bl	80053a8 <_free_r>
 800529c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800529e:	b111      	cbz	r1, 80052a6 <_reclaim_reent+0x9e>
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 f881 	bl	80053a8 <_free_r>
 80052a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80052a8:	b111      	cbz	r1, 80052b0 <_reclaim_reent+0xa8>
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 f87c 	bl	80053a8 <_free_r>
 80052b0:	6a23      	ldr	r3, [r4, #32]
 80052b2:	b11b      	cbz	r3, 80052bc <_reclaim_reent+0xb4>
 80052b4:	4620      	mov	r0, r4
 80052b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052ba:	4718      	bx	r3
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	bf00      	nop
 80052c0:	2000001c 	.word	0x2000001c

080052c4 <_lseek_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d07      	ldr	r5, [pc, #28]	@ (80052e4 <_lseek_r+0x20>)
 80052c8:	4604      	mov	r4, r0
 80052ca:	4608      	mov	r0, r1
 80052cc:	4611      	mov	r1, r2
 80052ce:	2200      	movs	r2, #0
 80052d0:	602a      	str	r2, [r5, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f7fb fc46 	bl	8000b64 <_lseek>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d102      	bne.n	80052e2 <_lseek_r+0x1e>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	b103      	cbz	r3, 80052e2 <_lseek_r+0x1e>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	20004c0c 	.word	0x20004c0c

080052e8 <_read_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	@ (8005308 <_read_r+0x20>)
 80052ec:	4604      	mov	r4, r0
 80052ee:	4608      	mov	r0, r1
 80052f0:	4611      	mov	r1, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	602a      	str	r2, [r5, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f7fb fbd4 	bl	8000aa4 <_read>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_read_r+0x1e>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_read_r+0x1e>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20004c0c 	.word	0x20004c0c

0800530c <_write_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	@ (800532c <_write_r+0x20>)
 8005310:	4604      	mov	r4, r0
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f7fb fbdf 	bl	8000ade <_write>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_write_r+0x1e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_write_r+0x1e>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20004c0c 	.word	0x20004c0c

08005330 <__errno>:
 8005330:	4b01      	ldr	r3, [pc, #4]	@ (8005338 <__errno+0x8>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000001c 	.word	0x2000001c

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	@ (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	@ (8005378 <__libc_init_array+0x3c>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2600      	movs	r6, #0
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	@ (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	@ (8005380 <__libc_init_array+0x44>)
 8005350:	f000 fdc4 	bl	8005edc <_init>
 8005354:	1b64      	subs	r4, r4, r5
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2600      	movs	r6, #0
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	08005fc8 	.word	0x08005fc8
 8005378:	08005fc8 	.word	0x08005fc8
 800537c:	08005fc8 	.word	0x08005fc8
 8005380:	08005fcc 	.word	0x08005fcc

08005384 <__retarget_lock_init_recursive>:
 8005384:	4770      	bx	lr

08005386 <__retarget_lock_acquire_recursive>:
 8005386:	4770      	bx	lr

08005388 <__retarget_lock_release_recursive>:
 8005388:	4770      	bx	lr

0800538a <memcpy>:
 800538a:	440a      	add	r2, r1
 800538c:	4291      	cmp	r1, r2
 800538e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005392:	d100      	bne.n	8005396 <memcpy+0xc>
 8005394:	4770      	bx	lr
 8005396:	b510      	push	{r4, lr}
 8005398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a0:	4291      	cmp	r1, r2
 80053a2:	d1f9      	bne.n	8005398 <memcpy+0xe>
 80053a4:	bd10      	pop	{r4, pc}
	...

080053a8 <_free_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4605      	mov	r5, r0
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d041      	beq.n	8005434 <_free_r+0x8c>
 80053b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b4:	1f0c      	subs	r4, r1, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bfb8      	it	lt
 80053ba:	18e4      	addlt	r4, r4, r3
 80053bc:	f000 f8e0 	bl	8005580 <__malloc_lock>
 80053c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005438 <_free_r+0x90>)
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	b933      	cbnz	r3, 80053d4 <_free_r+0x2c>
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	6014      	str	r4, [r2, #0]
 80053ca:	4628      	mov	r0, r5
 80053cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d0:	f000 b8dc 	b.w	800558c <__malloc_unlock>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d908      	bls.n	80053ea <_free_r+0x42>
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	1821      	adds	r1, r4, r0
 80053dc:	428b      	cmp	r3, r1
 80053de:	bf01      	itttt	eq
 80053e0:	6819      	ldreq	r1, [r3, #0]
 80053e2:	685b      	ldreq	r3, [r3, #4]
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	e7ed      	b.n	80053c6 <_free_r+0x1e>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x4c>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x42>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1850      	adds	r0, r2, r1
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x6c>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	4401      	add	r1, r0
 8005400:	1850      	adds	r0, r2, r1
 8005402:	4283      	cmp	r3, r0
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1e0      	bne.n	80053ca <_free_r+0x22>
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4408      	add	r0, r1
 8005410:	6010      	str	r0, [r2, #0]
 8005412:	e7da      	b.n	80053ca <_free_r+0x22>
 8005414:	d902      	bls.n	800541c <_free_r+0x74>
 8005416:	230c      	movs	r3, #12
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	e7d6      	b.n	80053ca <_free_r+0x22>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1809      	addeq	r1, r1, r0
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7ca      	b.n	80053ca <_free_r+0x22>
 8005434:	bd38      	pop	{r3, r4, r5, pc}
 8005436:	bf00      	nop
 8005438:	20004c18 	.word	0x20004c18

0800543c <sbrk_aligned>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4e0f      	ldr	r6, [pc, #60]	@ (800547c <sbrk_aligned+0x40>)
 8005440:	460c      	mov	r4, r1
 8005442:	6831      	ldr	r1, [r6, #0]
 8005444:	4605      	mov	r5, r0
 8005446:	b911      	cbnz	r1, 800544e <sbrk_aligned+0x12>
 8005448:	f000 fcb4 	bl	8005db4 <_sbrk_r>
 800544c:	6030      	str	r0, [r6, #0]
 800544e:	4621      	mov	r1, r4
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fcaf 	bl	8005db4 <_sbrk_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	d103      	bne.n	8005462 <sbrk_aligned+0x26>
 800545a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800545e:	4620      	mov	r0, r4
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	1cc4      	adds	r4, r0, #3
 8005464:	f024 0403 	bic.w	r4, r4, #3
 8005468:	42a0      	cmp	r0, r4
 800546a:	d0f8      	beq.n	800545e <sbrk_aligned+0x22>
 800546c:	1a21      	subs	r1, r4, r0
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fca0 	bl	8005db4 <_sbrk_r>
 8005474:	3001      	adds	r0, #1
 8005476:	d1f2      	bne.n	800545e <sbrk_aligned+0x22>
 8005478:	e7ef      	b.n	800545a <sbrk_aligned+0x1e>
 800547a:	bf00      	nop
 800547c:	20004c14 	.word	0x20004c14

08005480 <_malloc_r>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	1ccd      	adds	r5, r1, #3
 8005486:	f025 0503 	bic.w	r5, r5, #3
 800548a:	3508      	adds	r5, #8
 800548c:	2d0c      	cmp	r5, #12
 800548e:	bf38      	it	cc
 8005490:	250c      	movcc	r5, #12
 8005492:	2d00      	cmp	r5, #0
 8005494:	4606      	mov	r6, r0
 8005496:	db01      	blt.n	800549c <_malloc_r+0x1c>
 8005498:	42a9      	cmp	r1, r5
 800549a:	d904      	bls.n	80054a6 <_malloc_r+0x26>
 800549c:	230c      	movs	r3, #12
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800557c <_malloc_r+0xfc>
 80054aa:	f000 f869 	bl	8005580 <__malloc_lock>
 80054ae:	f8d8 3000 	ldr.w	r3, [r8]
 80054b2:	461c      	mov	r4, r3
 80054b4:	bb44      	cbnz	r4, 8005508 <_malloc_r+0x88>
 80054b6:	4629      	mov	r1, r5
 80054b8:	4630      	mov	r0, r6
 80054ba:	f7ff ffbf 	bl	800543c <sbrk_aligned>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	4604      	mov	r4, r0
 80054c2:	d158      	bne.n	8005576 <_malloc_r+0xf6>
 80054c4:	f8d8 4000 	ldr.w	r4, [r8]
 80054c8:	4627      	mov	r7, r4
 80054ca:	2f00      	cmp	r7, #0
 80054cc:	d143      	bne.n	8005556 <_malloc_r+0xd6>
 80054ce:	2c00      	cmp	r4, #0
 80054d0:	d04b      	beq.n	800556a <_malloc_r+0xea>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	eb04 0903 	add.w	r9, r4, r3
 80054dc:	f000 fc6a 	bl	8005db4 <_sbrk_r>
 80054e0:	4581      	cmp	r9, r0
 80054e2:	d142      	bne.n	800556a <_malloc_r+0xea>
 80054e4:	6821      	ldr	r1, [r4, #0]
 80054e6:	1a6d      	subs	r5, r5, r1
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffa6 	bl	800543c <sbrk_aligned>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d03a      	beq.n	800556a <_malloc_r+0xea>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	442b      	add	r3, r5
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	f8d8 3000 	ldr.w	r3, [r8]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	bb62      	cbnz	r2, 800555c <_malloc_r+0xdc>
 8005502:	f8c8 7000 	str.w	r7, [r8]
 8005506:	e00f      	b.n	8005528 <_malloc_r+0xa8>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	1b52      	subs	r2, r2, r5
 800550c:	d420      	bmi.n	8005550 <_malloc_r+0xd0>
 800550e:	2a0b      	cmp	r2, #11
 8005510:	d917      	bls.n	8005542 <_malloc_r+0xc2>
 8005512:	1961      	adds	r1, r4, r5
 8005514:	42a3      	cmp	r3, r4
 8005516:	6025      	str	r5, [r4, #0]
 8005518:	bf18      	it	ne
 800551a:	6059      	strne	r1, [r3, #4]
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	bf08      	it	eq
 8005520:	f8c8 1000 	streq.w	r1, [r8]
 8005524:	5162      	str	r2, [r4, r5]
 8005526:	604b      	str	r3, [r1, #4]
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f82f 	bl	800558c <__malloc_unlock>
 800552e:	f104 000b 	add.w	r0, r4, #11
 8005532:	1d23      	adds	r3, r4, #4
 8005534:	f020 0007 	bic.w	r0, r0, #7
 8005538:	1ac2      	subs	r2, r0, r3
 800553a:	bf1c      	itt	ne
 800553c:	1a1b      	subne	r3, r3, r0
 800553e:	50a3      	strne	r3, [r4, r2]
 8005540:	e7af      	b.n	80054a2 <_malloc_r+0x22>
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	42a3      	cmp	r3, r4
 8005546:	bf0c      	ite	eq
 8005548:	f8c8 2000 	streq.w	r2, [r8]
 800554c:	605a      	strne	r2, [r3, #4]
 800554e:	e7eb      	b.n	8005528 <_malloc_r+0xa8>
 8005550:	4623      	mov	r3, r4
 8005552:	6864      	ldr	r4, [r4, #4]
 8005554:	e7ae      	b.n	80054b4 <_malloc_r+0x34>
 8005556:	463c      	mov	r4, r7
 8005558:	687f      	ldr	r7, [r7, #4]
 800555a:	e7b6      	b.n	80054ca <_malloc_r+0x4a>
 800555c:	461a      	mov	r2, r3
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	d1fb      	bne.n	800555c <_malloc_r+0xdc>
 8005564:	2300      	movs	r3, #0
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	e7de      	b.n	8005528 <_malloc_r+0xa8>
 800556a:	230c      	movs	r3, #12
 800556c:	6033      	str	r3, [r6, #0]
 800556e:	4630      	mov	r0, r6
 8005570:	f000 f80c 	bl	800558c <__malloc_unlock>
 8005574:	e794      	b.n	80054a0 <_malloc_r+0x20>
 8005576:	6005      	str	r5, [r0, #0]
 8005578:	e7d6      	b.n	8005528 <_malloc_r+0xa8>
 800557a:	bf00      	nop
 800557c:	20004c18 	.word	0x20004c18

08005580 <__malloc_lock>:
 8005580:	4801      	ldr	r0, [pc, #4]	@ (8005588 <__malloc_lock+0x8>)
 8005582:	f7ff bf00 	b.w	8005386 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	20004c10 	.word	0x20004c10

0800558c <__malloc_unlock>:
 800558c:	4801      	ldr	r0, [pc, #4]	@ (8005594 <__malloc_unlock+0x8>)
 800558e:	f7ff befb 	b.w	8005388 <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	20004c10 	.word	0x20004c10

08005598 <__sfputc_r>:
 8005598:	6893      	ldr	r3, [r2, #8]
 800559a:	3b01      	subs	r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	b410      	push	{r4}
 80055a0:	6093      	str	r3, [r2, #8]
 80055a2:	da08      	bge.n	80055b6 <__sfputc_r+0x1e>
 80055a4:	6994      	ldr	r4, [r2, #24]
 80055a6:	42a3      	cmp	r3, r4
 80055a8:	db01      	blt.n	80055ae <__sfputc_r+0x16>
 80055aa:	290a      	cmp	r1, #10
 80055ac:	d103      	bne.n	80055b6 <__sfputc_r+0x1e>
 80055ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b2:	f000 bb6b 	b.w	8005c8c <__swbuf_r>
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	1c58      	adds	r0, r3, #1
 80055ba:	6010      	str	r0, [r2, #0]
 80055bc:	7019      	strb	r1, [r3, #0]
 80055be:	4608      	mov	r0, r1
 80055c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <__sfputs_r>:
 80055c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c8:	4606      	mov	r6, r0
 80055ca:	460f      	mov	r7, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	18d5      	adds	r5, r2, r3
 80055d0:	42ac      	cmp	r4, r5
 80055d2:	d101      	bne.n	80055d8 <__sfputs_r+0x12>
 80055d4:	2000      	movs	r0, #0
 80055d6:	e007      	b.n	80055e8 <__sfputs_r+0x22>
 80055d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055dc:	463a      	mov	r2, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	f7ff ffda 	bl	8005598 <__sfputc_r>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d1f3      	bne.n	80055d0 <__sfputs_r+0xa>
 80055e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055ec <_vfiprintf_r>:
 80055ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	460d      	mov	r5, r1
 80055f2:	b09d      	sub	sp, #116	@ 0x74
 80055f4:	4614      	mov	r4, r2
 80055f6:	4698      	mov	r8, r3
 80055f8:	4606      	mov	r6, r0
 80055fa:	b118      	cbz	r0, 8005604 <_vfiprintf_r+0x18>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <_vfiprintf_r+0x18>
 8005600:	f7ff fd5e 	bl	80050c0 <__sinit>
 8005604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005606:	07d9      	lsls	r1, r3, #31
 8005608:	d405      	bmi.n	8005616 <_vfiprintf_r+0x2a>
 800560a:	89ab      	ldrh	r3, [r5, #12]
 800560c:	059a      	lsls	r2, r3, #22
 800560e:	d402      	bmi.n	8005616 <_vfiprintf_r+0x2a>
 8005610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005612:	f7ff feb8 	bl	8005386 <__retarget_lock_acquire_recursive>
 8005616:	89ab      	ldrh	r3, [r5, #12]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	d501      	bpl.n	8005620 <_vfiprintf_r+0x34>
 800561c:	692b      	ldr	r3, [r5, #16]
 800561e:	b99b      	cbnz	r3, 8005648 <_vfiprintf_r+0x5c>
 8005620:	4629      	mov	r1, r5
 8005622:	4630      	mov	r0, r6
 8005624:	f000 fb70 	bl	8005d08 <__swsetup_r>
 8005628:	b170      	cbz	r0, 8005648 <_vfiprintf_r+0x5c>
 800562a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800562c:	07dc      	lsls	r4, r3, #31
 800562e:	d504      	bpl.n	800563a <_vfiprintf_r+0x4e>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005634:	b01d      	add	sp, #116	@ 0x74
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	0598      	lsls	r0, r3, #22
 800563e:	d4f7      	bmi.n	8005630 <_vfiprintf_r+0x44>
 8005640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005642:	f7ff fea1 	bl	8005388 <__retarget_lock_release_recursive>
 8005646:	e7f3      	b.n	8005630 <_vfiprintf_r+0x44>
 8005648:	2300      	movs	r3, #0
 800564a:	9309      	str	r3, [sp, #36]	@ 0x24
 800564c:	2320      	movs	r3, #32
 800564e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005652:	f8cd 800c 	str.w	r8, [sp, #12]
 8005656:	2330      	movs	r3, #48	@ 0x30
 8005658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005808 <_vfiprintf_r+0x21c>
 800565c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005660:	f04f 0901 	mov.w	r9, #1
 8005664:	4623      	mov	r3, r4
 8005666:	469a      	mov	sl, r3
 8005668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800566c:	b10a      	cbz	r2, 8005672 <_vfiprintf_r+0x86>
 800566e:	2a25      	cmp	r2, #37	@ 0x25
 8005670:	d1f9      	bne.n	8005666 <_vfiprintf_r+0x7a>
 8005672:	ebba 0b04 	subs.w	fp, sl, r4
 8005676:	d00b      	beq.n	8005690 <_vfiprintf_r+0xa4>
 8005678:	465b      	mov	r3, fp
 800567a:	4622      	mov	r2, r4
 800567c:	4629      	mov	r1, r5
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ffa1 	bl	80055c6 <__sfputs_r>
 8005684:	3001      	adds	r0, #1
 8005686:	f000 80a7 	beq.w	80057d8 <_vfiprintf_r+0x1ec>
 800568a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800568c:	445a      	add	r2, fp
 800568e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005690:	f89a 3000 	ldrb.w	r3, [sl]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 809f 	beq.w	80057d8 <_vfiprintf_r+0x1ec>
 800569a:	2300      	movs	r3, #0
 800569c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056a4:	f10a 0a01 	add.w	sl, sl, #1
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	9307      	str	r3, [sp, #28]
 80056ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80056b2:	4654      	mov	r4, sl
 80056b4:	2205      	movs	r2, #5
 80056b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ba:	4853      	ldr	r0, [pc, #332]	@ (8005808 <_vfiprintf_r+0x21c>)
 80056bc:	f7fa fda8 	bl	8000210 <memchr>
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	b9d8      	cbnz	r0, 80056fc <_vfiprintf_r+0x110>
 80056c4:	06d1      	lsls	r1, r2, #27
 80056c6:	bf44      	itt	mi
 80056c8:	2320      	movmi	r3, #32
 80056ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ce:	0713      	lsls	r3, r2, #28
 80056d0:	bf44      	itt	mi
 80056d2:	232b      	movmi	r3, #43	@ 0x2b
 80056d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056d8:	f89a 3000 	ldrb.w	r3, [sl]
 80056dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80056de:	d015      	beq.n	800570c <_vfiprintf_r+0x120>
 80056e0:	9a07      	ldr	r2, [sp, #28]
 80056e2:	4654      	mov	r4, sl
 80056e4:	2000      	movs	r0, #0
 80056e6:	f04f 0c0a 	mov.w	ip, #10
 80056ea:	4621      	mov	r1, r4
 80056ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f0:	3b30      	subs	r3, #48	@ 0x30
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	d94b      	bls.n	800578e <_vfiprintf_r+0x1a2>
 80056f6:	b1b0      	cbz	r0, 8005726 <_vfiprintf_r+0x13a>
 80056f8:	9207      	str	r2, [sp, #28]
 80056fa:	e014      	b.n	8005726 <_vfiprintf_r+0x13a>
 80056fc:	eba0 0308 	sub.w	r3, r0, r8
 8005700:	fa09 f303 	lsl.w	r3, r9, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	46a2      	mov	sl, r4
 800570a:	e7d2      	b.n	80056b2 <_vfiprintf_r+0xc6>
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	1d19      	adds	r1, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	9103      	str	r1, [sp, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	bfbb      	ittet	lt
 8005718:	425b      	neglt	r3, r3
 800571a:	f042 0202 	orrlt.w	r2, r2, #2
 800571e:	9307      	strge	r3, [sp, #28]
 8005720:	9307      	strlt	r3, [sp, #28]
 8005722:	bfb8      	it	lt
 8005724:	9204      	strlt	r2, [sp, #16]
 8005726:	7823      	ldrb	r3, [r4, #0]
 8005728:	2b2e      	cmp	r3, #46	@ 0x2e
 800572a:	d10a      	bne.n	8005742 <_vfiprintf_r+0x156>
 800572c:	7863      	ldrb	r3, [r4, #1]
 800572e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005730:	d132      	bne.n	8005798 <_vfiprintf_r+0x1ac>
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	9203      	str	r2, [sp, #12]
 800573a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800573e:	3402      	adds	r4, #2
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005818 <_vfiprintf_r+0x22c>
 8005746:	7821      	ldrb	r1, [r4, #0]
 8005748:	2203      	movs	r2, #3
 800574a:	4650      	mov	r0, sl
 800574c:	f7fa fd60 	bl	8000210 <memchr>
 8005750:	b138      	cbz	r0, 8005762 <_vfiprintf_r+0x176>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	eba0 000a 	sub.w	r0, r0, sl
 8005758:	2240      	movs	r2, #64	@ 0x40
 800575a:	4082      	lsls	r2, r0
 800575c:	4313      	orrs	r3, r2
 800575e:	3401      	adds	r4, #1
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005766:	4829      	ldr	r0, [pc, #164]	@ (800580c <_vfiprintf_r+0x220>)
 8005768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800576c:	2206      	movs	r2, #6
 800576e:	f7fa fd4f 	bl	8000210 <memchr>
 8005772:	2800      	cmp	r0, #0
 8005774:	d03f      	beq.n	80057f6 <_vfiprintf_r+0x20a>
 8005776:	4b26      	ldr	r3, [pc, #152]	@ (8005810 <_vfiprintf_r+0x224>)
 8005778:	bb1b      	cbnz	r3, 80057c2 <_vfiprintf_r+0x1d6>
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	3307      	adds	r3, #7
 800577e:	f023 0307 	bic.w	r3, r3, #7
 8005782:	3308      	adds	r3, #8
 8005784:	9303      	str	r3, [sp, #12]
 8005786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005788:	443b      	add	r3, r7
 800578a:	9309      	str	r3, [sp, #36]	@ 0x24
 800578c:	e76a      	b.n	8005664 <_vfiprintf_r+0x78>
 800578e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005792:	460c      	mov	r4, r1
 8005794:	2001      	movs	r0, #1
 8005796:	e7a8      	b.n	80056ea <_vfiprintf_r+0xfe>
 8005798:	2300      	movs	r3, #0
 800579a:	3401      	adds	r4, #1
 800579c:	9305      	str	r3, [sp, #20]
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0c0a 	mov.w	ip, #10
 80057a4:	4620      	mov	r0, r4
 80057a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057aa:	3a30      	subs	r2, #48	@ 0x30
 80057ac:	2a09      	cmp	r2, #9
 80057ae:	d903      	bls.n	80057b8 <_vfiprintf_r+0x1cc>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0c6      	beq.n	8005742 <_vfiprintf_r+0x156>
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	e7c4      	b.n	8005742 <_vfiprintf_r+0x156>
 80057b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057bc:	4604      	mov	r4, r0
 80057be:	2301      	movs	r3, #1
 80057c0:	e7f0      	b.n	80057a4 <_vfiprintf_r+0x1b8>
 80057c2:	ab03      	add	r3, sp, #12
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <_vfiprintf_r+0x228>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	4630      	mov	r0, r6
 80057ce:	f3af 8000 	nop.w
 80057d2:	4607      	mov	r7, r0
 80057d4:	1c78      	adds	r0, r7, #1
 80057d6:	d1d6      	bne.n	8005786 <_vfiprintf_r+0x19a>
 80057d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057da:	07d9      	lsls	r1, r3, #31
 80057dc:	d405      	bmi.n	80057ea <_vfiprintf_r+0x1fe>
 80057de:	89ab      	ldrh	r3, [r5, #12]
 80057e0:	059a      	lsls	r2, r3, #22
 80057e2:	d402      	bmi.n	80057ea <_vfiprintf_r+0x1fe>
 80057e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057e6:	f7ff fdcf 	bl	8005388 <__retarget_lock_release_recursive>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	065b      	lsls	r3, r3, #25
 80057ee:	f53f af1f 	bmi.w	8005630 <_vfiprintf_r+0x44>
 80057f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057f4:	e71e      	b.n	8005634 <_vfiprintf_r+0x48>
 80057f6:	ab03      	add	r3, sp, #12
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	462a      	mov	r2, r5
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <_vfiprintf_r+0x228>)
 80057fe:	a904      	add	r1, sp, #16
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f879 	bl	80058f8 <_printf_i>
 8005806:	e7e4      	b.n	80057d2 <_vfiprintf_r+0x1e6>
 8005808:	08005f8c 	.word	0x08005f8c
 800580c:	08005f96 	.word	0x08005f96
 8005810:	00000000 	.word	0x00000000
 8005814:	080055c7 	.word	0x080055c7
 8005818:	08005f92 	.word	0x08005f92

0800581c <_printf_common>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	4616      	mov	r6, r2
 8005822:	4698      	mov	r8, r3
 8005824:	688a      	ldr	r2, [r1, #8]
 8005826:	690b      	ldr	r3, [r1, #16]
 8005828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800582c:	4293      	cmp	r3, r2
 800582e:	bfb8      	it	lt
 8005830:	4613      	movlt	r3, r2
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005838:	4607      	mov	r7, r0
 800583a:	460c      	mov	r4, r1
 800583c:	b10a      	cbz	r2, 8005842 <_printf_common+0x26>
 800583e:	3301      	adds	r3, #1
 8005840:	6033      	str	r3, [r6, #0]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	0699      	lsls	r1, r3, #26
 8005846:	bf42      	ittt	mi
 8005848:	6833      	ldrmi	r3, [r6, #0]
 800584a:	3302      	addmi	r3, #2
 800584c:	6033      	strmi	r3, [r6, #0]
 800584e:	6825      	ldr	r5, [r4, #0]
 8005850:	f015 0506 	ands.w	r5, r5, #6
 8005854:	d106      	bne.n	8005864 <_printf_common+0x48>
 8005856:	f104 0a19 	add.w	sl, r4, #25
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	6832      	ldr	r2, [r6, #0]
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	42ab      	cmp	r3, r5
 8005862:	dc26      	bgt.n	80058b2 <_printf_common+0x96>
 8005864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005868:	6822      	ldr	r2, [r4, #0]
 800586a:	3b00      	subs	r3, #0
 800586c:	bf18      	it	ne
 800586e:	2301      	movne	r3, #1
 8005870:	0692      	lsls	r2, r2, #26
 8005872:	d42b      	bmi.n	80058cc <_printf_common+0xb0>
 8005874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005878:	4641      	mov	r1, r8
 800587a:	4638      	mov	r0, r7
 800587c:	47c8      	blx	r9
 800587e:	3001      	adds	r0, #1
 8005880:	d01e      	beq.n	80058c0 <_printf_common+0xa4>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	f003 0306 	and.w	r3, r3, #6
 800588a:	2b04      	cmp	r3, #4
 800588c:	bf02      	ittt	eq
 800588e:	68e5      	ldreq	r5, [r4, #12]
 8005890:	6833      	ldreq	r3, [r6, #0]
 8005892:	1aed      	subeq	r5, r5, r3
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	bf0c      	ite	eq
 8005898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800589c:	2500      	movne	r5, #0
 800589e:	4293      	cmp	r3, r2
 80058a0:	bfc4      	itt	gt
 80058a2:	1a9b      	subgt	r3, r3, r2
 80058a4:	18ed      	addgt	r5, r5, r3
 80058a6:	2600      	movs	r6, #0
 80058a8:	341a      	adds	r4, #26
 80058aa:	42b5      	cmp	r5, r6
 80058ac:	d11a      	bne.n	80058e4 <_printf_common+0xc8>
 80058ae:	2000      	movs	r0, #0
 80058b0:	e008      	b.n	80058c4 <_printf_common+0xa8>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4652      	mov	r2, sl
 80058b6:	4641      	mov	r1, r8
 80058b8:	4638      	mov	r0, r7
 80058ba:	47c8      	blx	r9
 80058bc:	3001      	adds	r0, #1
 80058be:	d103      	bne.n	80058c8 <_printf_common+0xac>
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c8:	3501      	adds	r5, #1
 80058ca:	e7c6      	b.n	800585a <_printf_common+0x3e>
 80058cc:	18e1      	adds	r1, r4, r3
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	2030      	movs	r0, #48	@ 0x30
 80058d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058d6:	4422      	add	r2, r4
 80058d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058e0:	3302      	adds	r3, #2
 80058e2:	e7c7      	b.n	8005874 <_printf_common+0x58>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4622      	mov	r2, r4
 80058e8:	4641      	mov	r1, r8
 80058ea:	4638      	mov	r0, r7
 80058ec:	47c8      	blx	r9
 80058ee:	3001      	adds	r0, #1
 80058f0:	d0e6      	beq.n	80058c0 <_printf_common+0xa4>
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7d9      	b.n	80058aa <_printf_common+0x8e>
	...

080058f8 <_printf_i>:
 80058f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058fc:	7e0f      	ldrb	r7, [r1, #24]
 80058fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005900:	2f78      	cmp	r7, #120	@ 0x78
 8005902:	4691      	mov	r9, r2
 8005904:	4680      	mov	r8, r0
 8005906:	460c      	mov	r4, r1
 8005908:	469a      	mov	sl, r3
 800590a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800590e:	d807      	bhi.n	8005920 <_printf_i+0x28>
 8005910:	2f62      	cmp	r7, #98	@ 0x62
 8005912:	d80a      	bhi.n	800592a <_printf_i+0x32>
 8005914:	2f00      	cmp	r7, #0
 8005916:	f000 80d1 	beq.w	8005abc <_printf_i+0x1c4>
 800591a:	2f58      	cmp	r7, #88	@ 0x58
 800591c:	f000 80b8 	beq.w	8005a90 <_printf_i+0x198>
 8005920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005928:	e03a      	b.n	80059a0 <_printf_i+0xa8>
 800592a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800592e:	2b15      	cmp	r3, #21
 8005930:	d8f6      	bhi.n	8005920 <_printf_i+0x28>
 8005932:	a101      	add	r1, pc, #4	@ (adr r1, 8005938 <_printf_i+0x40>)
 8005934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005938:	08005991 	.word	0x08005991
 800593c:	080059a5 	.word	0x080059a5
 8005940:	08005921 	.word	0x08005921
 8005944:	08005921 	.word	0x08005921
 8005948:	08005921 	.word	0x08005921
 800594c:	08005921 	.word	0x08005921
 8005950:	080059a5 	.word	0x080059a5
 8005954:	08005921 	.word	0x08005921
 8005958:	08005921 	.word	0x08005921
 800595c:	08005921 	.word	0x08005921
 8005960:	08005921 	.word	0x08005921
 8005964:	08005aa3 	.word	0x08005aa3
 8005968:	080059cf 	.word	0x080059cf
 800596c:	08005a5d 	.word	0x08005a5d
 8005970:	08005921 	.word	0x08005921
 8005974:	08005921 	.word	0x08005921
 8005978:	08005ac5 	.word	0x08005ac5
 800597c:	08005921 	.word	0x08005921
 8005980:	080059cf 	.word	0x080059cf
 8005984:	08005921 	.word	0x08005921
 8005988:	08005921 	.word	0x08005921
 800598c:	08005a65 	.word	0x08005a65
 8005990:	6833      	ldr	r3, [r6, #0]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6032      	str	r2, [r6, #0]
 8005998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800599c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059a0:	2301      	movs	r3, #1
 80059a2:	e09c      	b.n	8005ade <_printf_i+0x1e6>
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6031      	str	r1, [r6, #0]
 80059ac:	0606      	lsls	r6, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xbc>
 80059b0:	681d      	ldr	r5, [r3, #0]
 80059b2:	e003      	b.n	80059bc <_printf_i+0xc4>
 80059b4:	0645      	lsls	r5, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xb8>
 80059b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059bc:	2d00      	cmp	r5, #0
 80059be:	da03      	bge.n	80059c8 <_printf_i+0xd0>
 80059c0:	232d      	movs	r3, #45	@ 0x2d
 80059c2:	426d      	negs	r5, r5
 80059c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059c8:	4858      	ldr	r0, [pc, #352]	@ (8005b2c <_printf_i+0x234>)
 80059ca:	230a      	movs	r3, #10
 80059cc:	e011      	b.n	80059f2 <_printf_i+0xfa>
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	0608      	lsls	r0, r1, #24
 80059d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80059d8:	d402      	bmi.n	80059e0 <_printf_i+0xe8>
 80059da:	0649      	lsls	r1, r1, #25
 80059dc:	bf48      	it	mi
 80059de:	b2ad      	uxthmi	r5, r5
 80059e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80059e2:	4852      	ldr	r0, [pc, #328]	@ (8005b2c <_printf_i+0x234>)
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	bf14      	ite	ne
 80059e8:	230a      	movne	r3, #10
 80059ea:	2308      	moveq	r3, #8
 80059ec:	2100      	movs	r1, #0
 80059ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059f2:	6866      	ldr	r6, [r4, #4]
 80059f4:	60a6      	str	r6, [r4, #8]
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	db05      	blt.n	8005a06 <_printf_i+0x10e>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	432e      	orrs	r6, r5
 80059fe:	f021 0104 	bic.w	r1, r1, #4
 8005a02:	6021      	str	r1, [r4, #0]
 8005a04:	d04b      	beq.n	8005a9e <_printf_i+0x1a6>
 8005a06:	4616      	mov	r6, r2
 8005a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a10:	5dc7      	ldrb	r7, [r0, r7]
 8005a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a16:	462f      	mov	r7, r5
 8005a18:	42bb      	cmp	r3, r7
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	d9f4      	bls.n	8005a08 <_printf_i+0x110>
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d10b      	bne.n	8005a3a <_printf_i+0x142>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	07df      	lsls	r7, r3, #31
 8005a26:	d508      	bpl.n	8005a3a <_printf_i+0x142>
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6861      	ldr	r1, [r4, #4]
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	bfde      	ittt	le
 8005a30:	2330      	movle	r3, #48	@ 0x30
 8005a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a36:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005a3a:	1b92      	subs	r2, r2, r6
 8005a3c:	6122      	str	r2, [r4, #16]
 8005a3e:	f8cd a000 	str.w	sl, [sp]
 8005a42:	464b      	mov	r3, r9
 8005a44:	aa03      	add	r2, sp, #12
 8005a46:	4621      	mov	r1, r4
 8005a48:	4640      	mov	r0, r8
 8005a4a:	f7ff fee7 	bl	800581c <_printf_common>
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d14a      	bne.n	8005ae8 <_printf_i+0x1f0>
 8005a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a56:	b004      	add	sp, #16
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f043 0320 	orr.w	r3, r3, #32
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	4832      	ldr	r0, [pc, #200]	@ (8005b30 <_printf_i+0x238>)
 8005a66:	2778      	movs	r7, #120	@ 0x78
 8005a68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	6831      	ldr	r1, [r6, #0]
 8005a70:	061f      	lsls	r7, r3, #24
 8005a72:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a76:	d402      	bmi.n	8005a7e <_printf_i+0x186>
 8005a78:	065f      	lsls	r7, r3, #25
 8005a7a:	bf48      	it	mi
 8005a7c:	b2ad      	uxthmi	r5, r5
 8005a7e:	6031      	str	r1, [r6, #0]
 8005a80:	07d9      	lsls	r1, r3, #31
 8005a82:	bf44      	itt	mi
 8005a84:	f043 0320 	orrmi.w	r3, r3, #32
 8005a88:	6023      	strmi	r3, [r4, #0]
 8005a8a:	b11d      	cbz	r5, 8005a94 <_printf_i+0x19c>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	e7ad      	b.n	80059ec <_printf_i+0xf4>
 8005a90:	4826      	ldr	r0, [pc, #152]	@ (8005b2c <_printf_i+0x234>)
 8005a92:	e7e9      	b.n	8005a68 <_printf_i+0x170>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	f023 0320 	bic.w	r3, r3, #32
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	e7f6      	b.n	8005a8c <_printf_i+0x194>
 8005a9e:	4616      	mov	r6, r2
 8005aa0:	e7bd      	b.n	8005a1e <_printf_i+0x126>
 8005aa2:	6833      	ldr	r3, [r6, #0]
 8005aa4:	6825      	ldr	r5, [r4, #0]
 8005aa6:	6961      	ldr	r1, [r4, #20]
 8005aa8:	1d18      	adds	r0, r3, #4
 8005aaa:	6030      	str	r0, [r6, #0]
 8005aac:	062e      	lsls	r6, r5, #24
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	d501      	bpl.n	8005ab6 <_printf_i+0x1be>
 8005ab2:	6019      	str	r1, [r3, #0]
 8005ab4:	e002      	b.n	8005abc <_printf_i+0x1c4>
 8005ab6:	0668      	lsls	r0, r5, #25
 8005ab8:	d5fb      	bpl.n	8005ab2 <_printf_i+0x1ba>
 8005aba:	8019      	strh	r1, [r3, #0]
 8005abc:	2300      	movs	r3, #0
 8005abe:	6123      	str	r3, [r4, #16]
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	e7bc      	b.n	8005a3e <_printf_i+0x146>
 8005ac4:	6833      	ldr	r3, [r6, #0]
 8005ac6:	1d1a      	adds	r2, r3, #4
 8005ac8:	6032      	str	r2, [r6, #0]
 8005aca:	681e      	ldr	r6, [r3, #0]
 8005acc:	6862      	ldr	r2, [r4, #4]
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f7fa fb9d 	bl	8000210 <memchr>
 8005ad6:	b108      	cbz	r0, 8005adc <_printf_i+0x1e4>
 8005ad8:	1b80      	subs	r0, r0, r6
 8005ada:	6060      	str	r0, [r4, #4]
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ae6:	e7aa      	b.n	8005a3e <_printf_i+0x146>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	4632      	mov	r2, r6
 8005aec:	4649      	mov	r1, r9
 8005aee:	4640      	mov	r0, r8
 8005af0:	47d0      	blx	sl
 8005af2:	3001      	adds	r0, #1
 8005af4:	d0ad      	beq.n	8005a52 <_printf_i+0x15a>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	079b      	lsls	r3, r3, #30
 8005afa:	d413      	bmi.n	8005b24 <_printf_i+0x22c>
 8005afc:	68e0      	ldr	r0, [r4, #12]
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	4298      	cmp	r0, r3
 8005b02:	bfb8      	it	lt
 8005b04:	4618      	movlt	r0, r3
 8005b06:	e7a6      	b.n	8005a56 <_printf_i+0x15e>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4640      	mov	r0, r8
 8005b10:	47d0      	blx	sl
 8005b12:	3001      	adds	r0, #1
 8005b14:	d09d      	beq.n	8005a52 <_printf_i+0x15a>
 8005b16:	3501      	adds	r5, #1
 8005b18:	68e3      	ldr	r3, [r4, #12]
 8005b1a:	9903      	ldr	r1, [sp, #12]
 8005b1c:	1a5b      	subs	r3, r3, r1
 8005b1e:	42ab      	cmp	r3, r5
 8005b20:	dcf2      	bgt.n	8005b08 <_printf_i+0x210>
 8005b22:	e7eb      	b.n	8005afc <_printf_i+0x204>
 8005b24:	2500      	movs	r5, #0
 8005b26:	f104 0619 	add.w	r6, r4, #25
 8005b2a:	e7f5      	b.n	8005b18 <_printf_i+0x220>
 8005b2c:	08005f9d 	.word	0x08005f9d
 8005b30:	08005fae 	.word	0x08005fae

08005b34 <__sflush_r>:
 8005b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3c:	0716      	lsls	r6, r2, #28
 8005b3e:	4605      	mov	r5, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	d454      	bmi.n	8005bee <__sflush_r+0xba>
 8005b44:	684b      	ldr	r3, [r1, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dc02      	bgt.n	8005b50 <__sflush_r+0x1c>
 8005b4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dd48      	ble.n	8005be2 <__sflush_r+0xae>
 8005b50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	d045      	beq.n	8005be2 <__sflush_r+0xae>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b5c:	682f      	ldr	r7, [r5, #0]
 8005b5e:	6a21      	ldr	r1, [r4, #32]
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	d030      	beq.n	8005bc6 <__sflush_r+0x92>
 8005b64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	0759      	lsls	r1, r3, #29
 8005b6a:	d505      	bpl.n	8005b78 <__sflush_r+0x44>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b72:	b10b      	cbz	r3, 8005b78 <__sflush_r+0x44>
 8005b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b7c:	6a21      	ldr	r1, [r4, #32]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b0      	blx	r6
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	d106      	bne.n	8005b96 <__sflush_r+0x62>
 8005b88:	6829      	ldr	r1, [r5, #0]
 8005b8a:	291d      	cmp	r1, #29
 8005b8c:	d82b      	bhi.n	8005be6 <__sflush_r+0xb2>
 8005b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c38 <__sflush_r+0x104>)
 8005b90:	40ca      	lsrs	r2, r1
 8005b92:	07d6      	lsls	r6, r2, #31
 8005b94:	d527      	bpl.n	8005be6 <__sflush_r+0xb2>
 8005b96:	2200      	movs	r2, #0
 8005b98:	6062      	str	r2, [r4, #4]
 8005b9a:	04d9      	lsls	r1, r3, #19
 8005b9c:	6922      	ldr	r2, [r4, #16]
 8005b9e:	6022      	str	r2, [r4, #0]
 8005ba0:	d504      	bpl.n	8005bac <__sflush_r+0x78>
 8005ba2:	1c42      	adds	r2, r0, #1
 8005ba4:	d101      	bne.n	8005baa <__sflush_r+0x76>
 8005ba6:	682b      	ldr	r3, [r5, #0]
 8005ba8:	b903      	cbnz	r3, 8005bac <__sflush_r+0x78>
 8005baa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bae:	602f      	str	r7, [r5, #0]
 8005bb0:	b1b9      	cbz	r1, 8005be2 <__sflush_r+0xae>
 8005bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d002      	beq.n	8005bc0 <__sflush_r+0x8c>
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f7ff fbf4 	bl	80053a8 <_free_r>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc4:	e00d      	b.n	8005be2 <__sflush_r+0xae>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b0      	blx	r6
 8005bcc:	4602      	mov	r2, r0
 8005bce:	1c50      	adds	r0, r2, #1
 8005bd0:	d1c9      	bne.n	8005b66 <__sflush_r+0x32>
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0c6      	beq.n	8005b66 <__sflush_r+0x32>
 8005bd8:	2b1d      	cmp	r3, #29
 8005bda:	d001      	beq.n	8005be0 <__sflush_r+0xac>
 8005bdc:	2b16      	cmp	r3, #22
 8005bde:	d11e      	bne.n	8005c1e <__sflush_r+0xea>
 8005be0:	602f      	str	r7, [r5, #0]
 8005be2:	2000      	movs	r0, #0
 8005be4:	e022      	b.n	8005c2c <__sflush_r+0xf8>
 8005be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bea:	b21b      	sxth	r3, r3
 8005bec:	e01b      	b.n	8005c26 <__sflush_r+0xf2>
 8005bee:	690f      	ldr	r7, [r1, #16]
 8005bf0:	2f00      	cmp	r7, #0
 8005bf2:	d0f6      	beq.n	8005be2 <__sflush_r+0xae>
 8005bf4:	0793      	lsls	r3, r2, #30
 8005bf6:	680e      	ldr	r6, [r1, #0]
 8005bf8:	bf08      	it	eq
 8005bfa:	694b      	ldreq	r3, [r1, #20]
 8005bfc:	600f      	str	r7, [r1, #0]
 8005bfe:	bf18      	it	ne
 8005c00:	2300      	movne	r3, #0
 8005c02:	eba6 0807 	sub.w	r8, r6, r7
 8005c06:	608b      	str	r3, [r1, #8]
 8005c08:	f1b8 0f00 	cmp.w	r8, #0
 8005c0c:	dde9      	ble.n	8005be2 <__sflush_r+0xae>
 8005c0e:	6a21      	ldr	r1, [r4, #32]
 8005c10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c12:	4643      	mov	r3, r8
 8005c14:	463a      	mov	r2, r7
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b0      	blx	r6
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	dc08      	bgt.n	8005c30 <__sflush_r+0xfc>
 8005c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c30:	4407      	add	r7, r0
 8005c32:	eba8 0800 	sub.w	r8, r8, r0
 8005c36:	e7e7      	b.n	8005c08 <__sflush_r+0xd4>
 8005c38:	20400001 	.word	0x20400001

08005c3c <_fflush_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	b913      	cbnz	r3, 8005c4c <_fflush_r+0x10>
 8005c46:	2500      	movs	r5, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	b118      	cbz	r0, 8005c56 <_fflush_r+0x1a>
 8005c4e:	6a03      	ldr	r3, [r0, #32]
 8005c50:	b90b      	cbnz	r3, 8005c56 <_fflush_r+0x1a>
 8005c52:	f7ff fa35 	bl	80050c0 <__sinit>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f3      	beq.n	8005c46 <_fflush_r+0xa>
 8005c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c60:	07d0      	lsls	r0, r2, #31
 8005c62:	d404      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c64:	0599      	lsls	r1, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c6a:	f7ff fb8c 	bl	8005386 <__retarget_lock_acquire_recursive>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7ff ff5f 	bl	8005b34 <__sflush_r>
 8005c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c78:	07da      	lsls	r2, r3, #31
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	d4e4      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d4e1      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c86:	f7ff fb7f 	bl	8005388 <__retarget_lock_release_recursive>
 8005c8a:	e7dd      	b.n	8005c48 <_fflush_r+0xc>

08005c8c <__swbuf_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	460e      	mov	r6, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	4605      	mov	r5, r0
 8005c94:	b118      	cbz	r0, 8005c9e <__swbuf_r+0x12>
 8005c96:	6a03      	ldr	r3, [r0, #32]
 8005c98:	b90b      	cbnz	r3, 8005c9e <__swbuf_r+0x12>
 8005c9a:	f7ff fa11 	bl	80050c0 <__sinit>
 8005c9e:	69a3      	ldr	r3, [r4, #24]
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	071a      	lsls	r2, r3, #28
 8005ca6:	d501      	bpl.n	8005cac <__swbuf_r+0x20>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	b943      	cbnz	r3, 8005cbe <__swbuf_r+0x32>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f82a 	bl	8005d08 <__swsetup_r>
 8005cb4:	b118      	cbz	r0, 8005cbe <__swbuf_r+0x32>
 8005cb6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005cba:	4638      	mov	r0, r7
 8005cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	1a98      	subs	r0, r3, r2
 8005cc4:	6963      	ldr	r3, [r4, #20]
 8005cc6:	b2f6      	uxtb	r6, r6
 8005cc8:	4283      	cmp	r3, r0
 8005cca:	4637      	mov	r7, r6
 8005ccc:	dc05      	bgt.n	8005cda <__swbuf_r+0x4e>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff ffb3 	bl	8005c3c <_fflush_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1ed      	bne.n	8005cb6 <__swbuf_r+0x2a>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60a3      	str	r3, [r4, #8]
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	6022      	str	r2, [r4, #0]
 8005ce6:	701e      	strb	r6, [r3, #0]
 8005ce8:	6962      	ldr	r2, [r4, #20]
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d004      	beq.n	8005cfa <__swbuf_r+0x6e>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d5e1      	bpl.n	8005cba <__swbuf_r+0x2e>
 8005cf6:	2e0a      	cmp	r6, #10
 8005cf8:	d1df      	bne.n	8005cba <__swbuf_r+0x2e>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f7ff ff9d 	bl	8005c3c <_fflush_r>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0d9      	beq.n	8005cba <__swbuf_r+0x2e>
 8005d06:	e7d6      	b.n	8005cb6 <__swbuf_r+0x2a>

08005d08 <__swsetup_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <__swsetup_r+0xa8>)
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	460c      	mov	r4, r1
 8005d12:	b118      	cbz	r0, 8005d1c <__swsetup_r+0x14>
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	b90b      	cbnz	r3, 8005d1c <__swsetup_r+0x14>
 8005d18:	f7ff f9d2 	bl	80050c0 <__sinit>
 8005d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d20:	0719      	lsls	r1, r3, #28
 8005d22:	d422      	bmi.n	8005d6a <__swsetup_r+0x62>
 8005d24:	06da      	lsls	r2, r3, #27
 8005d26:	d407      	bmi.n	8005d38 <__swsetup_r+0x30>
 8005d28:	2209      	movs	r2, #9
 8005d2a:	602a      	str	r2, [r5, #0]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d36:	e033      	b.n	8005da0 <__swsetup_r+0x98>
 8005d38:	0758      	lsls	r0, r3, #29
 8005d3a:	d512      	bpl.n	8005d62 <__swsetup_r+0x5a>
 8005d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d3e:	b141      	cbz	r1, 8005d52 <__swsetup_r+0x4a>
 8005d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d44:	4299      	cmp	r1, r3
 8005d46:	d002      	beq.n	8005d4e <__swsetup_r+0x46>
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f7ff fb2d 	bl	80053a8 <_free_r>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6063      	str	r3, [r4, #4]
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f043 0308 	orr.w	r3, r3, #8
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	b94b      	cbnz	r3, 8005d82 <__swsetup_r+0x7a>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d78:	d003      	beq.n	8005d82 <__swsetup_r+0x7a>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f000 f84f 	bl	8005e20 <__smakebuf_r>
 8005d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d86:	f013 0201 	ands.w	r2, r3, #1
 8005d8a:	d00a      	beq.n	8005da2 <__swsetup_r+0x9a>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	60a2      	str	r2, [r4, #8]
 8005d90:	6962      	ldr	r2, [r4, #20]
 8005d92:	4252      	negs	r2, r2
 8005d94:	61a2      	str	r2, [r4, #24]
 8005d96:	6922      	ldr	r2, [r4, #16]
 8005d98:	b942      	cbnz	r2, 8005dac <__swsetup_r+0xa4>
 8005d9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d9e:	d1c5      	bne.n	8005d2c <__swsetup_r+0x24>
 8005da0:	bd38      	pop	{r3, r4, r5, pc}
 8005da2:	0799      	lsls	r1, r3, #30
 8005da4:	bf58      	it	pl
 8005da6:	6962      	ldrpl	r2, [r4, #20]
 8005da8:	60a2      	str	r2, [r4, #8]
 8005daa:	e7f4      	b.n	8005d96 <__swsetup_r+0x8e>
 8005dac:	2000      	movs	r0, #0
 8005dae:	e7f7      	b.n	8005da0 <__swsetup_r+0x98>
 8005db0:	2000001c 	.word	0x2000001c

08005db4 <_sbrk_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d06      	ldr	r5, [pc, #24]	@ (8005dd0 <_sbrk_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fa fede 	bl	8000b80 <_sbrk>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_sbrk_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_sbrk_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20004c0c 	.word	0x20004c0c

08005dd4 <__swhatbuf_r>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	b096      	sub	sp, #88	@ 0x58
 8005de0:	4615      	mov	r5, r2
 8005de2:	461e      	mov	r6, r3
 8005de4:	da0d      	bge.n	8005e02 <__swhatbuf_r+0x2e>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	bf14      	ite	ne
 8005df2:	2340      	movne	r3, #64	@ 0x40
 8005df4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005df8:	2000      	movs	r0, #0
 8005dfa:	6031      	str	r1, [r6, #0]
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	b016      	add	sp, #88	@ 0x58
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
 8005e02:	466a      	mov	r2, sp
 8005e04:	f000 f848 	bl	8005e98 <_fstat_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dbec      	blt.n	8005de6 <__swhatbuf_r+0x12>
 8005e0c:	9901      	ldr	r1, [sp, #4]
 8005e0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e16:	4259      	negs	r1, r3
 8005e18:	4159      	adcs	r1, r3
 8005e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e1e:	e7eb      	b.n	8005df8 <__swhatbuf_r+0x24>

08005e20 <__smakebuf_r>:
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e24:	079d      	lsls	r5, r3, #30
 8005e26:	4606      	mov	r6, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	d507      	bpl.n	8005e3c <__smakebuf_r+0x1c>
 8005e2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2301      	movs	r3, #1
 8005e36:	6163      	str	r3, [r4, #20]
 8005e38:	b003      	add	sp, #12
 8005e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e3c:	ab01      	add	r3, sp, #4
 8005e3e:	466a      	mov	r2, sp
 8005e40:	f7ff ffc8 	bl	8005dd4 <__swhatbuf_r>
 8005e44:	9f00      	ldr	r7, [sp, #0]
 8005e46:	4605      	mov	r5, r0
 8005e48:	4639      	mov	r1, r7
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff fb18 	bl	8005480 <_malloc_r>
 8005e50:	b948      	cbnz	r0, 8005e66 <__smakebuf_r+0x46>
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	059a      	lsls	r2, r3, #22
 8005e58:	d4ee      	bmi.n	8005e38 <__smakebuf_r+0x18>
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	f043 0302 	orr.w	r3, r3, #2
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	e7e2      	b.n	8005e2c <__smakebuf_r+0xc>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	6020      	str	r0, [r4, #0]
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e76:	b15b      	cbz	r3, 8005e90 <__smakebuf_r+0x70>
 8005e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f81d 	bl	8005ebc <_isatty_r>
 8005e82:	b128      	cbz	r0, 8005e90 <__smakebuf_r+0x70>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	431d      	orrs	r5, r3
 8005e94:	81a5      	strh	r5, [r4, #12]
 8005e96:	e7cf      	b.n	8005e38 <__smakebuf_r+0x18>

08005e98 <_fstat_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	@ (8005eb8 <_fstat_r+0x20>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	f7fa fe42 	bl	8000b2e <_fstat>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d102      	bne.n	8005eb4 <_fstat_r+0x1c>
 8005eae:	682b      	ldr	r3, [r5, #0]
 8005eb0:	b103      	cbz	r3, 8005eb4 <_fstat_r+0x1c>
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20004c0c 	.word	0x20004c0c

08005ebc <_isatty_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d06      	ldr	r5, [pc, #24]	@ (8005ed8 <_isatty_r+0x1c>)
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7fa fe41 	bl	8000b4e <_isatty>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_isatty_r+0x1a>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_isatty_r+0x1a>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20004c0c 	.word	0x20004c0c

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
